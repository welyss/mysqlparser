package org.welyss.mysqlparser.v84;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.welyss.mysqlparser.MySQLLexer;
import org.welyss.mysqlparser.MySQLThread;
import org.welyss.mysqlparser.ParseResult;
import org.welyss.mysqlparser.Parser;
import org.welyss.mysqlparser.SQLCommand;
import org.welyss.mysqlparser.items.Position;
import org.welyss.mysqlparser.utils.MySQLParserUtils;

/**
 * A Bison parser, automatically generated from <tt>sql_yacc.y</tt>.
 *
 * @author LALR (1) parser skeleton written by Paolo Bonzini.
 */
public class MyParser implements Parser {
	/** Version number for the Bison executable that generated this parser. */
	public static final String bisonVersion = "3.8.1";

	/** Name of the skeleton that generated this parser. */
	public static final String bisonSkeleton = "lalr1.java";

	private static final Logger LOGGER = LogManager.getLogger();

	/**
	 * A class defining a pair of positions. Positions, defined by the <code>Position</code> class, denote a point in the input. Locations represent a part of the
	 * input through the beginning and ending positions.
	 */
	public static class Location {
		/**
		 * The first, inclusive, position in the range.
		 */
		public Position begin;

		/**
		 * The first position beyond the range.
		 */
		public Position end;

		/**
		 * Create a <code>Location</code> denoting an empty range located at a given point.
		 *
		 * @param loc The position at which the range is anchored.
		 */
		public Location(Position loc) {
			this.begin = this.end = loc;
		}

		/**
		 * Create a <code>Location</code> from the endpoints of the range.
		 *
		 * @param begin The first position included in the range.
		 * @param end   The first position beyond the range.
		 */
		public Location(Position begin, Position end) {
			this.begin = begin;
			this.end = end;
		}

		/**
		 * Print a representation of the location. For this to be correct, <code>Position</code> should override the <code>equals</code> method.
		 */
		public String toString() {
			if (begin.equals(end))
				return begin.toString();
			else
				return begin.toString() + "-" + end.toString();
		}
	}

	private Location yylloc(YYStack rhs, int n) {
		if (0 < n)
			return new Location(rhs.locationAt(n - 1).begin, rhs.locationAt(0).end);
		else
			return new Location(rhs.locationAt(0).end);
	}

	public enum SymbolKind {
		S_YYEOF(0), /* "end of file" */
		S_YYerror(1), /* error */
		S_YYUNDEF(2), /* "invalid token" */
		S_ABORT_SYM(3), /* ABORT_SYM */
		S_ACCESSIBLE_SYM(4), /* ACCESSIBLE_SYM */
		S_ACCOUNT_SYM(5), /* ACCOUNT_SYM */
		S_ACTION(6), /* ACTION */
		S_ADD(7), /* ADD */
		S_ADDDATE_SYM(8), /* ADDDATE_SYM */
		S_AFTER_SYM(9), /* AFTER_SYM */
		S_AGAINST(10), /* AGAINST */
		S_AGGREGATE_SYM(11), /* AGGREGATE_SYM */
		S_ALGORITHM_SYM(12), /* ALGORITHM_SYM */
		S_ALL(13), /* ALL */
		S_ALTER(14), /* ALTER */
		S_ALWAYS_SYM(15), /* ALWAYS_SYM */
		S_OBSOLETE_TOKEN_271(16), /* OBSOLETE_TOKEN_271 */
		S_ANALYZE_SYM(17), /* ANALYZE_SYM */
		S_AND_AND_SYM(18), /* AND_AND_SYM */
		S_AND_SYM(19), /* AND_SYM */
		S_ANY_SYM(20), /* ANY_SYM */
		S_AS(21), /* AS */
		S_ASC(22), /* ASC */
		S_ASCII_SYM(23), /* ASCII_SYM */
		S_ASENSITIVE_SYM(24), /* ASENSITIVE_SYM */
		S_AT_SYM(25), /* AT_SYM */
		S_AUTOEXTEND_SIZE_SYM(26), /* AUTOEXTEND_SIZE_SYM */
		S_AUTO_INC(27), /* AUTO_INC */
		S_AVG_ROW_LENGTH(28), /* AVG_ROW_LENGTH */
		S_AVG_SYM(29), /* AVG_SYM */
		S_BACKUP_SYM(30), /* BACKUP_SYM */
		S_BEFORE_SYM(31), /* BEFORE_SYM */
		S_BEGIN_SYM(32), /* BEGIN_SYM */
		S_BETWEEN_SYM(33), /* BETWEEN_SYM */
		S_BIGINT_SYM(34), /* BIGINT_SYM */
		S_BINARY_SYM(35), /* BINARY_SYM */
		S_BINLOG_SYM(36), /* BINLOG_SYM */
		S_BIN_NUM(37), /* BIN_NUM */
		S_BIT_AND_SYM(38), /* BIT_AND_SYM */
		S_BIT_OR_SYM(39), /* BIT_OR_SYM */
		S_BIT_SYM(40), /* BIT_SYM */
		S_BIT_XOR_SYM(41), /* BIT_XOR_SYM */
		S_BLOB_SYM(42), /* BLOB_SYM */
		S_BLOCK_SYM(43), /* BLOCK_SYM */
		S_BOOLEAN_SYM(44), /* BOOLEAN_SYM */
		S_BOOL_SYM(45), /* BOOL_SYM */
		S_BOTH(46), /* BOTH */
		S_BTREE_SYM(47), /* BTREE_SYM */
		S_BY(48), /* BY */
		S_BYTE_SYM(49), /* BYTE_SYM */
		S_CACHE_SYM(50), /* CACHE_SYM */
		S_CALL_SYM(51), /* CALL_SYM */
		S_CASCADE(52), /* CASCADE */
		S_CASCADED(53), /* CASCADED */
		S_CASE_SYM(54), /* CASE_SYM */
		S_CAST_SYM(55), /* CAST_SYM */
		S_CATALOG_NAME_SYM(56), /* CATALOG_NAME_SYM */
		S_CHAIN_SYM(57), /* CHAIN_SYM */
		S_CHANGE(58), /* CHANGE */
		S_CHANGED(59), /* CHANGED */
		S_CHANNEL_SYM(60), /* CHANNEL_SYM */
		S_CHARSET(61), /* CHARSET */
		S_CHAR_SYM(62), /* CHAR_SYM */
		S_CHECKSUM_SYM(63), /* CHECKSUM_SYM */
		S_CHECK_SYM(64), /* CHECK_SYM */
		S_CIPHER_SYM(65), /* CIPHER_SYM */
		S_CLASS_ORIGIN_SYM(66), /* CLASS_ORIGIN_SYM */
		S_CLIENT_SYM(67), /* CLIENT_SYM */
		S_CLOSE_SYM(68), /* CLOSE_SYM */
		S_COALESCE(69), /* COALESCE */
		S_CODE_SYM(70), /* CODE_SYM */
		S_COLLATE_SYM(71), /* COLLATE_SYM */
		S_COLLATION_SYM(72), /* COLLATION_SYM */
		S_COLUMNS(73), /* COLUMNS */
		S_COLUMN_SYM(74), /* COLUMN_SYM */
		S_COLUMN_FORMAT_SYM(75), /* COLUMN_FORMAT_SYM */
		S_COLUMN_NAME_SYM(76), /* COLUMN_NAME_SYM */
		S_COMMENT_SYM(77), /* COMMENT_SYM */
		S_COMMITTED_SYM(78), /* COMMITTED_SYM */
		S_COMMIT_SYM(79), /* COMMIT_SYM */
		S_COMPACT_SYM(80), /* COMPACT_SYM */
		S_COMPLETION_SYM(81), /* COMPLETION_SYM */
		S_COMPRESSED_SYM(82), /* COMPRESSED_SYM */
		S_COMPRESSION_SYM(83), /* COMPRESSION_SYM */
		S_ENCRYPTION_SYM(84), /* ENCRYPTION_SYM */
		S_CONCURRENT(85), /* CONCURRENT */
		S_CONDITION_SYM(86), /* CONDITION_SYM */
		S_CONNECTION_SYM(87), /* CONNECTION_SYM */
		S_CONSISTENT_SYM(88), /* CONSISTENT_SYM */
		S_CONSTRAINT(89), /* CONSTRAINT */
		S_CONSTRAINT_CATALOG_SYM(90), /* CONSTRAINT_CATALOG_SYM */
		S_CONSTRAINT_NAME_SYM(91), /* CONSTRAINT_NAME_SYM */
		S_CONSTRAINT_SCHEMA_SYM(92), /* CONSTRAINT_SCHEMA_SYM */
		S_CONTAINS_SYM(93), /* CONTAINS_SYM */
		S_CONTEXT_SYM(94), /* CONTEXT_SYM */
		S_CONTINUE_SYM(95), /* CONTINUE_SYM */
		S_CONVERT_SYM(96), /* CONVERT_SYM */
		S_COUNT_SYM(97), /* COUNT_SYM */
		S_CPU_SYM(98), /* CPU_SYM */
		S_CREATE(99), /* CREATE */
		S_CROSS(100), /* CROSS */
		S_CUBE_SYM(101), /* CUBE_SYM */
		S_CURDATE(102), /* CURDATE */
		S_CURRENT_SYM(103), /* CURRENT_SYM */
		S_CURRENT_USER(104), /* CURRENT_USER */
		S_CURSOR_SYM(105), /* CURSOR_SYM */
		S_CURSOR_NAME_SYM(106), /* CURSOR_NAME_SYM */
		S_CURTIME(107), /* CURTIME */
		S_DATABASE(108), /* DATABASE */
		S_DATABASES(109), /* DATABASES */
		S_DATAFILE_SYM(110), /* DATAFILE_SYM */
		S_DATA_SYM(111), /* DATA_SYM */
		S_DATETIME_SYM(112), /* DATETIME_SYM */
		S_DATE_ADD_INTERVAL(113), /* DATE_ADD_INTERVAL */
		S_DATE_SUB_INTERVAL(114), /* DATE_SUB_INTERVAL */
		S_DATE_SYM(115), /* DATE_SYM */
		S_DAY_HOUR_SYM(116), /* DAY_HOUR_SYM */
		S_DAY_MICROSECOND_SYM(117), /* DAY_MICROSECOND_SYM */
		S_DAY_MINUTE_SYM(118), /* DAY_MINUTE_SYM */
		S_DAY_SECOND_SYM(119), /* DAY_SECOND_SYM */
		S_DAY_SYM(120), /* DAY_SYM */
		S_DEALLOCATE_SYM(121), /* DEALLOCATE_SYM */
		S_DECIMAL_NUM(122), /* DECIMAL_NUM */
		S_DECIMAL_SYM(123), /* DECIMAL_SYM */
		S_DECLARE_SYM(124), /* DECLARE_SYM */
		S_DEFAULT_SYM(125), /* DEFAULT_SYM */
		S_DEFAULT_AUTH_SYM(126), /* DEFAULT_AUTH_SYM */
		S_DEFINER_SYM(127), /* DEFINER_SYM */
		S_DELAYED_SYM(128), /* DELAYED_SYM */
		S_DELAY_KEY_WRITE_SYM(129), /* DELAY_KEY_WRITE_SYM */
		S_DELETE_SYM(130), /* DELETE_SYM */
		S_DESC(131), /* DESC */
		S_DESCRIBE(132), /* DESCRIBE */
		S_OBSOLETE_TOKEN_388(133), /* OBSOLETE_TOKEN_388 */
		S_DETERMINISTIC_SYM(134), /* DETERMINISTIC_SYM */
		S_DIAGNOSTICS_SYM(135), /* DIAGNOSTICS_SYM */
		S_DIRECTORY_SYM(136), /* DIRECTORY_SYM */
		S_DISABLE_SYM(137), /* DISABLE_SYM */
		S_DISCARD_SYM(138), /* DISCARD_SYM */
		S_DISK_SYM(139), /* DISK_SYM */
		S_DISTINCT(140), /* DISTINCT */
		S_DIV_SYM(141), /* DIV_SYM */
		S_DOUBLE_SYM(142), /* DOUBLE_SYM */
		S_DO_SYM(143), /* DO_SYM */
		S_DROP(144), /* DROP */
		S_DUAL_SYM(145), /* DUAL_SYM */
		S_DUMPFILE(146), /* DUMPFILE */
		S_DUPLICATE_SYM(147), /* DUPLICATE_SYM */
		S_DYNAMIC_SYM(148), /* DYNAMIC_SYM */
		S_EACH_SYM(149), /* EACH_SYM */
		S_ELSE(150), /* ELSE */
		S_ELSEIF_SYM(151), /* ELSEIF_SYM */
		S_ENABLE_SYM(152), /* ENABLE_SYM */
		S_ENCLOSED(153), /* ENCLOSED */
		S_END(154), /* END */
		S_ENDS_SYM(155), /* ENDS_SYM */
		S_END_OF_INPUT(156), /* END_OF_INPUT */
		S_ENGINES_SYM(157), /* ENGINES_SYM */
		S_ENGINE_SYM(158), /* ENGINE_SYM */
		S_ENUM_SYM(159), /* ENUM_SYM */
		S_EQ(160), /* EQ */
		S_EQUAL_SYM(161), /* EQUAL_SYM */
		S_ERROR_SYM(162), /* ERROR_SYM */
		S_ERRORS(163), /* ERRORS */
		S_ESCAPED(164), /* ESCAPED */
		S_ESCAPE_SYM(165), /* ESCAPE_SYM */
		S_EVENTS_SYM(166), /* EVENTS_SYM */
		S_EVENT_SYM(167), /* EVENT_SYM */
		S_EVERY_SYM(168), /* EVERY_SYM */
		S_EXCHANGE_SYM(169), /* EXCHANGE_SYM */
		S_EXECUTE_SYM(170), /* EXECUTE_SYM */
		S_EXISTS(171), /* EXISTS */
		S_EXIT_SYM(172), /* EXIT_SYM */
		S_EXPANSION_SYM(173), /* EXPANSION_SYM */
		S_EXPIRE_SYM(174), /* EXPIRE_SYM */
		S_EXPORT_SYM(175), /* EXPORT_SYM */
		S_EXTENDED_SYM(176), /* EXTENDED_SYM */
		S_EXTENT_SIZE_SYM(177), /* EXTENT_SIZE_SYM */
		S_EXTRACT_SYM(178), /* EXTRACT_SYM */
		S_FALSE_SYM(179), /* FALSE_SYM */
		S_FAST_SYM(180), /* FAST_SYM */
		S_FAULTS_SYM(181), /* FAULTS_SYM */
		S_FETCH_SYM(182), /* FETCH_SYM */
		S_FILE_SYM(183), /* FILE_SYM */
		S_FILE_BLOCK_SIZE_SYM(184), /* FILE_BLOCK_SIZE_SYM */
		S_FILTER_SYM(185), /* FILTER_SYM */
		S_FIRST_SYM(186), /* FIRST_SYM */
		S_FIXED_SYM(187), /* FIXED_SYM */
		S_FLOAT_NUM(188), /* FLOAT_NUM */
		S_FLOAT_SYM(189), /* FLOAT_SYM */
		S_FLUSH_SYM(190), /* FLUSH_SYM */
		S_FOLLOWS_SYM(191), /* FOLLOWS_SYM */
		S_FORCE_SYM(192), /* FORCE_SYM */
		S_FOREIGN(193), /* FOREIGN */
		S_FOR_SYM(194), /* FOR_SYM */
		S_FORMAT_SYM(195), /* FORMAT_SYM */
		S_FOUND_SYM(196), /* FOUND_SYM */
		S_FROM(197), /* FROM */
		S_FULL(198), /* FULL */
		S_FULLTEXT_SYM(199), /* FULLTEXT_SYM */
		S_FUNCTION_SYM(200), /* FUNCTION_SYM */
		S_GE(201), /* GE */
		S_GENERAL(202), /* GENERAL */
		S_GENERATED(203), /* GENERATED */
		S_GROUP_REPLICATION(204), /* GROUP_REPLICATION */
		S_GEOMETRYCOLLECTION_SYM(205), /* GEOMETRYCOLLECTION_SYM */
		S_GEOMETRY_SYM(206), /* GEOMETRY_SYM */
		S_GET_FORMAT(207), /* GET_FORMAT */
		S_GET_SYM(208), /* GET_SYM */
		S_GLOBAL_SYM(209), /* GLOBAL_SYM */
		S_GRANT(210), /* GRANT */
		S_GRANTS(211), /* GRANTS */
		S_GROUP_SYM(212), /* GROUP_SYM */
		S_GROUP_CONCAT_SYM(213), /* GROUP_CONCAT_SYM */
		S_GT_SYM(214), /* GT_SYM */
		S_HANDLER_SYM(215), /* HANDLER_SYM */
		S_HASH_SYM(216), /* HASH_SYM */
		S_HAVING(217), /* HAVING */
		S_HELP_SYM(218), /* HELP_SYM */
		S_HEX_NUM(219), /* HEX_NUM */
		S_HIGH_PRIORITY(220), /* HIGH_PRIORITY */
		S_HOST_SYM(221), /* HOST_SYM */
		S_HOSTS_SYM(222), /* HOSTS_SYM */
		S_HOUR_MICROSECOND_SYM(223), /* HOUR_MICROSECOND_SYM */
		S_HOUR_MINUTE_SYM(224), /* HOUR_MINUTE_SYM */
		S_HOUR_SECOND_SYM(225), /* HOUR_SECOND_SYM */
		S_HOUR_SYM(226), /* HOUR_SYM */
		S_IDENT(227), /* IDENT */
		S_IDENTIFIED_SYM(228), /* IDENTIFIED_SYM */
		S_IDENT_QUOTED(229), /* IDENT_QUOTED */
		S_IF(230), /* IF */
		S_IGNORE_SYM(231), /* IGNORE_SYM */
		S_IGNORE_SERVER_IDS_SYM(232), /* IGNORE_SERVER_IDS_SYM */
		S_IMPORT(233), /* IMPORT */
		S_INDEXES(234), /* INDEXES */
		S_INDEX_SYM(235), /* INDEX_SYM */
		S_INFILE_SYM(236), /* INFILE_SYM */
		S_INITIAL_SIZE_SYM(237), /* INITIAL_SIZE_SYM */
		S_INNER_SYM(238), /* INNER_SYM */
		S_INOUT_SYM(239), /* INOUT_SYM */
		S_INSENSITIVE_SYM(240), /* INSENSITIVE_SYM */
		S_INSERT_SYM(241), /* INSERT_SYM */
		S_INSERT_METHOD(242), /* INSERT_METHOD */
		S_INSTANCE_SYM(243), /* INSTANCE_SYM */
		S_INSTALL_SYM(244), /* INSTALL_SYM */
		S_INTERVAL_SYM(245), /* INTERVAL_SYM */
		S_INTO(246), /* INTO */
		S_INT_SYM(247), /* INT_SYM */
		S_INVOKER_SYM(248), /* INVOKER_SYM */
		S_IN_SYM(249), /* IN_SYM */
		S_IO_AFTER_GTIDS(250), /* IO_AFTER_GTIDS */
		S_IO_BEFORE_GTIDS(251), /* IO_BEFORE_GTIDS */
		S_IO_SYM(252), /* IO_SYM */
		S_IPC_SYM(253), /* IPC_SYM */
		S_IS(254), /* IS */
		S_ISOLATION(255), /* ISOLATION */
		S_ISSUER_SYM(256), /* ISSUER_SYM */
		S_ITERATE_SYM(257), /* ITERATE_SYM */
		S_JOIN_SYM(258), /* JOIN_SYM */
		S_JSON_SEPARATOR_SYM(259), /* JSON_SEPARATOR_SYM */
		S_JSON_SYM(260), /* JSON_SYM */
		S_KEYS(261), /* KEYS */
		S_KEY_BLOCK_SIZE(262), /* KEY_BLOCK_SIZE */
		S_KEY_SYM(263), /* KEY_SYM */
		S_KILL_SYM(264), /* KILL_SYM */
		S_LANGUAGE_SYM(265), /* LANGUAGE_SYM */
		S_LAST_SYM(266), /* LAST_SYM */
		S_LE(267), /* LE */
		S_LEADING(268), /* LEADING */
		S_LEAVES(269), /* LEAVES */
		S_LEAVE_SYM(270), /* LEAVE_SYM */
		S_LEFT(271), /* LEFT */
		S_LESS_SYM(272), /* LESS_SYM */
		S_LEVEL_SYM(273), /* LEVEL_SYM */
		S_LEX_HOSTNAME(274), /* LEX_HOSTNAME */
		S_LIKE(275), /* LIKE */
		S_LIMIT(276), /* LIMIT */
		S_LINEAR_SYM(277), /* LINEAR_SYM */
		S_LINES(278), /* LINES */
		S_LINESTRING_SYM(279), /* LINESTRING_SYM */
		S_LIST_SYM(280), /* LIST_SYM */
		S_LOAD(281), /* LOAD */
		S_LOCAL_SYM(282), /* LOCAL_SYM */
		S_OBSOLETE_TOKEN_538(283), /* OBSOLETE_TOKEN_538 */
		S_LOCKS_SYM(284), /* LOCKS_SYM */
		S_LOCK_SYM(285), /* LOCK_SYM */
		S_LOGFILE_SYM(286), /* LOGFILE_SYM */
		S_LOGS_SYM(287), /* LOGS_SYM */
		S_LONGBLOB_SYM(288), /* LONGBLOB_SYM */
		S_LONGTEXT_SYM(289), /* LONGTEXT_SYM */
		S_LONG_NUM(290), /* LONG_NUM */
		S_LONG_SYM(291), /* LONG_SYM */
		S_LOOP_SYM(292), /* LOOP_SYM */
		S_LOW_PRIORITY(293), /* LOW_PRIORITY */
		S_LT(294), /* LT */
		S_OBSOLETE_TOKEN_550(295), /* OBSOLETE_TOKEN_550 */
		S_OBSOLETE_TOKEN_551(296), /* OBSOLETE_TOKEN_551 */
		S_OBSOLETE_TOKEN_552(297), /* OBSOLETE_TOKEN_552 */
		S_OBSOLETE_TOKEN_553(298), /* OBSOLETE_TOKEN_553 */
		S_OBSOLETE_TOKEN_554(299), /* OBSOLETE_TOKEN_554 */
		S_OBSOLETE_TOKEN_555(300), /* OBSOLETE_TOKEN_555 */
		S_OBSOLETE_TOKEN_556(301), /* OBSOLETE_TOKEN_556 */
		S_OBSOLETE_TOKEN_557(302), /* OBSOLETE_TOKEN_557 */
		S_OBSOLETE_TOKEN_558(303), /* OBSOLETE_TOKEN_558 */
		S_OBSOLETE_TOKEN_559(304), /* OBSOLETE_TOKEN_559 */
		S_OBSOLETE_TOKEN_561(305), /* OBSOLETE_TOKEN_561 */
		S_OBSOLETE_TOKEN_562(306), /* OBSOLETE_TOKEN_562 */
		S_OBSOLETE_TOKEN_563(307), /* OBSOLETE_TOKEN_563 */
		S_OBSOLETE_TOKEN_564(308), /* OBSOLETE_TOKEN_564 */
		S_OBSOLETE_TOKEN_565(309), /* OBSOLETE_TOKEN_565 */
		S_OBSOLETE_TOKEN_566(310), /* OBSOLETE_TOKEN_566 */
		S_OBSOLETE_TOKEN_567(311), /* OBSOLETE_TOKEN_567 */
		S_OBSOLETE_TOKEN_568(312), /* OBSOLETE_TOKEN_568 */
		S_OBSOLETE_TOKEN_569(313), /* OBSOLETE_TOKEN_569 */
		S_OBSOLETE_TOKEN_570(314), /* OBSOLETE_TOKEN_570 */
		S_MASTER_SYM(315), /* MASTER_SYM */
		S_OBSOLETE_TOKEN_572(316), /* OBSOLETE_TOKEN_572 */
		S_OBSOLETE_TOKEN_573(317), /* OBSOLETE_TOKEN_573 */
		S_MATCH(318), /* MATCH */
		S_MAX_CONNECTIONS_PER_HOUR(319), /* MAX_CONNECTIONS_PER_HOUR */
		S_MAX_QUERIES_PER_HOUR(320), /* MAX_QUERIES_PER_HOUR */
		S_MAX_ROWS(321), /* MAX_ROWS */
		S_MAX_SIZE_SYM(322), /* MAX_SIZE_SYM */
		S_MAX_SYM(323), /* MAX_SYM */
		S_MAX_UPDATES_PER_HOUR(324), /* MAX_UPDATES_PER_HOUR */
		S_MAX_USER_CONNECTIONS_SYM(325), /* MAX_USER_CONNECTIONS_SYM */
		S_MAX_VALUE_SYM(326), /* MAX_VALUE_SYM */
		S_MEDIUMBLOB_SYM(327), /* MEDIUMBLOB_SYM */
		S_MEDIUMINT_SYM(328), /* MEDIUMINT_SYM */
		S_MEDIUMTEXT_SYM(329), /* MEDIUMTEXT_SYM */
		S_MEDIUM_SYM(330), /* MEDIUM_SYM */
		S_MEMORY_SYM(331), /* MEMORY_SYM */
		S_MERGE_SYM(332), /* MERGE_SYM */
		S_MESSAGE_TEXT_SYM(333), /* MESSAGE_TEXT_SYM */
		S_MICROSECOND_SYM(334), /* MICROSECOND_SYM */
		S_MIGRATE_SYM(335), /* MIGRATE_SYM */
		S_MINUTE_MICROSECOND_SYM(336), /* MINUTE_MICROSECOND_SYM */
		S_MINUTE_SECOND_SYM(337), /* MINUTE_SECOND_SYM */
		S_MINUTE_SYM(338), /* MINUTE_SYM */
		S_MIN_ROWS(339), /* MIN_ROWS */
		S_MIN_SYM(340), /* MIN_SYM */
		S_MODE_SYM(341), /* MODE_SYM */
		S_MODIFIES_SYM(342), /* MODIFIES_SYM */
		S_MODIFY_SYM(343), /* MODIFY_SYM */
		S_MOD_SYM(344), /* MOD_SYM */
		S_MONTH_SYM(345), /* MONTH_SYM */
		S_MULTILINESTRING_SYM(346), /* MULTILINESTRING_SYM */
		S_MULTIPOINT_SYM(347), /* MULTIPOINT_SYM */
		S_MULTIPOLYGON_SYM(348), /* MULTIPOLYGON_SYM */
		S_MUTEX_SYM(349), /* MUTEX_SYM */
		S_MYSQL_ERRNO_SYM(350), /* MYSQL_ERRNO_SYM */
		S_NAMES_SYM(351), /* NAMES_SYM */
		S_NAME_SYM(352), /* NAME_SYM */
		S_NATIONAL_SYM(353), /* NATIONAL_SYM */
		S_NATURAL(354), /* NATURAL */
		S_NCHAR_STRING(355), /* NCHAR_STRING */
		S_NCHAR_SYM(356), /* NCHAR_SYM */
		S_NDBCLUSTER_SYM(357), /* NDBCLUSTER_SYM */
		S_NE(358), /* NE */
		S_NEG(359), /* NEG */
		S_NEVER_SYM(360), /* NEVER_SYM */
		S_NEW_SYM(361), /* NEW_SYM */
		S_NEXT_SYM(362), /* NEXT_SYM */
		S_NODEGROUP_SYM(363), /* NODEGROUP_SYM */
		S_NONE_SYM(364), /* NONE_SYM */
		S_NOT2_SYM(365), /* NOT2_SYM */
		S_NOT_SYM(366), /* NOT_SYM */
		S_NOW_SYM(367), /* NOW_SYM */
		S_NO_SYM(368), /* NO_SYM */
		S_NO_WAIT_SYM(369), /* NO_WAIT_SYM */
		S_NO_WRITE_TO_BINLOG(370), /* NO_WRITE_TO_BINLOG */
		S_NULL_SYM(371), /* NULL_SYM */
		S_NUM(372), /* NUM */
		S_NUMBER_SYM(373), /* NUMBER_SYM */
		S_NUMERIC_SYM(374), /* NUMERIC_SYM */
		S_NVARCHAR_SYM(375), /* NVARCHAR_SYM */
		S_OFFSET_SYM(376), /* OFFSET_SYM */
		S_ON_SYM(377), /* ON_SYM */
		S_ONE_SYM(378), /* ONE_SYM */
		S_ONLY_SYM(379), /* ONLY_SYM */
		S_OPEN_SYM(380), /* OPEN_SYM */
		S_OPTIMIZE(381), /* OPTIMIZE */
		S_OPTIMIZER_COSTS_SYM(382), /* OPTIMIZER_COSTS_SYM */
		S_OPTIONS_SYM(383), /* OPTIONS_SYM */
		S_OPTION(384), /* OPTION */
		S_OPTIONALLY(385), /* OPTIONALLY */
		S_OR2_SYM(386), /* OR2_SYM */
		S_ORDER_SYM(387), /* ORDER_SYM */
		S_OR_OR_SYM(388), /* OR_OR_SYM */
		S_OR_SYM(389), /* OR_SYM */
		S_OUTER_SYM(390), /* OUTER_SYM */
		S_OUTFILE(391), /* OUTFILE */
		S_OUT_SYM(392), /* OUT_SYM */
		S_OWNER_SYM(393), /* OWNER_SYM */
		S_PACK_KEYS_SYM(394), /* PACK_KEYS_SYM */
		S_PAGE_SYM(395), /* PAGE_SYM */
		S_PARAM_MARKER(396), /* PARAM_MARKER */
		S_PARSER_SYM(397), /* PARSER_SYM */
		S_OBSOLETE_TOKEN_654(398), /* OBSOLETE_TOKEN_654 */
		S_PARTIAL(399), /* PARTIAL */
		S_PARTITION_SYM(400), /* PARTITION_SYM */
		S_PARTITIONS_SYM(401), /* PARTITIONS_SYM */
		S_PARTITIONING_SYM(402), /* PARTITIONING_SYM */
		S_PASSWORD(403), /* PASSWORD */
		S_PHASE_SYM(404), /* PHASE_SYM */
		S_PLUGIN_DIR_SYM(405), /* PLUGIN_DIR_SYM */
		S_PLUGIN_SYM(406), /* PLUGIN_SYM */
		S_PLUGINS_SYM(407), /* PLUGINS_SYM */
		S_POINT_SYM(408), /* POINT_SYM */
		S_POLYGON_SYM(409), /* POLYGON_SYM */
		S_PORT_SYM(410), /* PORT_SYM */
		S_POSITION_SYM(411), /* POSITION_SYM */
		S_PRECEDES_SYM(412), /* PRECEDES_SYM */
		S_PRECISION(413), /* PRECISION */
		S_PREPARE_SYM(414), /* PREPARE_SYM */
		S_PRESERVE_SYM(415), /* PRESERVE_SYM */
		S_PREV_SYM(416), /* PREV_SYM */
		S_PRIMARY_SYM(417), /* PRIMARY_SYM */
		S_PRIVILEGES(418), /* PRIVILEGES */
		S_PROCEDURE_SYM(419), /* PROCEDURE_SYM */
		S_PROCESS(420), /* PROCESS */
		S_PROCESSLIST_SYM(421), /* PROCESSLIST_SYM */
		S_PROFILE_SYM(422), /* PROFILE_SYM */
		S_PROFILES_SYM(423), /* PROFILES_SYM */
		S_PROXY_SYM(424), /* PROXY_SYM */
		S_PURGE(425), /* PURGE */
		S_QUARTER_SYM(426), /* QUARTER_SYM */
		S_QUERY_SYM(427), /* QUERY_SYM */
		S_QUICK(428), /* QUICK */
		S_RANGE_SYM(429), /* RANGE_SYM */
		S_READS_SYM(430), /* READS_SYM */
		S_READ_ONLY_SYM(431), /* READ_ONLY_SYM */
		S_READ_SYM(432), /* READ_SYM */
		S_READ_WRITE_SYM(433), /* READ_WRITE_SYM */
		S_REAL_SYM(434), /* REAL_SYM */
		S_REBUILD_SYM(435), /* REBUILD_SYM */
		S_RECOVER_SYM(436), /* RECOVER_SYM */
		S_OBSOLETE_TOKEN_693(437), /* OBSOLETE_TOKEN_693 */
		S_REDO_BUFFER_SIZE_SYM(438), /* REDO_BUFFER_SIZE_SYM */
		S_REDUNDANT_SYM(439), /* REDUNDANT_SYM */
		S_REFERENCES(440), /* REFERENCES */
		S_REGEXP(441), /* REGEXP */
		S_RELAY(442), /* RELAY */
		S_RELAYLOG_SYM(443), /* RELAYLOG_SYM */
		S_RELAY_LOG_FILE_SYM(444), /* RELAY_LOG_FILE_SYM */
		S_RELAY_LOG_POS_SYM(445), /* RELAY_LOG_POS_SYM */
		S_RELAY_THREAD(446), /* RELAY_THREAD */
		S_RELEASE_SYM(447), /* RELEASE_SYM */
		S_RELOAD(448), /* RELOAD */
		S_REMOVE_SYM(449), /* REMOVE_SYM */
		S_RENAME(450), /* RENAME */
		S_REORGANIZE_SYM(451), /* REORGANIZE_SYM */
		S_REPAIR(452), /* REPAIR */
		S_REPEATABLE_SYM(453), /* REPEATABLE_SYM */
		S_REPEAT_SYM(454), /* REPEAT_SYM */
		S_REPLACE_SYM(455), /* REPLACE_SYM */
		S_REPLICATION(456), /* REPLICATION */
		S_REPLICATE_DO_DB(457), /* REPLICATE_DO_DB */
		S_REPLICATE_IGNORE_DB(458), /* REPLICATE_IGNORE_DB */
		S_REPLICATE_DO_TABLE(459), /* REPLICATE_DO_TABLE */
		S_REPLICATE_IGNORE_TABLE(460), /* REPLICATE_IGNORE_TABLE */
		S_REPLICATE_WILD_DO_TABLE(461), /* REPLICATE_WILD_DO_TABLE */
		S_REPLICATE_WILD_IGNORE_TABLE(462), /* REPLICATE_WILD_IGNORE_TABLE */
		S_REPLICATE_REWRITE_DB(463), /* REPLICATE_REWRITE_DB */
		S_REQUIRE_SYM(464), /* REQUIRE_SYM */
		S_RESET_SYM(465), /* RESET_SYM */
		S_RESIGNAL_SYM(466), /* RESIGNAL_SYM */
		S_RESOURCES(467), /* RESOURCES */
		S_RESTORE_SYM(468), /* RESTORE_SYM */
		S_RESTRICT(469), /* RESTRICT */
		S_RESUME_SYM(470), /* RESUME_SYM */
		S_RETURNED_SQLSTATE_SYM(471), /* RETURNED_SQLSTATE_SYM */
		S_RETURNS_SYM(472), /* RETURNS_SYM */
		S_RETURN_SYM(473), /* RETURN_SYM */
		S_REVERSE_SYM(474), /* REVERSE_SYM */
		S_REVOKE(475), /* REVOKE */
		S_RIGHT(476), /* RIGHT */
		S_ROLLBACK_SYM(477), /* ROLLBACK_SYM */
		S_ROLLUP_SYM(478), /* ROLLUP_SYM */
		S_ROTATE_SYM(479), /* ROTATE_SYM */
		S_ROUTINE_SYM(480), /* ROUTINE_SYM */
		S_ROWS_SYM(481), /* ROWS_SYM */
		S_ROW_FORMAT_SYM(482), /* ROW_FORMAT_SYM */
		S_ROW_SYM(483), /* ROW_SYM */
		S_ROW_COUNT_SYM(484), /* ROW_COUNT_SYM */
		S_RTREE_SYM(485), /* RTREE_SYM */
		S_SAVEPOINT_SYM(486), /* SAVEPOINT_SYM */
		S_SCHEDULE_SYM(487), /* SCHEDULE_SYM */
		S_SCHEMA_NAME_SYM(488), /* SCHEMA_NAME_SYM */
		S_SECOND_MICROSECOND_SYM(489), /* SECOND_MICROSECOND_SYM */
		S_SECOND_SYM(490), /* SECOND_SYM */
		S_SECURITY_SYM(491), /* SECURITY_SYM */
		S_SELECT_SYM(492), /* SELECT_SYM */
		S_SENSITIVE_SYM(493), /* SENSITIVE_SYM */
		S_SEPARATOR_SYM(494), /* SEPARATOR_SYM */
		S_SERIALIZABLE_SYM(495), /* SERIALIZABLE_SYM */
		S_SERIAL_SYM(496), /* SERIAL_SYM */
		S_SESSION_SYM(497), /* SESSION_SYM */
		S_SERVER_SYM(498), /* SERVER_SYM */
		S_OBSOLETE_TOKEN_755(499), /* OBSOLETE_TOKEN_755 */
		S_SET_SYM(500), /* SET_SYM */
		S_SET_VAR(501), /* SET_VAR */
		S_SHARE_SYM(502), /* SHARE_SYM */
		S_SHIFT_LEFT(503), /* SHIFT_LEFT */
		S_SHIFT_RIGHT(504), /* SHIFT_RIGHT */
		S_SHOW(505), /* SHOW */
		S_SHUTDOWN(506), /* SHUTDOWN */
		S_SIGNAL_SYM(507), /* SIGNAL_SYM */
		S_SIGNED_SYM(508), /* SIGNED_SYM */
		S_SIMPLE_SYM(509), /* SIMPLE_SYM */
		S_SLAVE(510), /* SLAVE */
		S_SLOW(511), /* SLOW */
		S_SMALLINT_SYM(512), /* SMALLINT_SYM */
		S_SNAPSHOT_SYM(513), /* SNAPSHOT_SYM */
		S_SOCKET_SYM(514), /* SOCKET_SYM */
		S_SONAME_SYM(515), /* SONAME_SYM */
		S_SOUNDS_SYM(516), /* SOUNDS_SYM */
		S_SOURCE_SYM(517), /* SOURCE_SYM */
		S_SPATIAL_SYM(518), /* SPATIAL_SYM */
		S_SPECIFIC_SYM(519), /* SPECIFIC_SYM */
		S_SQLEXCEPTION_SYM(520), /* SQLEXCEPTION_SYM */
		S_SQLSTATE_SYM(521), /* SQLSTATE_SYM */
		S_SQLWARNING_SYM(522), /* SQLWARNING_SYM */
		S_SQL_AFTER_GTIDS(523), /* SQL_AFTER_GTIDS */
		S_SQL_AFTER_MTS_GAPS(524), /* SQL_AFTER_MTS_GAPS */
		S_SQL_BEFORE_GTIDS(525), /* SQL_BEFORE_GTIDS */
		S_SQL_BIG_RESULT(526), /* SQL_BIG_RESULT */
		S_SQL_BUFFER_RESULT(527), /* SQL_BUFFER_RESULT */
		S_OBSOLETE_TOKEN_784(528), /* OBSOLETE_TOKEN_784 */
		S_SQL_CALC_FOUND_ROWS(529), /* SQL_CALC_FOUND_ROWS */
		S_SQL_NO_CACHE_SYM(530), /* SQL_NO_CACHE_SYM */
		S_SQL_SMALL_RESULT(531), /* SQL_SMALL_RESULT */
		S_SQL_SYM(532), /* SQL_SYM */
		S_SQL_THREAD(533), /* SQL_THREAD */
		S_SSL_SYM(534), /* SSL_SYM */
		S_STACKED_SYM(535), /* STACKED_SYM */
		S_STARTING(536), /* STARTING */
		S_STARTS_SYM(537), /* STARTS_SYM */
		S_START_SYM(538), /* START_SYM */
		S_STATS_AUTO_RECALC_SYM(539), /* STATS_AUTO_RECALC_SYM */
		S_STATS_PERSISTENT_SYM(540), /* STATS_PERSISTENT_SYM */
		S_STATS_SAMPLE_PAGES_SYM(541), /* STATS_SAMPLE_PAGES_SYM */
		S_STATUS_SYM(542), /* STATUS_SYM */
		S_STDDEV_SAMP_SYM(543), /* STDDEV_SAMP_SYM */
		S_STD_SYM(544), /* STD_SYM */
		S_STOP_SYM(545), /* STOP_SYM */
		S_STORAGE_SYM(546), /* STORAGE_SYM */
		S_STORED_SYM(547), /* STORED_SYM */
		S_STRAIGHT_JOIN(548), /* STRAIGHT_JOIN */
		S_STRING_SYM(549), /* STRING_SYM */
		S_SUBCLASS_ORIGIN_SYM(550), /* SUBCLASS_ORIGIN_SYM */
		S_SUBDATE_SYM(551), /* SUBDATE_SYM */
		S_SUBJECT_SYM(552), /* SUBJECT_SYM */
		S_SUBPARTITIONS_SYM(553), /* SUBPARTITIONS_SYM */
		S_SUBPARTITION_SYM(554), /* SUBPARTITION_SYM */
		S_SUBSTRING(555), /* SUBSTRING */
		S_SUM_SYM(556), /* SUM_SYM */
		S_SUPER_SYM(557), /* SUPER_SYM */
		S_SUSPEND_SYM(558), /* SUSPEND_SYM */
		S_SWAPS_SYM(559), /* SWAPS_SYM */
		S_SWITCHES_SYM(560), /* SWITCHES_SYM */
		S_SYSDATE(561), /* SYSDATE */
		S_TABLES(562), /* TABLES */
		S_TABLESPACE_SYM(563), /* TABLESPACE_SYM */
		S_OBSOLETE_TOKEN_820(564), /* OBSOLETE_TOKEN_820 */
		S_TABLE_SYM(565), /* TABLE_SYM */
		S_TABLE_CHECKSUM_SYM(566), /* TABLE_CHECKSUM_SYM */
		S_TABLE_NAME_SYM(567), /* TABLE_NAME_SYM */
		S_TEMPORARY(568), /* TEMPORARY */
		S_TEMPTABLE_SYM(569), /* TEMPTABLE_SYM */
		S_TERMINATED(570), /* TERMINATED */
		S_TEXT_STRING(571), /* TEXT_STRING */
		S_TEXT_SYM(572), /* TEXT_SYM */
		S_THAN_SYM(573), /* THAN_SYM */
		S_THEN_SYM(574), /* THEN_SYM */
		S_TIMESTAMP_SYM(575), /* TIMESTAMP_SYM */
		S_TIMESTAMP_ADD(576), /* TIMESTAMP_ADD */
		S_TIMESTAMP_DIFF(577), /* TIMESTAMP_DIFF */
		S_TIME_SYM(578), /* TIME_SYM */
		S_TINYBLOB_SYM(579), /* TINYBLOB_SYM */
		S_TINYINT_SYM(580), /* TINYINT_SYM */
		S_TINYTEXT_SYN(581), /* TINYTEXT_SYN */
		S_TO_SYM(582), /* TO_SYM */
		S_TRAILING(583), /* TRAILING */
		S_TRANSACTION_SYM(584), /* TRANSACTION_SYM */
		S_TRIGGERS_SYM(585), /* TRIGGERS_SYM */
		S_TRIGGER_SYM(586), /* TRIGGER_SYM */
		S_TRIM(587), /* TRIM */
		S_TRUE_SYM(588), /* TRUE_SYM */
		S_TRUNCATE_SYM(589), /* TRUNCATE_SYM */
		S_TYPES_SYM(590), /* TYPES_SYM */
		S_TYPE_SYM(591), /* TYPE_SYM */
		S_OBSOLETE_TOKEN_848(592), /* OBSOLETE_TOKEN_848 */
		S_ULONGLONG_NUM(593), /* ULONGLONG_NUM */
		S_UNCOMMITTED_SYM(594), /* UNCOMMITTED_SYM */
		S_UNDEFINED_SYM(595), /* UNDEFINED_SYM */
		S_UNDERSCORE_CHARSET(596), /* UNDERSCORE_CHARSET */
		S_UNDOFILE_SYM(597), /* UNDOFILE_SYM */
		S_UNDO_BUFFER_SIZE_SYM(598), /* UNDO_BUFFER_SIZE_SYM */
		S_UNDO_SYM(599), /* UNDO_SYM */
		S_UNICODE_SYM(600), /* UNICODE_SYM */
		S_UNINSTALL_SYM(601), /* UNINSTALL_SYM */
		S_UNION_SYM(602), /* UNION_SYM */
		S_UNIQUE_SYM(603), /* UNIQUE_SYM */
		S_UNKNOWN_SYM(604), /* UNKNOWN_SYM */
		S_UNLOCK_SYM(605), /* UNLOCK_SYM */
		S_UNSIGNED_SYM(606), /* UNSIGNED_SYM */
		S_UNTIL_SYM(607), /* UNTIL_SYM */
		S_UPDATE_SYM(608), /* UPDATE_SYM */
		S_UPGRADE_SYM(609), /* UPGRADE_SYM */
		S_USAGE(610), /* USAGE */
		S_USER(611), /* USER */
		S_USE_FRM(612), /* USE_FRM */
		S_USE_SYM(613), /* USE_SYM */
		S_USING(614), /* USING */
		S_UTC_DATE_SYM(615), /* UTC_DATE_SYM */
		S_UTC_TIMESTAMP_SYM(616), /* UTC_TIMESTAMP_SYM */
		S_UTC_TIME_SYM(617), /* UTC_TIME_SYM */
		S_VALIDATION_SYM(618), /* VALIDATION_SYM */
		S_VALUES(619), /* VALUES */
		S_VALUE_SYM(620), /* VALUE_SYM */
		S_VARBINARY_SYM(621), /* VARBINARY_SYM */
		S_VARCHAR_SYM(622), /* VARCHAR_SYM */
		S_VARIABLES(623), /* VARIABLES */
		S_VARIANCE_SYM(624), /* VARIANCE_SYM */
		S_VARYING(625), /* VARYING */
		S_VAR_SAMP_SYM(626), /* VAR_SAMP_SYM */
		S_VIEW_SYM(627), /* VIEW_SYM */
		S_VIRTUAL_SYM(628), /* VIRTUAL_SYM */
		S_WAIT_SYM(629), /* WAIT_SYM */
		S_WARNINGS(630), /* WARNINGS */
		S_WEEK_SYM(631), /* WEEK_SYM */
		S_WEIGHT_STRING_SYM(632), /* WEIGHT_STRING_SYM */
		S_WHEN_SYM(633), /* WHEN_SYM */
		S_WHERE(634), /* WHERE */
		S_WHILE_SYM(635), /* WHILE_SYM */
		S_WITH(636), /* WITH */
		S_OBSOLETE_TOKEN_893(637), /* OBSOLETE_TOKEN_893 */
		S_WITH_ROLLUP_SYM(638), /* WITH_ROLLUP_SYM */
		S_WITHOUT_SYM(639), /* WITHOUT_SYM */
		S_WORK_SYM(640), /* WORK_SYM */
		S_WRAPPER_SYM(641), /* WRAPPER_SYM */
		S_WRITE_SYM(642), /* WRITE_SYM */
		S_X509_SYM(643), /* X509_SYM */
		S_XA_SYM(644), /* XA_SYM */
		S_XID_SYM(645), /* XID_SYM */
		S_XML_SYM(646), /* XML_SYM */
		S_XOR(647), /* XOR */
		S_YEAR_MONTH_SYM(648), /* YEAR_MONTH_SYM */
		S_YEAR_SYM(649), /* YEAR_SYM */
		S_ZEROFILL_SYM(650), /* ZEROFILL_SYM */
		S_JSON_UNQUOTED_SEPARATOR_SYM(651), /* JSON_UNQUOTED_SEPARATOR_SYM */
		S_PERSIST_SYM(652), /* PERSIST_SYM */
		S_ROLE_SYM(653), /* ROLE_SYM */
		S_ADMIN_SYM(654), /* ADMIN_SYM */
		S_INVISIBLE_SYM(655), /* INVISIBLE_SYM */
		S_VISIBLE_SYM(656), /* VISIBLE_SYM */
		S_EXCEPT_SYM(657), /* EXCEPT_SYM */
		S_COMPONENT_SYM(658), /* COMPONENT_SYM */
		S_RECURSIVE_SYM(659), /* RECURSIVE_SYM */
		S_GRAMMAR_SELECTOR_EXPR(660), /* GRAMMAR_SELECTOR_EXPR */
		S_GRAMMAR_SELECTOR_GCOL(661), /* GRAMMAR_SELECTOR_GCOL */
		S_GRAMMAR_SELECTOR_PART(662), /* GRAMMAR_SELECTOR_PART */
		S_GRAMMAR_SELECTOR_CTE(663), /* GRAMMAR_SELECTOR_CTE */
		S_JSON_OBJECTAGG(664), /* JSON_OBJECTAGG */
		S_JSON_ARRAYAGG(665), /* JSON_ARRAYAGG */
		S_OF_SYM(666), /* OF_SYM */
		S_SKIP_SYM(667), /* SKIP_SYM */
		S_LOCKED_SYM(668), /* LOCKED_SYM */
		S_NOWAIT_SYM(669), /* NOWAIT_SYM */
		S_GROUPING_SYM(670), /* GROUPING_SYM */
		S_PERSIST_ONLY_SYM(671), /* PERSIST_ONLY_SYM */
		S_HISTOGRAM_SYM(672), /* HISTOGRAM_SYM */
		S_BUCKETS_SYM(673), /* BUCKETS_SYM */
		S_OBSOLETE_TOKEN_930(674), /* OBSOLETE_TOKEN_930 */
		S_CLONE_SYM(675), /* CLONE_SYM */
		S_CUME_DIST_SYM(676), /* CUME_DIST_SYM */
		S_DENSE_RANK_SYM(677), /* DENSE_RANK_SYM */
		S_EXCLUDE_SYM(678), /* EXCLUDE_SYM */
		S_FIRST_VALUE_SYM(679), /* FIRST_VALUE_SYM */
		S_FOLLOWING_SYM(680), /* FOLLOWING_SYM */
		S_GROUPS_SYM(681), /* GROUPS_SYM */
		S_LAG_SYM(682), /* LAG_SYM */
		S_LAST_VALUE_SYM(683), /* LAST_VALUE_SYM */
		S_LEAD_SYM(684), /* LEAD_SYM */
		S_NTH_VALUE_SYM(685), /* NTH_VALUE_SYM */
		S_NTILE_SYM(686), /* NTILE_SYM */
		S_NULLS_SYM(687), /* NULLS_SYM */
		S_OTHERS_SYM(688), /* OTHERS_SYM */
		S_OVER_SYM(689), /* OVER_SYM */
		S_PERCENT_RANK_SYM(690), /* PERCENT_RANK_SYM */
		S_PRECEDING_SYM(691), /* PRECEDING_SYM */
		S_RANK_SYM(692), /* RANK_SYM */
		S_RESPECT_SYM(693), /* RESPECT_SYM */
		S_ROW_NUMBER_SYM(694), /* ROW_NUMBER_SYM */
		S_TIES_SYM(695), /* TIES_SYM */
		S_UNBOUNDED_SYM(696), /* UNBOUNDED_SYM */
		S_WINDOW_SYM(697), /* WINDOW_SYM */
		S_EMPTY_SYM(698), /* EMPTY_SYM */
		S_JSON_TABLE_SYM(699), /* JSON_TABLE_SYM */
		S_NESTED_SYM(700), /* NESTED_SYM */
		S_ORDINALITY_SYM(701), /* ORDINALITY_SYM */
		S_PATH_SYM(702), /* PATH_SYM */
		S_HISTORY_SYM(703), /* HISTORY_SYM */
		S_REUSE_SYM(704), /* REUSE_SYM */
		S_SRID_SYM(705), /* SRID_SYM */
		S_THREAD_PRIORITY_SYM(706), /* THREAD_PRIORITY_SYM */
		S_RESOURCE_SYM(707), /* RESOURCE_SYM */
		S_SYSTEM_SYM(708), /* SYSTEM_SYM */
		S_VCPU_SYM(709), /* VCPU_SYM */
		S_OBSOLETE_TOKEN_966(710), /* OBSOLETE_TOKEN_966 */
		S_OBSOLETE_TOKEN_967(711), /* OBSOLETE_TOKEN_967 */
		S_RESTART_SYM(712), /* RESTART_SYM */
		S_DEFINITION_SYM(713), /* DEFINITION_SYM */
		S_DESCRIPTION_SYM(714), /* DESCRIPTION_SYM */
		S_ORGANIZATION_SYM(715), /* ORGANIZATION_SYM */
		S_REFERENCE_SYM(716), /* REFERENCE_SYM */
		S_ACTIVE_SYM(717), /* ACTIVE_SYM */
		S_INACTIVE_SYM(718), /* INACTIVE_SYM */
		S_LATERAL_SYM(719), /* LATERAL_SYM */
		S_ARRAY_SYM(720), /* ARRAY_SYM */
		S_MEMBER_SYM(721), /* MEMBER_SYM */
		S_OPTIONAL_SYM(722), /* OPTIONAL_SYM */
		S_SECONDARY_SYM(723), /* SECONDARY_SYM */
		S_SECONDARY_ENGINE_SYM(724), /* SECONDARY_ENGINE_SYM */
		S_SECONDARY_LOAD_SYM(725), /* SECONDARY_LOAD_SYM */
		S_SECONDARY_UNLOAD_SYM(726), /* SECONDARY_UNLOAD_SYM */
		S_RETAIN_SYM(727), /* RETAIN_SYM */
		S_OLD_SYM(728), /* OLD_SYM */
		S_ENFORCED_SYM(729), /* ENFORCED_SYM */
		S_OJ_SYM(730), /* OJ_SYM */
		S_NETWORK_NAMESPACE_SYM(731), /* NETWORK_NAMESPACE_SYM */
		S_RANDOM_SYM(732), /* RANDOM_SYM */
		S_OBSOLETE_TOKEN_989(733), /* OBSOLETE_TOKEN_989 */
		S_OBSOLETE_TOKEN_990(734), /* OBSOLETE_TOKEN_990 */
		S_PRIVILEGE_CHECKS_USER_SYM(735), /* PRIVILEGE_CHECKS_USER_SYM */
		S_OBSOLETE_TOKEN_992(736), /* OBSOLETE_TOKEN_992 */
		S_REQUIRE_ROW_FORMAT_SYM(737), /* REQUIRE_ROW_FORMAT_SYM */
		S_PASSWORD_LOCK_TIME_SYM(738), /* PASSWORD_LOCK_TIME_SYM */
		S_FAILED_LOGIN_ATTEMPTS_SYM(739), /* FAILED_LOGIN_ATTEMPTS_SYM */
		S_REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYM(740), /* REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYM */
		S_STREAM_SYM(741), /* STREAM_SYM */
		S_OFF_SYM(742), /* OFF_SYM */
		S_RETURNING_SYM(743), /* RETURNING_SYM */
		S_JSON_VALUE_SYM(744), /* JSON_VALUE_SYM */
		S_TLS_SYM(745), /* TLS_SYM */
		S_ATTRIBUTE_SYM(746), /* ATTRIBUTE_SYM */
		S_ENGINE_ATTRIBUTE_SYM(747), /* ENGINE_ATTRIBUTE_SYM */
		S_SECONDARY_ENGINE_ATTRIBUTE_SYM(748), /* SECONDARY_ENGINE_ATTRIBUTE_SYM */
		S_SOURCE_CONNECTION_AUTO_FAILOVER_SYM(749), /* SOURCE_CONNECTION_AUTO_FAILOVER_SYM */
		S_ZONE_SYM(750), /* ZONE_SYM */
		S_GRAMMAR_SELECTOR_DERIVED_EXPR(751), /* GRAMMAR_SELECTOR_DERIVED_EXPR */
		S_REPLICA_SYM(752), /* REPLICA_SYM */
		S_REPLICAS_SYM(753), /* REPLICAS_SYM */
		S_ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYM(754), /* ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYM */
		S_GET_SOURCE_PUBLIC_KEY_SYM(755), /* GET_SOURCE_PUBLIC_KEY_SYM */
		S_SOURCE_AUTO_POSITION_SYM(756), /* SOURCE_AUTO_POSITION_SYM */
		S_SOURCE_BIND_SYM(757), /* SOURCE_BIND_SYM */
		S_SOURCE_COMPRESSION_ALGORITHM_SYM(758), /* SOURCE_COMPRESSION_ALGORITHM_SYM */
		S_SOURCE_CONNECT_RETRY_SYM(759), /* SOURCE_CONNECT_RETRY_SYM */
		S_SOURCE_DELAY_SYM(760), /* SOURCE_DELAY_SYM */
		S_SOURCE_HEARTBEAT_PERIOD_SYM(761), /* SOURCE_HEARTBEAT_PERIOD_SYM */
		S_SOURCE_HOST_SYM(762), /* SOURCE_HOST_SYM */
		S_SOURCE_LOG_FILE_SYM(763), /* SOURCE_LOG_FILE_SYM */
		S_SOURCE_LOG_POS_SYM(764), /* SOURCE_LOG_POS_SYM */
		S_SOURCE_PASSWORD_SYM(765), /* SOURCE_PASSWORD_SYM */
		S_SOURCE_PORT_SYM(766), /* SOURCE_PORT_SYM */
		S_SOURCE_PUBLIC_KEY_PATH_SYM(767), /* SOURCE_PUBLIC_KEY_PATH_SYM */
		S_SOURCE_RETRY_COUNT_SYM(768), /* SOURCE_RETRY_COUNT_SYM */
		S_SOURCE_SSL_SYM(769), /* SOURCE_SSL_SYM */
		S_SOURCE_SSL_CA_SYM(770), /* SOURCE_SSL_CA_SYM */
		S_SOURCE_SSL_CAPATH_SYM(771), /* SOURCE_SSL_CAPATH_SYM */
		S_SOURCE_SSL_CERT_SYM(772), /* SOURCE_SSL_CERT_SYM */
		S_SOURCE_SSL_CIPHER_SYM(773), /* SOURCE_SSL_CIPHER_SYM */
		S_SOURCE_SSL_CRL_SYM(774), /* SOURCE_SSL_CRL_SYM */
		S_SOURCE_SSL_CRLPATH_SYM(775), /* SOURCE_SSL_CRLPATH_SYM */
		S_SOURCE_SSL_KEY_SYM(776), /* SOURCE_SSL_KEY_SYM */
		S_SOURCE_SSL_VERIFY_SERVER_CERT_SYM(777), /* SOURCE_SSL_VERIFY_SERVER_CERT_SYM */
		S_SOURCE_TLS_CIPHERSUITES_SYM(778), /* SOURCE_TLS_CIPHERSUITES_SYM */
		S_SOURCE_TLS_VERSION_SYM(779), /* SOURCE_TLS_VERSION_SYM */
		S_SOURCE_USER_SYM(780), /* SOURCE_USER_SYM */
		S_SOURCE_ZSTD_COMPRESSION_LEVEL_SYM(781), /* SOURCE_ZSTD_COMPRESSION_LEVEL_SYM */
		S_ST_COLLECT_SYM(782), /* ST_COLLECT_SYM */
		S_KEYRING_SYM(783), /* KEYRING_SYM */
		S_AUTHENTICATION_SYM(784), /* AUTHENTICATION_SYM */
		S_FACTOR_SYM(785), /* FACTOR_SYM */
		S_FINISH_SYM(786), /* FINISH_SYM */
		S_INITIATE_SYM(787), /* INITIATE_SYM */
		S_REGISTRATION_SYM(788), /* REGISTRATION_SYM */
		S_UNREGISTER_SYM(789), /* UNREGISTER_SYM */
		S_INITIAL_SYM(790), /* INITIAL_SYM */
		S_CHALLENGE_RESPONSE_SYM(791), /* CHALLENGE_RESPONSE_SYM */
		S_GTID_ONLY_SYM(792), /* GTID_ONLY_SYM */
		S_INTERSECT_SYM(793), /* INTERSECT_SYM */
		S_BULK_SYM(794), /* BULK_SYM */
		S_URL_SYM(795), /* URL_SYM */
		S_GENERATE_SYM(796), /* GENERATE_SYM */
		S_DOLLAR_QUOTED_STRING_SYM(797), /* DOLLAR_QUOTED_STRING_SYM */
		S_PARSE_TREE_SYM(798), /* PARSE_TREE_SYM */
		S_LOG_SYM(799), /* LOG_SYM */
		S_GTIDS_SYM(800), /* GTIDS_SYM */
		S_PARALLEL_SYM(801), /* PARALLEL_SYM */
		S_S3_SYM(802), /* S3_SYM */
		S_QUALIFY_SYM(803), /* QUALIFY_SYM */
		S_AUTO_SYM(804), /* AUTO_SYM */
		S_MANUAL_SYM(805), /* MANUAL_SYM */
		S_BERNOULLI_SYM(806), /* BERNOULLI_SYM */
		S_TABLESAMPLE_SYM(807), /* TABLESAMPLE_SYM */
		S_KEYWORD_USED_AS_IDENT(808), /* KEYWORD_USED_AS_IDENT */
		S_KEYWORD_USED_AS_KEYWORD(809), /* KEYWORD_USED_AS_KEYWORD */
		S_CONDITIONLESS_JOIN(810), /* CONDITIONLESS_JOIN */
		S_811_(811), /* '|' */
		S_812_(812), /* '&' */
		S_813_(813), /* '-' */
		S_814_(814), /* '+' */
		S_815_(815), /* '*' */
		S_816_(816), /* '/' */
		S_817_(817), /* '%' */
		S_818_(818), /* '^' */
		S_819_(819), /* '~' */
		S_PREFER_PARENTHESES(820), /* PREFER_PARENTHESES */
		S_821_(821), /* '(' */
		S_822_(822), /* ')' */
		S_EMPTY_FROM_CLAUSE(823), /* EMPTY_FROM_CLAUSE */
		S_824_(824), /* ';' */
		S_825_(825), /* '@' */
		S_826_(826), /* ',' */
		S_827_(827), /* '.' */
		S_828_(828), /* ':' */
		S_829_(829), /* '!' */
		S_830_(830), /* '{' */
		S_831_(831), /* '}' */
		S_YYACCEPT(832), /* $accept */
		S_start_entry(833), /* start_entry */
		S_sql_statement(834), /* sql_statement */
		S_835_1(835), /* $@1 */
		S_opt_end_of_input(836), /* opt_end_of_input */
		S_simple_statement_or_begin(837), /* simple_statement_or_begin */
		S_simple_statement(838), /* simple_statement */
		S_deallocate(839), /* deallocate */
		S_deallocate_or_drop(840), /* deallocate_or_drop */
		S_prepare(841), /* prepare */
		S_prepare_src(842), /* prepare_src */
		S_execute(843), /* execute */
		S_844_2(844), /* $@2 */
		S_execute_using(845), /* execute_using */
		S_execute_var_list(846), /* execute_var_list */
		S_execute_var_ident(847), /* execute_var_ident */
		S_help(848), /* help */
		S_849_3(849), /* $@3 */
		S_change_replication_stmt(850), /* change_replication_stmt */
		S_851_4(851), /* $@4 */
		S_852_5(852), /* $@5 */
		S_filter_defs(853), /* filter_defs */
		S_filter_def(854), /* filter_def */
		S_opt_filter_db_list(855), /* opt_filter_db_list */
		S_filter_db_list(856), /* filter_db_list */
		S_filter_db_ident(857), /* filter_db_ident */
		S_opt_filter_db_pair_list(858), /* opt_filter_db_pair_list */
		S_filter_db_pair_list(859), /* filter_db_pair_list */
		S_opt_filter_table_list(860), /* opt_filter_table_list */
		S_filter_table_list(861), /* filter_table_list */
		S_filter_table_ident(862), /* filter_table_ident */
		S_opt_filter_string_list(863), /* opt_filter_string_list */
		S_filter_string_list(864), /* filter_string_list */
		S_filter_string(865), /* filter_string */
		S_source_defs(866), /* source_defs */
		S_source_def(867), /* source_def */
		S_ignore_server_id_list(868), /* ignore_server_id_list */
		S_ignore_server_id(869), /* ignore_server_id */
		S_privilege_check_def(870), /* privilege_check_def */
		S_table_primary_key_check_def(871), /* table_primary_key_check_def */
		S_assign_gtids_to_anonymous_transactions_def(872), /* assign_gtids_to_anonymous_transactions_def */
		S_source_tls_ciphersuites_def(873), /* source_tls_ciphersuites_def */
		S_source_file_def(874), /* source_file_def */
		S_opt_channel(875), /* opt_channel */
		S_create_table_stmt(876), /* create_table_stmt */
		S_create_role_stmt(877), /* create_role_stmt */
		S_create_resource_group_stmt(878), /* create_resource_group_stmt */
		S_create(879), /* create */
		S_880_6(880), /* $@6 */
		S_create_srs_stmt(881), /* create_srs_stmt */
		S_srs_attributes(882), /* srs_attributes */
		S_default_role_clause(883), /* default_role_clause */
		S_create_index_stmt(884), /* create_index_stmt */
		S_server_options_list(885), /* server_options_list */
		S_server_option(886), /* server_option */
		S_event_tail(887), /* event_tail */
		S_888_7(888), /* $@7 */
		S_ev_schedule_time(889), /* ev_schedule_time */
		S_890_8(890), /* $@8 */
		S_opt_ev_status(891), /* opt_ev_status */
		S_ev_starts(892), /* ev_starts */
		S_ev_ends(893), /* ev_ends */
		S_opt_ev_on_completion(894), /* opt_ev_on_completion */
		S_ev_on_completion(895), /* ev_on_completion */
		S_opt_ev_comment(896), /* opt_ev_comment */
		S_ev_sql_stmt(897), /* ev_sql_stmt */
		S_898_9(898), /* $@9 */
		S_ev_sql_stmt_inner(899), /* ev_sql_stmt_inner */
		S_sp_name(900), /* sp_name */
		S_sp_a_chistics(901), /* sp_a_chistics */
		S_sp_c_chistics(902), /* sp_c_chistics */
		S_sp_chistic(903), /* sp_chistic */
		S_sp_c_chistic(904), /* sp_c_chistic */
		S_sp_suid(905), /* sp_suid */
		S_call_stmt(906), /* call_stmt */
		S_opt_paren_expr_list(907), /* opt_paren_expr_list */
		S_sp_fdparam_list(908), /* sp_fdparam_list */
		S_sp_fdparams(909), /* sp_fdparams */
		S_sp_fdparam(910), /* sp_fdparam */
		S_sp_pdparam_list(911), /* sp_pdparam_list */
		S_sp_pdparams(912), /* sp_pdparams */
		S_sp_pdparam(913), /* sp_pdparam */
		S_sp_opt_inout(914), /* sp_opt_inout */
		S_sp_proc_stmts(915), /* sp_proc_stmts */
		S_sp_proc_stmts1(916), /* sp_proc_stmts1 */
		S_sp_decls(917), /* sp_decls */
		S_sp_decl(918), /* sp_decl */
		S_919_10(919), /* $@10 */
		S_920_11(920), /* $@11 */
		S_sp_handler_type(921), /* sp_handler_type */
		S_sp_hcond_list(922), /* sp_hcond_list */
		S_sp_hcond_element(923), /* sp_hcond_element */
		S_sp_cond(924), /* sp_cond */
		S_sqlstate(925), /* sqlstate */
		S_opt_value(926), /* opt_value */
		S_sp_hcond(927), /* sp_hcond */
		S_signal_stmt(928), /* signal_stmt */
		S_signal_value(929), /* signal_value */
		S_opt_signal_value(930), /* opt_signal_value */
		S_opt_set_signal_information(931), /* opt_set_signal_information */
		S_signal_information_item_list(932), /* signal_information_item_list */
		S_signal_allowed_expr(933), /* signal_allowed_expr */
		S_signal_condition_information_item_name(934), /* signal_condition_information_item_name */
		S_resignal_stmt(935), /* resignal_stmt */
		S_get_diagnostics(936), /* get_diagnostics */
		S_which_area(937), /* which_area */
		S_diagnostics_information(938), /* diagnostics_information */
		S_statement_information(939), /* statement_information */
		S_statement_information_item(940), /* statement_information_item */
		S_simple_target_specification(941), /* simple_target_specification */
		S_statement_information_item_name(942), /* statement_information_item_name */
		S_condition_number(943), /* condition_number */
		S_condition_information(944), /* condition_information */
		S_condition_information_item(945), /* condition_information_item */
		S_condition_information_item_name(946), /* condition_information_item_name */
		S_sp_decl_idents(947), /* sp_decl_idents */
		S_sp_opt_default(948), /* sp_opt_default */
		S_sp_proc_stmt(949), /* sp_proc_stmt */
		S_sp_proc_stmt_if(950), /* sp_proc_stmt_if */
		S_951_12(951), /* $@12 */
		S_sp_proc_stmt_statement(952), /* sp_proc_stmt_statement */
		S_953_13(953), /* $@13 */
		S_sp_proc_stmt_return(954), /* sp_proc_stmt_return */
		S_955_14(955), /* $@14 */
		S_sp_proc_stmt_unlabeled(956), /* sp_proc_stmt_unlabeled */
		S_957_15(957), /* $@15 */
		S_sp_proc_stmt_leave(958), /* sp_proc_stmt_leave */
		S_sp_proc_stmt_iterate(959), /* sp_proc_stmt_iterate */
		S_sp_proc_stmt_open(960), /* sp_proc_stmt_open */
		S_sp_proc_stmt_fetch(961), /* sp_proc_stmt_fetch */
		S_962_16(962), /* $@16 */
		S_sp_proc_stmt_close(963), /* sp_proc_stmt_close */
		S_sp_opt_fetch_noise(964), /* sp_opt_fetch_noise */
		S_sp_fetch_list(965), /* sp_fetch_list */
		S_sp_if(966), /* sp_if */
		S_967_17(967), /* $@17 */
		S_968_18(968), /* $@18 */
		S_969_19(969), /* $@19 */
		S_sp_elseifs(970), /* sp_elseifs */
		S_case_stmt_specification(971), /* case_stmt_specification */
		S_simple_case_stmt(972), /* simple_case_stmt */
		S_973_20(973), /* $@20 */
		S_974_21(974), /* $@21 */
		S_searched_case_stmt(975), /* searched_case_stmt */
		S_976_22(976), /* $@22 */
		S_simple_when_clause_list(977), /* simple_when_clause_list */
		S_searched_when_clause_list(978), /* searched_when_clause_list */
		S_simple_when_clause(979), /* simple_when_clause */
		S_980_23(980), /* $@23 */
		S_981_24(981), /* $@24 */
		S_searched_when_clause(982), /* searched_when_clause */
		S_983_25(983), /* $@25 */
		S_984_26(984), /* $@26 */
		S_else_clause_opt(985), /* else_clause_opt */
		S_sp_labeled_control(986), /* sp_labeled_control */
		S_987_27(987), /* $@27 */
		S_sp_opt_label(988), /* sp_opt_label */
		S_sp_labeled_block(989), /* sp_labeled_block */
		S_990_28(990), /* $@28 */
		S_sp_unlabeled_block(991), /* sp_unlabeled_block */
		S_992_29(992), /* $@29 */
		S_sp_block_content(993), /* sp_block_content */
		S_994_30(994), /* $@30 */
		S_sp_unlabeled_control(995), /* sp_unlabeled_control */
		S_996_31(996), /* $@31 */
		S_997_32(997), /* $@32 */
		S_998_33(998), /* $@33 */
		S_999_34(999), /* $@34 */
		S_trg_action_time(1000), /* trg_action_time */
		S_trg_event(1001), /* trg_event */
		S_opt_ts_datafile_name(1002), /* opt_ts_datafile_name */
		S_opt_logfile_group_name(1003), /* opt_logfile_group_name */
		S_opt_tablespace_options(1004), /* opt_tablespace_options */
		S_tablespace_option_list(1005), /* tablespace_option_list */
		S_tablespace_option(1006), /* tablespace_option */
		S_opt_alter_tablespace_options(1007), /* opt_alter_tablespace_options */
		S_alter_tablespace_option_list(1008), /* alter_tablespace_option_list */
		S_alter_tablespace_option(1009), /* alter_tablespace_option */
		S_opt_undo_tablespace_options(1010), /* opt_undo_tablespace_options */
		S_undo_tablespace_option_list(1011), /* undo_tablespace_option_list */
		S_undo_tablespace_option(1012), /* undo_tablespace_option */
		S_opt_logfile_group_options(1013), /* opt_logfile_group_options */
		S_logfile_group_option_list(1014), /* logfile_group_option_list */
		S_logfile_group_option(1015), /* logfile_group_option */
		S_opt_alter_logfile_group_options(1016), /* opt_alter_logfile_group_options */
		S_alter_logfile_group_option_list(1017), /* alter_logfile_group_option_list */
		S_alter_logfile_group_option(1018), /* alter_logfile_group_option */
		S_ts_datafile(1019), /* ts_datafile */
		S_undo_tablespace_state(1020), /* undo_tablespace_state */
		S_lg_undofile(1021), /* lg_undofile */
		S_ts_option_initial_size(1022), /* ts_option_initial_size */
		S_ts_option_autoextend_size(1023), /* ts_option_autoextend_size */
		S_option_autoextend_size(1024), /* option_autoextend_size */
		S_ts_option_max_size(1025), /* ts_option_max_size */
		S_ts_option_extent_size(1026), /* ts_option_extent_size */
		S_ts_option_undo_buffer_size(1027), /* ts_option_undo_buffer_size */
		S_ts_option_redo_buffer_size(1028), /* ts_option_redo_buffer_size */
		S_ts_option_nodegroup(1029), /* ts_option_nodegroup */
		S_ts_option_comment(1030), /* ts_option_comment */
		S_ts_option_engine(1031), /* ts_option_engine */
		S_ts_option_file_block_size(1032), /* ts_option_file_block_size */
		S_ts_option_wait(1033), /* ts_option_wait */
		S_ts_option_encryption(1034), /* ts_option_encryption */
		S_ts_option_engine_attribute(1035), /* ts_option_engine_attribute */
		S_size_number(1036), /* size_number */
		S_opt_create_table_options_etc(1037), /* opt_create_table_options_etc */
		S_opt_create_partitioning_etc(1038), /* opt_create_partitioning_etc */
		S_opt_duplicate_as_qe(1039), /* opt_duplicate_as_qe */
		S_as_create_query_expression(1040), /* as_create_query_expression */
		S_partition_clause(1041), /* partition_clause */
		S_part_type_def(1042), /* part_type_def */
		S_opt_linear(1043), /* opt_linear */
		S_opt_key_algo(1044), /* opt_key_algo */
		S_opt_num_parts(1045), /* opt_num_parts */
		S_opt_sub_part(1046), /* opt_sub_part */
		S_opt_name_list(1047), /* opt_name_list */
		S_name_list(1048), /* name_list */
		S_opt_num_subparts(1049), /* opt_num_subparts */
		S_opt_part_defs(1050), /* opt_part_defs */
		S_part_def_list(1051), /* part_def_list */
		S_part_definition(1052), /* part_definition */
		S_opt_part_values(1053), /* opt_part_values */
		S_part_func_max(1054), /* part_func_max */
		S_part_values_in(1055), /* part_values_in */
		S_part_value_list(1056), /* part_value_list */
		S_part_value_item_list_paren(1057), /* part_value_item_list_paren */
		S_1058_35(1058), /* $@35 */
		S_part_value_item_list(1059), /* part_value_item_list */
		S_part_value_item(1060), /* part_value_item */
		S_opt_sub_partition(1061), /* opt_sub_partition */
		S_sub_part_list(1062), /* sub_part_list */
		S_sub_part_definition(1063), /* sub_part_definition */
		S_opt_part_options(1064), /* opt_part_options */
		S_part_option_list(1065), /* part_option_list */
		S_part_option(1066), /* part_option */
		S_alter_database_options(1067), /* alter_database_options */
		S_alter_database_option(1068), /* alter_database_option */
		S_opt_create_database_options(1069), /* opt_create_database_options */
		S_create_database_options(1070), /* create_database_options */
		S_create_database_option(1071), /* create_database_option */
		S_opt_if_not_exists(1072), /* opt_if_not_exists */
		S_create_table_options_space_separated(1073), /* create_table_options_space_separated */
		S_create_table_options(1074), /* create_table_options */
		S_opt_comma(1075), /* opt_comma */
		S_create_table_option(1076), /* create_table_option */
		S_ternary_option(1077), /* ternary_option */
		S_default_charset(1078), /* default_charset */
		S_default_collation(1079), /* default_collation */
		S_default_encryption(1080), /* default_encryption */
		S_row_types(1081), /* row_types */
		S_merge_insert_types(1082), /* merge_insert_types */
		S_udf_type(1083), /* udf_type */
		S_table_element_list(1084), /* table_element_list */
		S_table_element(1085), /* table_element */
		S_column_def(1086), /* column_def */
		S_opt_references(1087), /* opt_references */
		S_table_constraint_def(1088), /* table_constraint_def */
		S_check_constraint(1089), /* check_constraint */
		S_opt_constraint_name(1090), /* opt_constraint_name */
		S_opt_not(1091), /* opt_not */
		S_opt_constraint_enforcement(1092), /* opt_constraint_enforcement */
		S_constraint_enforcement(1093), /* constraint_enforcement */
		S_field_def(1094), /* field_def */
		S_opt_generated_always(1095), /* opt_generated_always */
		S_opt_stored_attribute(1096), /* opt_stored_attribute */
		S_type(1097), /* type */
		S_spatial_type(1098), /* spatial_type */
		S_nchar(1099), /* nchar */
		S_varchar(1100), /* varchar */
		S_nvarchar(1101), /* nvarchar */
		S_int_type(1102), /* int_type */
		S_real_type(1103), /* real_type */
		S_opt_PRECISION(1104), /* opt_PRECISION */
		S_numeric_type(1105), /* numeric_type */
		S_standard_float_options(1106), /* standard_float_options */
		S_float_options(1107), /* float_options */
		S_precision(1108), /* precision */
		S_type_datetime_precision(1109), /* type_datetime_precision */
		S_func_datetime_precision(1110), /* func_datetime_precision */
		S_field_options(1111), /* field_options */
		S_field_opt_list(1112), /* field_opt_list */
		S_field_option(1113), /* field_option */
		S_field_length(1114), /* field_length */
		S_opt_field_length(1115), /* opt_field_length */
		S_opt_precision(1116), /* opt_precision */
		S_opt_column_attribute_list(1117), /* opt_column_attribute_list */
		S_column_attribute_list(1118), /* column_attribute_list */
		S_column_attribute(1119), /* column_attribute */
		S_column_format(1120), /* column_format */
		S_storage_media(1121), /* storage_media */
		S_now(1122), /* now */
		S_now_or_signed_literal(1123), /* now_or_signed_literal */
		S_character_set(1124), /* character_set */
		S_charset_name(1125), /* charset_name */
		S_opt_load_data_charset(1126), /* opt_load_data_charset */
		S_old_or_new_charset_name(1127), /* old_or_new_charset_name */
		S_old_or_new_charset_name_or_default(1128), /* old_or_new_charset_name_or_default */
		S_collation_name(1129), /* collation_name */
		S_opt_collate(1130), /* opt_collate */
		S_opt_default(1131), /* opt_default */
		S_ascii(1132), /* ascii */
		S_unicode(1133), /* unicode */
		S_opt_charset_with_opt_binary(1134), /* opt_charset_with_opt_binary */
		S_opt_bin_mod(1135), /* opt_bin_mod */
		S_ws_num_codepoints(1136), /* ws_num_codepoints */
		S_1137_36(1137), /* $@36 */
		S_opt_primary(1138), /* opt_primary */
		S_references(1139), /* references */
		S_opt_ref_list(1140), /* opt_ref_list */
		S_reference_list(1141), /* reference_list */
		S_opt_match_clause(1142), /* opt_match_clause */
		S_opt_on_update_delete(1143), /* opt_on_update_delete */
		S_delete_option(1144), /* delete_option */
		S_constraint_key_type(1145), /* constraint_key_type */
		S_key_or_index(1146), /* key_or_index */
		S_opt_key_or_index(1147), /* opt_key_or_index */
		S_keys_or_index(1148), /* keys_or_index */
		S_opt_unique(1149), /* opt_unique */
		S_opt_fulltext_index_options(1150), /* opt_fulltext_index_options */
		S_fulltext_index_options(1151), /* fulltext_index_options */
		S_fulltext_index_option(1152), /* fulltext_index_option */
		S_opt_spatial_index_options(1153), /* opt_spatial_index_options */
		S_spatial_index_options(1154), /* spatial_index_options */
		S_spatial_index_option(1155), /* spatial_index_option */
		S_opt_index_options(1156), /* opt_index_options */
		S_index_options(1157), /* index_options */
		S_index_option(1158), /* index_option */
		S_common_index_option(1159), /* common_index_option */
		S_opt_index_name_and_type(1160), /* opt_index_name_and_type */
		S_opt_index_type_clause(1161), /* opt_index_type_clause */
		S_index_type_clause(1162), /* index_type_clause */
		S_visibility(1163), /* visibility */
		S_index_type(1164), /* index_type */
		S_key_list(1165), /* key_list */
		S_key_part(1166), /* key_part */
		S_key_list_with_expression(1167), /* key_list_with_expression */
		S_key_part_with_expression(1168), /* key_part_with_expression */
		S_opt_ident(1169), /* opt_ident */
		S_string_list(1170), /* string_list */
		S_alter_table_stmt(1171), /* alter_table_stmt */
		S_alter_database_stmt(1172), /* alter_database_stmt */
		S_1173_37(1173), /* $@37 */
		S_alter_procedure_stmt(1174), /* alter_procedure_stmt */
		S_1175_38(1175), /* $@38 */
		S_alter_function_stmt(1176), /* alter_function_stmt */
		S_1177_39(1177), /* $@39 */
		S_alter_view_stmt(1178), /* alter_view_stmt */
		S_1179_40(1179), /* $@40 */
		S_1180_41(1180), /* $@41 */
		S_alter_event_stmt(1181), /* alter_event_stmt */
		S_1182_42(1182), /* $@42 */
		S_alter_logfile_stmt(1183), /* alter_logfile_stmt */
		S_alter_tablespace_stmt(1184), /* alter_tablespace_stmt */
		S_alter_undo_tablespace_stmt(1185), /* alter_undo_tablespace_stmt */
		S_alter_server_stmt(1186), /* alter_server_stmt */
		S_alter_user_stmt(1187), /* alter_user_stmt */
		S_opt_replace_password(1188), /* opt_replace_password */
		S_alter_resource_group_stmt(1189), /* alter_resource_group_stmt */
		S_alter_user_command(1190), /* alter_user_command */
		S_opt_user_attribute(1191), /* opt_user_attribute */
		S_opt_account_lock_password_expire_options(1192), /* opt_account_lock_password_expire_options */
		S_opt_account_lock_password_expire_option_list(1193), /* opt_account_lock_password_expire_option_list */
		S_opt_account_lock_password_expire_option(1194), /* opt_account_lock_password_expire_option */
		S_connect_options(1195), /* connect_options */
		S_connect_option_list(1196), /* connect_option_list */
		S_connect_option(1197), /* connect_option */
		S_user_func(1198), /* user_func */
		S_ev_alter_on_schedule_completion(1199), /* ev_alter_on_schedule_completion */
		S_opt_ev_rename_to(1200), /* opt_ev_rename_to */
		S_opt_ev_sql_stmt(1201), /* opt_ev_sql_stmt */
		S_ident_or_empty(1202), /* ident_or_empty */
		S_opt_alter_table_actions(1203), /* opt_alter_table_actions */
		S_standalone_alter_table_action(1204), /* standalone_alter_table_action */
		S_alter_table_partition_options(1205), /* alter_table_partition_options */
		S_opt_alter_command_list(1206), /* opt_alter_command_list */
		S_standalone_alter_commands(1207), /* standalone_alter_commands */
		S_opt_with_validation(1208), /* opt_with_validation */
		S_with_validation(1209), /* with_validation */
		S_all_or_alt_part_name_list(1210), /* all_or_alt_part_name_list */
		S_alter_list(1211), /* alter_list */
		S_alter_commands_modifier_list(1212), /* alter_commands_modifier_list */
		S_alter_list_item(1213), /* alter_list_item */
		S_alter_commands_modifier(1214), /* alter_commands_modifier */
		S_opt_index_lock_and_algorithm(1215), /* opt_index_lock_and_algorithm */
		S_alter_algorithm_option(1216), /* alter_algorithm_option */
		S_alter_algorithm_option_value(1217), /* alter_algorithm_option_value */
		S_alter_lock_option(1218), /* alter_lock_option */
		S_alter_lock_option_value(1219), /* alter_lock_option_value */
		S_opt_column(1220), /* opt_column */
		S_opt_ignore(1221), /* opt_ignore */
		S_opt_restrict(1222), /* opt_restrict */
		S_opt_place(1223), /* opt_place */
		S_opt_to(1224), /* opt_to */
		S_group_replication(1225), /* group_replication */
		S_group_replication_start(1226), /* group_replication_start */
		S_opt_group_replication_start_options(1227), /* opt_group_replication_start_options */
		S_group_replication_start_options(1228), /* group_replication_start_options */
		S_group_replication_start_option(1229), /* group_replication_start_option */
		S_group_replication_user(1230), /* group_replication_user */
		S_group_replication_password(1231), /* group_replication_password */
		S_group_replication_plugin_auth(1232), /* group_replication_plugin_auth */
		S_stop_replica_stmt(1233), /* stop_replica_stmt */
		S_start_replica_stmt(1234), /* start_replica_stmt */
		S_1235_43(1235), /* $@43 */
		S_1236_44(1236), /* $@44 */
		S_start(1237), /* start */
		S_opt_start_transaction_option_list(1238), /* opt_start_transaction_option_list */
		S_start_transaction_option_list(1239), /* start_transaction_option_list */
		S_start_transaction_option(1240), /* start_transaction_option */
		S_opt_user_option(1241), /* opt_user_option */
		S_opt_password_option(1242), /* opt_password_option */
		S_opt_default_auth_option(1243), /* opt_default_auth_option */
		S_opt_plugin_dir_option(1244), /* opt_plugin_dir_option */
		S_opt_replica_thread_option_list(1245), /* opt_replica_thread_option_list */
		S_replica_thread_option_list(1246), /* replica_thread_option_list */
		S_replica_thread_option(1247), /* replica_thread_option */
		S_opt_replica_until(1248), /* opt_replica_until */
		S_replica_until(1249), /* replica_until */
		S_checksum(1250), /* checksum */
		S_opt_checksum_type(1251), /* opt_checksum_type */
		S_repair_table_stmt(1252), /* repair_table_stmt */
		S_opt_mi_repair_types(1253), /* opt_mi_repair_types */
		S_mi_repair_types(1254), /* mi_repair_types */
		S_mi_repair_type(1255), /* mi_repair_type */
		S_analyze_table_stmt(1256), /* analyze_table_stmt */
		S_opt_histogram_auto_update(1257), /* opt_histogram_auto_update */
		S_opt_histogram_num_buckets(1258), /* opt_histogram_num_buckets */
		S_opt_histogram_update_param(1259), /* opt_histogram_update_param */
		S_opt_histogram(1260), /* opt_histogram */
		S_binlog_base64_event(1261), /* binlog_base64_event */
		S_check_table_stmt(1262), /* check_table_stmt */
		S_opt_mi_check_types(1263), /* opt_mi_check_types */
		S_mi_check_types(1264), /* mi_check_types */
		S_mi_check_type(1265), /* mi_check_type */
		S_optimize_table_stmt(1266), /* optimize_table_stmt */
		S_opt_no_write_to_binlog(1267), /* opt_no_write_to_binlog */
		S_rename(1268), /* rename */
		S_1269_45(1269), /* $@45 */
		S_rename_list(1270), /* rename_list */
		S_table_to_table_list(1271), /* table_to_table_list */
		S_table_to_table(1272), /* table_to_table */
		S_keycache_stmt(1273), /* keycache_stmt */
		S_keycache_list(1274), /* keycache_list */
		S_assign_to_keycache(1275), /* assign_to_keycache */
		S_key_cache_name(1276), /* key_cache_name */
		S_preload_stmt(1277), /* preload_stmt */
		S_preload_list(1278), /* preload_list */
		S_preload_keys(1279), /* preload_keys */
		S_adm_partition(1280), /* adm_partition */
		S_opt_cache_key_list(1281), /* opt_cache_key_list */
		S_opt_ignore_leaves(1282), /* opt_ignore_leaves */
		S_select_stmt(1283), /* select_stmt */
		S_select_stmt_with_into(1284), /* select_stmt_with_into */
		S_query_expression(1285), /* query_expression */
		S_query_expression_body(1286), /* query_expression_body */
		S_query_expression_parens(1287), /* query_expression_parens */
		S_query_primary(1288), /* query_primary */
		S_query_specification(1289), /* query_specification */
		S_opt_from_clause(1290), /* opt_from_clause */
		S_from_clause(1291), /* from_clause */
		S_from_tables(1292), /* from_tables */
		S_table_reference_list(1293), /* table_reference_list */
		S_table_value_constructor(1294), /* table_value_constructor */
		S_explicit_table(1295), /* explicit_table */
		S_select_options(1296), /* select_options */
		S_select_option_list(1297), /* select_option_list */
		S_select_option(1298), /* select_option */
		S_locking_clause_list(1299), /* locking_clause_list */
		S_locking_clause(1300), /* locking_clause */
		S_lock_strength(1301), /* lock_strength */
		S_table_locking_list(1302), /* table_locking_list */
		S_opt_locked_row_action(1303), /* opt_locked_row_action */
		S_locked_row_action(1304), /* locked_row_action */
		S_select_item_list(1305), /* select_item_list */
		S_select_item(1306), /* select_item */
		S_select_alias(1307), /* select_alias */
		S_optional_braces(1308), /* optional_braces */
		S_expr(1309), /* expr */
		S_bool_pri(1310), /* bool_pri */
		S_predicate(1311), /* predicate */
		S_opt_of(1312), /* opt_of */
		S_bit_expr(1313), /* bit_expr */
		S_or(1314), /* or */
		S_and(1315), /* and */
		S_not(1316), /* not */
		S_not2(1317), /* not2 */
		S_comp_op(1318), /* comp_op */
		S_all_or_any(1319), /* all_or_any */
		S_simple_expr(1320), /* simple_expr */
		S_opt_array_cast(1321), /* opt_array_cast */
		S_function_call_keyword(1322), /* function_call_keyword */
		S_function_call_nonkeyword(1323), /* function_call_nonkeyword */
		S_opt_returning_type(1324), /* opt_returning_type */
		S_function_call_conflict(1325), /* function_call_conflict */
		S_geometry_function(1326), /* geometry_function */
		S_function_call_generic(1327), /* function_call_generic */
		S_fulltext_options(1328), /* fulltext_options */
		S_opt_natural_language_mode(1329), /* opt_natural_language_mode */
		S_opt_query_expansion(1330), /* opt_query_expansion */
		S_opt_udf_expr_list(1331), /* opt_udf_expr_list */
		S_udf_expr_list(1332), /* udf_expr_list */
		S_udf_expr(1333), /* udf_expr */
		S_set_function_specification(1334), /* set_function_specification */
		S_sum_expr(1335), /* sum_expr */
		S_sampling_method(1336), /* sampling_method */
		S_sampling_percentage(1337), /* sampling_percentage */
		S_opt_tablesample_clause(1338), /* opt_tablesample_clause */
		S_window_func_call(1339), /* window_func_call */
		S_opt_lead_lag_info(1340), /* opt_lead_lag_info */
		S_stable_integer(1341), /* stable_integer */
		S_param_or_var(1342), /* param_or_var */
		S_opt_ll_default(1343), /* opt_ll_default */
		S_opt_null_treatment(1344), /* opt_null_treatment */
		S_opt_from_first_last(1345), /* opt_from_first_last */
		S_opt_windowing_clause(1346), /* opt_windowing_clause */
		S_windowing_clause(1347), /* windowing_clause */
		S_window_name_or_spec(1348), /* window_name_or_spec */
		S_window_name(1349), /* window_name */
		S_window_spec(1350), /* window_spec */
		S_window_spec_details(1351), /* window_spec_details */
		S_opt_existing_window_name(1352), /* opt_existing_window_name */
		S_opt_partition_clause(1353), /* opt_partition_clause */
		S_opt_window_order_by_clause(1354), /* opt_window_order_by_clause */
		S_opt_window_frame_clause(1355), /* opt_window_frame_clause */
		S_window_frame_extent(1356), /* window_frame_extent */
		S_window_frame_start(1357), /* window_frame_start */
		S_window_frame_between(1358), /* window_frame_between */
		S_window_frame_bound(1359), /* window_frame_bound */
		S_opt_window_frame_exclusion(1360), /* opt_window_frame_exclusion */
		S_window_frame_units(1361), /* window_frame_units */
		S_grouping_operation(1362), /* grouping_operation */
		S_in_expression_user_variable_assignment(1363), /* in_expression_user_variable_assignment */
		S_rvalue_system_or_user_variable(1364), /* rvalue_system_or_user_variable */
		S_opt_distinct(1365), /* opt_distinct */
		S_opt_gconcat_separator(1366), /* opt_gconcat_separator */
		S_opt_gorder_clause(1367), /* opt_gorder_clause */
		S_gorder_list(1368), /* gorder_list */
		S_in_sum_expr(1369), /* in_sum_expr */
		S_cast_type(1370), /* cast_type */
		S_opt_expr_list(1371), /* opt_expr_list */
		S_expr_list(1372), /* expr_list */
		S_ident_list_arg(1373), /* ident_list_arg */
		S_ident_list(1374), /* ident_list */
		S_opt_expr(1375), /* opt_expr */
		S_opt_else(1376), /* opt_else */
		S_when_list(1377), /* when_list */
		S_table_reference(1378), /* table_reference */
		S_esc_table_reference(1379), /* esc_table_reference */
		S_joined_table(1380), /* joined_table */
		S_natural_join_type(1381), /* natural_join_type */
		S_inner_join_type(1382), /* inner_join_type */
		S_outer_join_type(1383), /* outer_join_type */
		S_opt_inner(1384), /* opt_inner */
		S_opt_outer(1385), /* opt_outer */
		S_opt_use_partition(1386), /* opt_use_partition */
		S_use_partition(1387), /* use_partition */
		S_table_factor(1388), /* table_factor */
		S_table_reference_list_parens(1389), /* table_reference_list_parens */
		S_single_table_parens(1390), /* single_table_parens */
		S_single_table(1391), /* single_table */
		S_joined_table_parens(1392), /* joined_table_parens */
		S_derived_table(1393), /* derived_table */
		S_table_function(1394), /* table_function */
		S_columns_clause(1395), /* columns_clause */
		S_columns_list(1396), /* columns_list */
		S_jt_column(1397), /* jt_column */
		S_jt_column_type(1398), /* jt_column_type */
		S_opt_on_empty_or_error(1399), /* opt_on_empty_or_error */
		S_opt_on_empty_or_error_json_table(1400), /* opt_on_empty_or_error_json_table */
		S_on_empty(1401), /* on_empty */
		S_on_error(1402), /* on_error */
		S_json_on_response(1403), /* json_on_response */
		S_index_hint_clause(1404), /* index_hint_clause */
		S_index_hint_type(1405), /* index_hint_type */
		S_index_hint_definition(1406), /* index_hint_definition */
		S_index_hints_list(1407), /* index_hints_list */
		S_opt_index_hints_list(1408), /* opt_index_hints_list */
		S_opt_key_definition(1409), /* opt_key_definition */
		S_opt_key_usage_list(1410), /* opt_key_usage_list */
		S_key_usage_element(1411), /* key_usage_element */
		S_key_usage_list(1412), /* key_usage_list */
		S_using_list(1413), /* using_list */
		S_ident_string_list(1414), /* ident_string_list */
		S_interval(1415), /* interval */
		S_interval_time_stamp(1416), /* interval_time_stamp */
		S_date_time_type(1417), /* date_time_type */
		S_opt_as(1418), /* opt_as */
		S_opt_table_alias(1419), /* opt_table_alias */
		S_opt_all(1420), /* opt_all */
		S_opt_where_clause(1421), /* opt_where_clause */
		S_where_clause(1422), /* where_clause */
		S_opt_having_clause(1423), /* opt_having_clause */
		S_opt_qualify_clause(1424), /* opt_qualify_clause */
		S_with_clause(1425), /* with_clause */
		S_with_list(1426), /* with_list */
		S_common_table_expr(1427), /* common_table_expr */
		S_opt_derived_column_list(1428), /* opt_derived_column_list */
		S_simple_ident_list(1429), /* simple_ident_list */
		S_opt_window_clause(1430), /* opt_window_clause */
		S_window_definition_list(1431), /* window_definition_list */
		S_window_definition(1432), /* window_definition */
		S_opt_group_clause(1433), /* opt_group_clause */
		S_group_list(1434), /* group_list */
		S_olap_opt(1435), /* olap_opt */
		S_alter_order_list(1436), /* alter_order_list */
		S_alter_order_item(1437), /* alter_order_item */
		S_opt_order_clause(1438), /* opt_order_clause */
		S_order_clause(1439), /* order_clause */
		S_order_list(1440), /* order_list */
		S_opt_ordering_direction(1441), /* opt_ordering_direction */
		S_ordering_direction(1442), /* ordering_direction */
		S_opt_limit_clause(1443), /* opt_limit_clause */
		S_limit_clause(1444), /* limit_clause */
		S_limit_options(1445), /* limit_options */
		S_limit_option(1446), /* limit_option */
		S_opt_simple_limit(1447), /* opt_simple_limit */
		S_ulong_num(1448), /* ulong_num */
		S_real_ulong_num(1449), /* real_ulong_num */
		S_ulonglong_num(1450), /* ulonglong_num */
		S_real_ulonglong_num(1451), /* real_ulonglong_num */
		S_dec_num_error(1452), /* dec_num_error */
		S_dec_num(1453), /* dec_num */
		S_select_var_list(1454), /* select_var_list */
		S_select_var_ident(1455), /* select_var_ident */
		S_into_clause(1456), /* into_clause */
		S_into_destination(1457), /* into_destination */
		S_do_stmt(1458), /* do_stmt */
		S_drop_table_stmt(1459), /* drop_table_stmt */
		S_drop_index_stmt(1460), /* drop_index_stmt */
		S_drop_database_stmt(1461), /* drop_database_stmt */
		S_drop_function_stmt(1462), /* drop_function_stmt */
		S_drop_resource_group_stmt(1463), /* drop_resource_group_stmt */
		S_drop_procedure_stmt(1464), /* drop_procedure_stmt */
		S_drop_user_stmt(1465), /* drop_user_stmt */
		S_drop_view_stmt(1466), /* drop_view_stmt */
		S_drop_event_stmt(1467), /* drop_event_stmt */
		S_drop_trigger_stmt(1468), /* drop_trigger_stmt */
		S_drop_tablespace_stmt(1469), /* drop_tablespace_stmt */
		S_drop_undo_tablespace_stmt(1470), /* drop_undo_tablespace_stmt */
		S_drop_logfile_stmt(1471), /* drop_logfile_stmt */
		S_drop_server_stmt(1472), /* drop_server_stmt */
		S_drop_srs_stmt(1473), /* drop_srs_stmt */
		S_drop_role_stmt(1474), /* drop_role_stmt */
		S_table_list(1475), /* table_list */
		S_table_alias_ref_list(1476), /* table_alias_ref_list */
		S_if_exists(1477), /* if_exists */
		S_opt_ignore_unknown_user(1478), /* opt_ignore_unknown_user */
		S_opt_temporary(1479), /* opt_temporary */
		S_opt_drop_ts_options(1480), /* opt_drop_ts_options */
		S_drop_ts_option_list(1481), /* drop_ts_option_list */
		S_drop_ts_option(1482), /* drop_ts_option */
		S_insert_stmt(1483), /* insert_stmt */
		S_replace_stmt(1484), /* replace_stmt */
		S_insert_lock_option(1485), /* insert_lock_option */
		S_replace_lock_option(1486), /* replace_lock_option */
		S_opt_INTO(1487), /* opt_INTO */
		S_insert_from_constructor(1488), /* insert_from_constructor */
		S_insert_query_expression(1489), /* insert_query_expression */
		S_insert_columns(1490), /* insert_columns */
		S_insert_values(1491), /* insert_values */
		S_query_expression_with_opt_locking_clauses(1492), /* query_expression_with_opt_locking_clauses */
		S_value_or_values(1493), /* value_or_values */
		S_values_list(1494), /* values_list */
		S_values_row_list(1495), /* values_row_list */
		S_equal(1496), /* equal */
		S_opt_equal(1497), /* opt_equal */
		S_row_value(1498), /* row_value */
		S_row_value_explicit(1499), /* row_value_explicit */
		S_opt_values(1500), /* opt_values */
		S_values(1501), /* values */
		S_expr_or_default(1502), /* expr_or_default */
		S_opt_values_reference(1503), /* opt_values_reference */
		S_opt_insert_update_list(1504), /* opt_insert_update_list */
		S_update_stmt(1505), /* update_stmt */
		S_opt_with_clause(1506), /* opt_with_clause */
		S_update_list(1507), /* update_list */
		S_update_elem(1508), /* update_elem */
		S_opt_low_priority(1509), /* opt_low_priority */
		S_delete_stmt(1510), /* delete_stmt */
		S_opt_wild(1511), /* opt_wild */
		S_opt_delete_options(1512), /* opt_delete_options */
		S_opt_delete_option(1513), /* opt_delete_option */
		S_truncate_stmt(1514), /* truncate_stmt */
		S_opt_table(1515), /* opt_table */
		S_opt_profile_defs(1516), /* opt_profile_defs */
		S_profile_defs(1517), /* profile_defs */
		S_profile_def(1518), /* profile_def */
		S_opt_for_query(1519), /* opt_for_query */
		S_show_databases_stmt(1520), /* show_databases_stmt */
		S_show_tables_stmt(1521), /* show_tables_stmt */
		S_show_triggers_stmt(1522), /* show_triggers_stmt */
		S_show_events_stmt(1523), /* show_events_stmt */
		S_show_table_status_stmt(1524), /* show_table_status_stmt */
		S_show_open_tables_stmt(1525), /* show_open_tables_stmt */
		S_show_plugins_stmt(1526), /* show_plugins_stmt */
		S_show_engine_logs_stmt(1527), /* show_engine_logs_stmt */
		S_show_engine_mutex_stmt(1528), /* show_engine_mutex_stmt */
		S_show_engine_status_stmt(1529), /* show_engine_status_stmt */
		S_show_columns_stmt(1530), /* show_columns_stmt */
		S_show_binary_logs_stmt(1531), /* show_binary_logs_stmt */
		S_show_replicas_stmt(1532), /* show_replicas_stmt */
		S_show_binlog_events_stmt(1533), /* show_binlog_events_stmt */
		S_show_relaylog_events_stmt(1534), /* show_relaylog_events_stmt */
		S_show_keys_stmt(1535), /* show_keys_stmt */
		S_show_engines_stmt(1536), /* show_engines_stmt */
		S_show_count_warnings_stmt(1537), /* show_count_warnings_stmt */
		S_show_count_errors_stmt(1538), /* show_count_errors_stmt */
		S_show_warnings_stmt(1539), /* show_warnings_stmt */
		S_show_errors_stmt(1540), /* show_errors_stmt */
		S_show_profiles_stmt(1541), /* show_profiles_stmt */
		S_show_profile_stmt(1542), /* show_profile_stmt */
		S_show_status_stmt(1543), /* show_status_stmt */
		S_show_processlist_stmt(1544), /* show_processlist_stmt */
		S_show_variables_stmt(1545), /* show_variables_stmt */
		S_show_character_set_stmt(1546), /* show_character_set_stmt */
		S_show_collation_stmt(1547), /* show_collation_stmt */
		S_show_privileges_stmt(1548), /* show_privileges_stmt */
		S_show_grants_stmt(1549), /* show_grants_stmt */
		S_show_create_database_stmt(1550), /* show_create_database_stmt */
		S_show_create_table_stmt(1551), /* show_create_table_stmt */
		S_show_create_view_stmt(1552), /* show_create_view_stmt */
		S_show_binary_log_status_stmt(1553), /* show_binary_log_status_stmt */
		S_show_replica_status_stmt(1554), /* show_replica_status_stmt */
		S_show_create_procedure_stmt(1555), /* show_create_procedure_stmt */
		S_show_create_function_stmt(1556), /* show_create_function_stmt */
		S_show_create_trigger_stmt(1557), /* show_create_trigger_stmt */
		S_show_procedure_status_stmt(1558), /* show_procedure_status_stmt */
		S_show_function_status_stmt(1559), /* show_function_status_stmt */
		S_show_procedure_code_stmt(1560), /* show_procedure_code_stmt */
		S_show_function_code_stmt(1561), /* show_function_code_stmt */
		S_show_create_event_stmt(1562), /* show_create_event_stmt */
		S_show_create_user_stmt(1563), /* show_create_user_stmt */
		S_show_parse_tree_stmt(1564), /* show_parse_tree_stmt */
		S_engine_or_all(1565), /* engine_or_all */
		S_opt_storage(1566), /* opt_storage */
		S_opt_db(1567), /* opt_db */
		S_opt_full(1568), /* opt_full */
		S_opt_extended(1569), /* opt_extended */
		S_opt_show_cmd_type(1570), /* opt_show_cmd_type */
		S_from_or_in(1571), /* from_or_in */
		S_opt_binlog_in(1572), /* opt_binlog_in */
		S_binlog_from(1573), /* binlog_from */
		S_opt_wild_or_where(1574), /* opt_wild_or_where */
		S_describe_stmt(1575), /* describe_stmt */
		S_explain_stmt(1576), /* explain_stmt */
		S_explainable_stmt(1577), /* explainable_stmt */
		S_describe_command(1578), /* describe_command */
		S_opt_explain_format(1579), /* opt_explain_format */
		S_opt_explain_options(1580), /* opt_explain_options */
		S_opt_explain_into(1581), /* opt_explain_into */
		S_opt_explain_for_schema(1582), /* opt_explain_for_schema */
		S_opt_describe_column(1583), /* opt_describe_column */
		S_flush(1584), /* flush */
		S_1585_46(1585), /* $@46 */
		S_flush_options(1586), /* flush_options */
		S_1587_47(1587), /* $@47 */
		S_opt_flush_lock(1588), /* opt_flush_lock */
		S_1589_48(1589), /* $@48 */
		S_flush_options_list(1590), /* flush_options_list */
		S_flush_option(1591), /* flush_option */
		S_opt_table_list(1592), /* opt_table_list */
		S_reset(1593), /* reset */
		S_1594_49(1594), /* $@49 */
		S_reset_options(1595), /* reset_options */
		S_opt_if_exists_ident(1596), /* opt_if_exists_ident */
		S_persisted_variable_ident(1597), /* persisted_variable_ident */
		S_reset_option(1598), /* reset_option */
		S_1599_50(1599), /* $@50 */
		S_1600_51(1600), /* $@51 */
		S_opt_replica_reset_options(1601), /* opt_replica_reset_options */
		S_source_reset_options(1602), /* source_reset_options */
		S_purge(1603), /* purge */
		S_1604_52(1604), /* $@52 */
		S_purge_options(1605), /* purge_options */
		S_purge_option(1606), /* purge_option */
		S_kill(1607), /* kill */
		S_kill_option(1608), /* kill_option */
		S_use(1609), /* use */
		S_load_stmt(1610), /* load_stmt */
		S_data_or_xml(1611), /* data_or_xml */
		S_opt_local(1612), /* opt_local */
		S_opt_from_keyword(1613), /* opt_from_keyword */
		S_load_data_lock(1614), /* load_data_lock */
		S_load_source_type(1615), /* load_source_type */
		S_opt_source_count(1616), /* opt_source_count */
		S_opt_source_order(1617), /* opt_source_order */
		S_opt_duplicate(1618), /* opt_duplicate */
		S_duplicate(1619), /* duplicate */
		S_opt_field_term(1620), /* opt_field_term */
		S_field_term_list(1621), /* field_term_list */
		S_field_term(1622), /* field_term */
		S_opt_line_term(1623), /* opt_line_term */
		S_line_term_list(1624), /* line_term_list */
		S_line_term(1625), /* line_term */
		S_opt_xml_rows_identified_by(1626), /* opt_xml_rows_identified_by */
		S_opt_ignore_lines(1627), /* opt_ignore_lines */
		S_lines_or_rows(1628), /* lines_or_rows */
		S_opt_field_or_var_spec(1629), /* opt_field_or_var_spec */
		S_fields_or_vars(1630), /* fields_or_vars */
		S_field_or_var(1631), /* field_or_var */
		S_opt_load_data_set_spec(1632), /* opt_load_data_set_spec */
		S_load_data_set_list(1633), /* load_data_set_list */
		S_load_data_set_elem(1634), /* load_data_set_elem */
		S_opt_load_algorithm(1635), /* opt_load_algorithm */
		S_opt_compression_algorithm(1636), /* opt_compression_algorithm */
		S_opt_load_parallel(1637), /* opt_load_parallel */
		S_opt_load_memory(1638), /* opt_load_memory */
		S_text_literal(1639), /* text_literal */
		S_text_string(1640), /* text_string */
		S_param_marker(1641), /* param_marker */
		S_signed_literal(1642), /* signed_literal */
		S_signed_literal_or_null(1643), /* signed_literal_or_null */
		S_null_as_literal(1644), /* null_as_literal */
		S_literal(1645), /* literal */
		S_literal_or_null(1646), /* literal_or_null */
		S_NUM_literal(1647), /* NUM_literal */
		S_int64_literal(1648), /* int64_literal */
		S_temporal_literal(1649), /* temporal_literal */
		S_opt_interval(1650), /* opt_interval */
		S_insert_column(1651), /* insert_column */
		S_table_wild(1652), /* table_wild */
		S_order_expr(1653), /* order_expr */
		S_grouping_expr(1654), /* grouping_expr */
		S_simple_ident(1655), /* simple_ident */
		S_simple_ident_nospvar(1656), /* simple_ident_nospvar */
		S_simple_ident_q(1657), /* simple_ident_q */
		S_table_ident(1658), /* table_ident */
		S_table_ident_opt_wild(1659), /* table_ident_opt_wild */
		S_IDENT_sys(1660), /* IDENT_sys */
		S_TEXT_STRING_sys_nonewline(1661), /* TEXT_STRING_sys_nonewline */
		S_filter_wild_db_table_string(1662), /* filter_wild_db_table_string */
		S_TEXT_STRING_sys(1663), /* TEXT_STRING_sys */
		S_TEXT_STRING_literal(1664), /* TEXT_STRING_literal */
		S_TEXT_STRING_filesystem(1665), /* TEXT_STRING_filesystem */
		S_TEXT_STRING_password(1666), /* TEXT_STRING_password */
		S_TEXT_STRING_hash(1667), /* TEXT_STRING_hash */
		S_TEXT_STRING_validated(1668), /* TEXT_STRING_validated */
		S_ident(1669), /* ident */
		S_role_ident(1670), /* role_ident */
		S_label_ident(1671), /* label_ident */
		S_lvalue_ident(1672), /* lvalue_ident */
		S_ident_or_text(1673), /* ident_or_text */
		S_role_ident_or_text(1674), /* role_ident_or_text */
		S_user_ident_or_text(1675), /* user_ident_or_text */
		S_user(1676), /* user */
		S_role(1677), /* role */
		S_schema(1678), /* schema */
		S_ident_keyword(1679), /* ident_keyword */
		S_ident_keywords_ambiguous_1_roles_and_labels(1680), /* ident_keywords_ambiguous_1_roles_and_labels */
		S_ident_keywords_ambiguous_2_labels(1681), /* ident_keywords_ambiguous_2_labels */
		S_label_keyword(1682), /* label_keyword */
		S_ident_keywords_ambiguous_3_roles(1683), /* ident_keywords_ambiguous_3_roles */
		S_ident_keywords_unambiguous(1684), /* ident_keywords_unambiguous */
		S_role_keyword(1685), /* role_keyword */
		S_lvalue_keyword(1686), /* lvalue_keyword */
		S_ident_keywords_ambiguous_4_system_variables(1687), /* ident_keywords_ambiguous_4_system_variables */
		S_set(1688), /* set */
		S_start_option_value_list(1689), /* start_option_value_list */
		S_set_role_stmt(1690), /* set_role_stmt */
		S_opt_except_role_list(1691), /* opt_except_role_list */
		S_set_resource_group_stmt(1692), /* set_resource_group_stmt */
		S_thread_id_list(1693), /* thread_id_list */
		S_thread_id_list_options(1694), /* thread_id_list_options */
		S_start_option_value_list_following_option_type(1695), /* start_option_value_list_following_option_type */
		S_option_value_list_continued(1696), /* option_value_list_continued */
		S_option_value_list(1697), /* option_value_list */
		S_option_value(1698), /* option_value */
		S_option_type(1699), /* option_type */
		S_opt_var_type(1700), /* opt_var_type */
		S_opt_rvalue_system_variable_type(1701), /* opt_rvalue_system_variable_type */
		S_opt_set_var_ident_type(1702), /* opt_set_var_ident_type */
		S_option_value_following_option_type(1703), /* option_value_following_option_type */
		S_option_value_no_option_type(1704), /* option_value_no_option_type */
		S_lvalue_variable(1705), /* lvalue_variable */
		S_rvalue_system_variable(1706), /* rvalue_system_variable */
		S_transaction_characteristics(1707), /* transaction_characteristics */
		S_transaction_access_mode(1708), /* transaction_access_mode */
		S_opt_transaction_access_mode(1709), /* opt_transaction_access_mode */
		S_isolation_level(1710), /* isolation_level */
		S_opt_isolation_level(1711), /* opt_isolation_level */
		S_transaction_access_mode_types(1712), /* transaction_access_mode_types */
		S_isolation_types(1713), /* isolation_types */
		S_set_expr_or_default(1714), /* set_expr_or_default */
		S_lock(1715), /* lock */
		S_1716_53(1716), /* $@53 */
		S_table_or_tables(1717), /* table_or_tables */
		S_table_lock_list(1718), /* table_lock_list */
		S_table_lock(1719), /* table_lock */
		S_lock_option(1720), /* lock_option */
		S_unlock(1721), /* unlock */
		S_1722_54(1722), /* $@54 */
		S_shutdown_stmt(1723), /* shutdown_stmt */
		S_restart_server_stmt(1724), /* restart_server_stmt */
		S_alter_instance_stmt(1725), /* alter_instance_stmt */
		S_alter_instance_action(1726), /* alter_instance_action */
		S_handler_stmt(1727), /* handler_stmt */
		S_handler_scan_function(1728), /* handler_scan_function */
		S_handler_rkey_function(1729), /* handler_rkey_function */
		S_handler_rkey_mode(1730), /* handler_rkey_mode */
		S_revoke(1731), /* revoke */
		S_1732_55(1732), /* $@55 */
		S_grant(1733), /* grant */
		S_1734_56(1734), /* $@56 */
		S_opt_acl_type(1735), /* opt_acl_type */
		S_opt_privileges(1736), /* opt_privileges */
		S_role_or_privilege_list(1737), /* role_or_privilege_list */
		S_role_or_privilege(1738), /* role_or_privilege */
		S_opt_with_admin_option(1739), /* opt_with_admin_option */
		S_opt_and(1740), /* opt_and */
		S_require_list(1741), /* require_list */
		S_require_list_element(1742), /* require_list_element */
		S_grant_ident(1743), /* grant_ident */
		S_user_list(1744), /* user_list */
		S_role_list(1745), /* role_list */
		S_opt_retain_current_password(1746), /* opt_retain_current_password */
		S_opt_discard_old_password(1747), /* opt_discard_old_password */
		S_opt_user_registration(1748), /* opt_user_registration */
		S_create_user(1749), /* create_user */
		S_opt_create_user_with_mfa(1750), /* opt_create_user_with_mfa */
		S_identification(1751), /* identification */
		S_identified_by_password(1752), /* identified_by_password */
		S_identified_by_random_password(1753), /* identified_by_random_password */
		S_identified_with_plugin(1754), /* identified_with_plugin */
		S_identified_with_plugin_as_auth(1755), /* identified_with_plugin_as_auth */
		S_identified_with_plugin_by_password(1756), /* identified_with_plugin_by_password */
		S_identified_with_plugin_by_random_password(1757), /* identified_with_plugin_by_random_password */
		S_opt_initial_auth(1758), /* opt_initial_auth */
		S_alter_user(1759), /* alter_user */
		S_factor(1760), /* factor */
		S_create_user_list(1761), /* create_user_list */
		S_alter_user_list(1762), /* alter_user_list */
		S_opt_column_list(1763), /* opt_column_list */
		S_column_list(1764), /* column_list */
		S_require_clause(1765), /* require_clause */
		S_grant_options(1766), /* grant_options */
		S_opt_grant_option(1767), /* opt_grant_option */
		S_opt_with_roles(1768), /* opt_with_roles */
		S_opt_grant_as(1769), /* opt_grant_as */
		S_begin_stmt(1770), /* begin_stmt */
		S_1771_57(1771), /* $@57 */
		S_opt_work(1772), /* opt_work */
		S_opt_chain(1773), /* opt_chain */
		S_opt_release(1774), /* opt_release */
		S_opt_savepoint(1775), /* opt_savepoint */
		S_commit(1776), /* commit */
		S_rollback(1777), /* rollback */
		S_savepoint(1778), /* savepoint */
		S_release(1779), /* release */
		S_union_option(1780), /* union_option */
		S_row_subquery(1781), /* row_subquery */
		S_table_subquery(1782), /* table_subquery */
		S_subquery(1783), /* subquery */
		S_query_spec_option(1784), /* query_spec_option */
		S_init_lex_create_info(1785), /* init_lex_create_info */
		S_view_or_trigger_or_sp_or_event(1786), /* view_or_trigger_or_sp_or_event */
		S_definer_tail(1787), /* definer_tail */
		S_no_definer_tail(1788), /* no_definer_tail */
		S_definer_opt(1789), /* definer_opt */
		S_no_definer(1790), /* no_definer */
		S_definer(1791), /* definer */
		S_view_replace_or_algorithm(1792), /* view_replace_or_algorithm */
		S_view_replace(1793), /* view_replace */
		S_view_algorithm(1794), /* view_algorithm */
		S_view_suid(1795), /* view_suid */
		S_view_tail(1796), /* view_tail */
		S_1797_58(1797), /* $@58 */
		S_view_query_block(1798), /* view_query_block */
		S_view_check_option(1799), /* view_check_option */
		S_trigger_action_order(1800), /* trigger_action_order */
		S_trigger_follows_precedes_clause(1801), /* trigger_follows_precedes_clause */
		S_trigger_tail(1802), /* trigger_tail */
		S_1803_59(1803), /* $@59 */
		S_udf_tail(1804), /* udf_tail */
		S_sf_tail(1805), /* sf_tail */
		S_1806_60(1806), /* $@60 */
		S_1807_61(1807), /* $@61 */
		S_1808_62(1808), /* $@62 */
		S_1809_63(1809), /* $@63 */
		S_routine_string(1810), /* routine_string */
		S_stored_routine_body(1811), /* stored_routine_body */
		S_sp_tail(1812), /* sp_tail */
		S_1813_64(1813), /* $@64 */
		S_1814_65(1814), /* $@65 */
		S_1815_66(1815), /* $@66 */
		S_1816_67(1816), /* $@67 */
		S_xa(1817), /* xa */
		S_opt_convert_xid(1818), /* opt_convert_xid */
		S_xid(1819), /* xid */
		S_begin_or_start(1820), /* begin_or_start */
		S_opt_join_or_resume(1821), /* opt_join_or_resume */
		S_opt_one_phase(1822), /* opt_one_phase */
		S_opt_suspend(1823), /* opt_suspend */
		S_install_option_type(1824), /* install_option_type */
		S_install_set_rvalue(1825), /* install_set_rvalue */
		S_install_set_value(1826), /* install_set_value */
		S_install_set_value_list(1827), /* install_set_value_list */
		S_opt_install_set_value_list(1828), /* opt_install_set_value_list */
		S_install_stmt(1829), /* install_stmt */
		S_uninstall(1830), /* uninstall */
		S_TEXT_STRING_sys_list(1831), /* TEXT_STRING_sys_list */
		S_import_stmt(1832), /* import_stmt */
		S_clone_stmt(1833), /* clone_stmt */
		S_opt_datadir_ssl(1834), /* opt_datadir_ssl */
		S_opt_ssl(1835), /* opt_ssl */
		S_resource_group_types(1836), /* resource_group_types */
		S_opt_resource_group_vcpu_list(1837), /* opt_resource_group_vcpu_list */
		S_vcpu_range_spec_list(1838), /* vcpu_range_spec_list */
		S_vcpu_num_or_range(1839), /* vcpu_num_or_range */
		S_signed_num(1840), /* signed_num */
		S_opt_resource_group_priority(1841), /* opt_resource_group_priority */
		S_opt_resource_group_enable_disable(1842), /* opt_resource_group_enable_disable */
		S_opt_force(1843), /* opt_force */
		S_json_attribute(1844); /* json_attribute */

		private final int yycode_;

		SymbolKind(int n) {
			this.yycode_ = n;
		}

		private static final SymbolKind[] values_ = { SymbolKind.S_YYEOF, SymbolKind.S_YYerror, SymbolKind.S_YYUNDEF, SymbolKind.S_ABORT_SYM, SymbolKind.S_ACCESSIBLE_SYM, SymbolKind.S_ACCOUNT_SYM,
				SymbolKind.S_ACTION, SymbolKind.S_ADD, SymbolKind.S_ADDDATE_SYM, SymbolKind.S_AFTER_SYM, SymbolKind.S_AGAINST, SymbolKind.S_AGGREGATE_SYM, SymbolKind.S_ALGORITHM_SYM, SymbolKind.S_ALL,
				SymbolKind.S_ALTER, SymbolKind.S_ALWAYS_SYM, SymbolKind.S_OBSOLETE_TOKEN_271, SymbolKind.S_ANALYZE_SYM, SymbolKind.S_AND_AND_SYM, SymbolKind.S_AND_SYM, SymbolKind.S_ANY_SYM,
				SymbolKind.S_AS, SymbolKind.S_ASC, SymbolKind.S_ASCII_SYM, SymbolKind.S_ASENSITIVE_SYM, SymbolKind.S_AT_SYM, SymbolKind.S_AUTOEXTEND_SIZE_SYM, SymbolKind.S_AUTO_INC,
				SymbolKind.S_AVG_ROW_LENGTH, SymbolKind.S_AVG_SYM, SymbolKind.S_BACKUP_SYM, SymbolKind.S_BEFORE_SYM, SymbolKind.S_BEGIN_SYM, SymbolKind.S_BETWEEN_SYM, SymbolKind.S_BIGINT_SYM,
				SymbolKind.S_BINARY_SYM, SymbolKind.S_BINLOG_SYM, SymbolKind.S_BIN_NUM, SymbolKind.S_BIT_AND_SYM, SymbolKind.S_BIT_OR_SYM, SymbolKind.S_BIT_SYM, SymbolKind.S_BIT_XOR_SYM,
				SymbolKind.S_BLOB_SYM, SymbolKind.S_BLOCK_SYM, SymbolKind.S_BOOLEAN_SYM, SymbolKind.S_BOOL_SYM, SymbolKind.S_BOTH, SymbolKind.S_BTREE_SYM, SymbolKind.S_BY, SymbolKind.S_BYTE_SYM,
				SymbolKind.S_CACHE_SYM, SymbolKind.S_CALL_SYM, SymbolKind.S_CASCADE, SymbolKind.S_CASCADED, SymbolKind.S_CASE_SYM, SymbolKind.S_CAST_SYM, SymbolKind.S_CATALOG_NAME_SYM,
				SymbolKind.S_CHAIN_SYM, SymbolKind.S_CHANGE, SymbolKind.S_CHANGED, SymbolKind.S_CHANNEL_SYM, SymbolKind.S_CHARSET, SymbolKind.S_CHAR_SYM, SymbolKind.S_CHECKSUM_SYM,
				SymbolKind.S_CHECK_SYM, SymbolKind.S_CIPHER_SYM, SymbolKind.S_CLASS_ORIGIN_SYM, SymbolKind.S_CLIENT_SYM, SymbolKind.S_CLOSE_SYM, SymbolKind.S_COALESCE, SymbolKind.S_CODE_SYM,
				SymbolKind.S_COLLATE_SYM, SymbolKind.S_COLLATION_SYM, SymbolKind.S_COLUMNS, SymbolKind.S_COLUMN_SYM, SymbolKind.S_COLUMN_FORMAT_SYM, SymbolKind.S_COLUMN_NAME_SYM,
				SymbolKind.S_COMMENT_SYM, SymbolKind.S_COMMITTED_SYM, SymbolKind.S_COMMIT_SYM, SymbolKind.S_COMPACT_SYM, SymbolKind.S_COMPLETION_SYM, SymbolKind.S_COMPRESSED_SYM,
				SymbolKind.S_COMPRESSION_SYM, SymbolKind.S_ENCRYPTION_SYM, SymbolKind.S_CONCURRENT, SymbolKind.S_CONDITION_SYM, SymbolKind.S_CONNECTION_SYM, SymbolKind.S_CONSISTENT_SYM,
				SymbolKind.S_CONSTRAINT, SymbolKind.S_CONSTRAINT_CATALOG_SYM, SymbolKind.S_CONSTRAINT_NAME_SYM, SymbolKind.S_CONSTRAINT_SCHEMA_SYM, SymbolKind.S_CONTAINS_SYM, SymbolKind.S_CONTEXT_SYM,
				SymbolKind.S_CONTINUE_SYM, SymbolKind.S_CONVERT_SYM, SymbolKind.S_COUNT_SYM, SymbolKind.S_CPU_SYM, SymbolKind.S_CREATE, SymbolKind.S_CROSS, SymbolKind.S_CUBE_SYM, SymbolKind.S_CURDATE,
				SymbolKind.S_CURRENT_SYM, SymbolKind.S_CURRENT_USER, SymbolKind.S_CURSOR_SYM, SymbolKind.S_CURSOR_NAME_SYM, SymbolKind.S_CURTIME, SymbolKind.S_DATABASE, SymbolKind.S_DATABASES,
				SymbolKind.S_DATAFILE_SYM, SymbolKind.S_DATA_SYM, SymbolKind.S_DATETIME_SYM, SymbolKind.S_DATE_ADD_INTERVAL, SymbolKind.S_DATE_SUB_INTERVAL, SymbolKind.S_DATE_SYM,
				SymbolKind.S_DAY_HOUR_SYM, SymbolKind.S_DAY_MICROSECOND_SYM, SymbolKind.S_DAY_MINUTE_SYM, SymbolKind.S_DAY_SECOND_SYM, SymbolKind.S_DAY_SYM, SymbolKind.S_DEALLOCATE_SYM,
				SymbolKind.S_DECIMAL_NUM, SymbolKind.S_DECIMAL_SYM, SymbolKind.S_DECLARE_SYM, SymbolKind.S_DEFAULT_SYM, SymbolKind.S_DEFAULT_AUTH_SYM, SymbolKind.S_DEFINER_SYM,
				SymbolKind.S_DELAYED_SYM, SymbolKind.S_DELAY_KEY_WRITE_SYM, SymbolKind.S_DELETE_SYM, SymbolKind.S_DESC, SymbolKind.S_DESCRIBE, SymbolKind.S_OBSOLETE_TOKEN_388,
				SymbolKind.S_DETERMINISTIC_SYM, SymbolKind.S_DIAGNOSTICS_SYM, SymbolKind.S_DIRECTORY_SYM, SymbolKind.S_DISABLE_SYM, SymbolKind.S_DISCARD_SYM, SymbolKind.S_DISK_SYM,
				SymbolKind.S_DISTINCT, SymbolKind.S_DIV_SYM, SymbolKind.S_DOUBLE_SYM, SymbolKind.S_DO_SYM, SymbolKind.S_DROP, SymbolKind.S_DUAL_SYM, SymbolKind.S_DUMPFILE, SymbolKind.S_DUPLICATE_SYM,
				SymbolKind.S_DYNAMIC_SYM, SymbolKind.S_EACH_SYM, SymbolKind.S_ELSE, SymbolKind.S_ELSEIF_SYM, SymbolKind.S_ENABLE_SYM, SymbolKind.S_ENCLOSED, SymbolKind.S_END, SymbolKind.S_ENDS_SYM,
				SymbolKind.S_END_OF_INPUT, SymbolKind.S_ENGINES_SYM, SymbolKind.S_ENGINE_SYM, SymbolKind.S_ENUM_SYM, SymbolKind.S_EQ, SymbolKind.S_EQUAL_SYM, SymbolKind.S_ERROR_SYM,
				SymbolKind.S_ERRORS, SymbolKind.S_ESCAPED, SymbolKind.S_ESCAPE_SYM, SymbolKind.S_EVENTS_SYM, SymbolKind.S_EVENT_SYM, SymbolKind.S_EVERY_SYM, SymbolKind.S_EXCHANGE_SYM,
				SymbolKind.S_EXECUTE_SYM, SymbolKind.S_EXISTS, SymbolKind.S_EXIT_SYM, SymbolKind.S_EXPANSION_SYM, SymbolKind.S_EXPIRE_SYM, SymbolKind.S_EXPORT_SYM, SymbolKind.S_EXTENDED_SYM,
				SymbolKind.S_EXTENT_SIZE_SYM, SymbolKind.S_EXTRACT_SYM, SymbolKind.S_FALSE_SYM, SymbolKind.S_FAST_SYM, SymbolKind.S_FAULTS_SYM, SymbolKind.S_FETCH_SYM, SymbolKind.S_FILE_SYM,
				SymbolKind.S_FILE_BLOCK_SIZE_SYM, SymbolKind.S_FILTER_SYM, SymbolKind.S_FIRST_SYM, SymbolKind.S_FIXED_SYM, SymbolKind.S_FLOAT_NUM, SymbolKind.S_FLOAT_SYM, SymbolKind.S_FLUSH_SYM,
				SymbolKind.S_FOLLOWS_SYM, SymbolKind.S_FORCE_SYM, SymbolKind.S_FOREIGN, SymbolKind.S_FOR_SYM, SymbolKind.S_FORMAT_SYM, SymbolKind.S_FOUND_SYM, SymbolKind.S_FROM, SymbolKind.S_FULL,
				SymbolKind.S_FULLTEXT_SYM, SymbolKind.S_FUNCTION_SYM, SymbolKind.S_GE, SymbolKind.S_GENERAL, SymbolKind.S_GENERATED, SymbolKind.S_GROUP_REPLICATION,
				SymbolKind.S_GEOMETRYCOLLECTION_SYM, SymbolKind.S_GEOMETRY_SYM, SymbolKind.S_GET_FORMAT, SymbolKind.S_GET_SYM, SymbolKind.S_GLOBAL_SYM, SymbolKind.S_GRANT, SymbolKind.S_GRANTS,
				SymbolKind.S_GROUP_SYM, SymbolKind.S_GROUP_CONCAT_SYM, SymbolKind.S_GT_SYM, SymbolKind.S_HANDLER_SYM, SymbolKind.S_HASH_SYM, SymbolKind.S_HAVING, SymbolKind.S_HELP_SYM,
				SymbolKind.S_HEX_NUM, SymbolKind.S_HIGH_PRIORITY, SymbolKind.S_HOST_SYM, SymbolKind.S_HOSTS_SYM, SymbolKind.S_HOUR_MICROSECOND_SYM, SymbolKind.S_HOUR_MINUTE_SYM,
				SymbolKind.S_HOUR_SECOND_SYM, SymbolKind.S_HOUR_SYM, SymbolKind.S_IDENT, SymbolKind.S_IDENTIFIED_SYM, SymbolKind.S_IDENT_QUOTED, SymbolKind.S_IF, SymbolKind.S_IGNORE_SYM,
				SymbolKind.S_IGNORE_SERVER_IDS_SYM, SymbolKind.S_IMPORT, SymbolKind.S_INDEXES, SymbolKind.S_INDEX_SYM, SymbolKind.S_INFILE_SYM, SymbolKind.S_INITIAL_SIZE_SYM, SymbolKind.S_INNER_SYM,
				SymbolKind.S_INOUT_SYM, SymbolKind.S_INSENSITIVE_SYM, SymbolKind.S_INSERT_SYM, SymbolKind.S_INSERT_METHOD, SymbolKind.S_INSTANCE_SYM, SymbolKind.S_INSTALL_SYM,
				SymbolKind.S_INTERVAL_SYM, SymbolKind.S_INTO, SymbolKind.S_INT_SYM, SymbolKind.S_INVOKER_SYM, SymbolKind.S_IN_SYM, SymbolKind.S_IO_AFTER_GTIDS, SymbolKind.S_IO_BEFORE_GTIDS,
				SymbolKind.S_IO_SYM, SymbolKind.S_IPC_SYM, SymbolKind.S_IS, SymbolKind.S_ISOLATION, SymbolKind.S_ISSUER_SYM, SymbolKind.S_ITERATE_SYM, SymbolKind.S_JOIN_SYM,
				SymbolKind.S_JSON_SEPARATOR_SYM, SymbolKind.S_JSON_SYM, SymbolKind.S_KEYS, SymbolKind.S_KEY_BLOCK_SIZE, SymbolKind.S_KEY_SYM, SymbolKind.S_KILL_SYM, SymbolKind.S_LANGUAGE_SYM,
				SymbolKind.S_LAST_SYM, SymbolKind.S_LE, SymbolKind.S_LEADING, SymbolKind.S_LEAVES, SymbolKind.S_LEAVE_SYM, SymbolKind.S_LEFT, SymbolKind.S_LESS_SYM, SymbolKind.S_LEVEL_SYM,
				SymbolKind.S_LEX_HOSTNAME, SymbolKind.S_LIKE, SymbolKind.S_LIMIT, SymbolKind.S_LINEAR_SYM, SymbolKind.S_LINES, SymbolKind.S_LINESTRING_SYM, SymbolKind.S_LIST_SYM, SymbolKind.S_LOAD,
				SymbolKind.S_LOCAL_SYM, SymbolKind.S_OBSOLETE_TOKEN_538, SymbolKind.S_LOCKS_SYM, SymbolKind.S_LOCK_SYM, SymbolKind.S_LOGFILE_SYM, SymbolKind.S_LOGS_SYM, SymbolKind.S_LONGBLOB_SYM,
				SymbolKind.S_LONGTEXT_SYM, SymbolKind.S_LONG_NUM, SymbolKind.S_LONG_SYM, SymbolKind.S_LOOP_SYM, SymbolKind.S_LOW_PRIORITY, SymbolKind.S_LT, SymbolKind.S_OBSOLETE_TOKEN_550,
				SymbolKind.S_OBSOLETE_TOKEN_551, SymbolKind.S_OBSOLETE_TOKEN_552, SymbolKind.S_OBSOLETE_TOKEN_553, SymbolKind.S_OBSOLETE_TOKEN_554, SymbolKind.S_OBSOLETE_TOKEN_555,
				SymbolKind.S_OBSOLETE_TOKEN_556, SymbolKind.S_OBSOLETE_TOKEN_557, SymbolKind.S_OBSOLETE_TOKEN_558, SymbolKind.S_OBSOLETE_TOKEN_559, SymbolKind.S_OBSOLETE_TOKEN_561,
				SymbolKind.S_OBSOLETE_TOKEN_562, SymbolKind.S_OBSOLETE_TOKEN_563, SymbolKind.S_OBSOLETE_TOKEN_564, SymbolKind.S_OBSOLETE_TOKEN_565, SymbolKind.S_OBSOLETE_TOKEN_566,
				SymbolKind.S_OBSOLETE_TOKEN_567, SymbolKind.S_OBSOLETE_TOKEN_568, SymbolKind.S_OBSOLETE_TOKEN_569, SymbolKind.S_OBSOLETE_TOKEN_570, SymbolKind.S_MASTER_SYM,
				SymbolKind.S_OBSOLETE_TOKEN_572, SymbolKind.S_OBSOLETE_TOKEN_573, SymbolKind.S_MATCH, SymbolKind.S_MAX_CONNECTIONS_PER_HOUR, SymbolKind.S_MAX_QUERIES_PER_HOUR, SymbolKind.S_MAX_ROWS,
				SymbolKind.S_MAX_SIZE_SYM, SymbolKind.S_MAX_SYM, SymbolKind.S_MAX_UPDATES_PER_HOUR, SymbolKind.S_MAX_USER_CONNECTIONS_SYM, SymbolKind.S_MAX_VALUE_SYM, SymbolKind.S_MEDIUMBLOB_SYM,
				SymbolKind.S_MEDIUMINT_SYM, SymbolKind.S_MEDIUMTEXT_SYM, SymbolKind.S_MEDIUM_SYM, SymbolKind.S_MEMORY_SYM, SymbolKind.S_MERGE_SYM, SymbolKind.S_MESSAGE_TEXT_SYM,
				SymbolKind.S_MICROSECOND_SYM, SymbolKind.S_MIGRATE_SYM, SymbolKind.S_MINUTE_MICROSECOND_SYM, SymbolKind.S_MINUTE_SECOND_SYM, SymbolKind.S_MINUTE_SYM, SymbolKind.S_MIN_ROWS,
				SymbolKind.S_MIN_SYM, SymbolKind.S_MODE_SYM, SymbolKind.S_MODIFIES_SYM, SymbolKind.S_MODIFY_SYM, SymbolKind.S_MOD_SYM, SymbolKind.S_MONTH_SYM, SymbolKind.S_MULTILINESTRING_SYM,
				SymbolKind.S_MULTIPOINT_SYM, SymbolKind.S_MULTIPOLYGON_SYM, SymbolKind.S_MUTEX_SYM, SymbolKind.S_MYSQL_ERRNO_SYM, SymbolKind.S_NAMES_SYM, SymbolKind.S_NAME_SYM,
				SymbolKind.S_NATIONAL_SYM, SymbolKind.S_NATURAL, SymbolKind.S_NCHAR_STRING, SymbolKind.S_NCHAR_SYM, SymbolKind.S_NDBCLUSTER_SYM, SymbolKind.S_NE, SymbolKind.S_NEG,
				SymbolKind.S_NEVER_SYM, SymbolKind.S_NEW_SYM, SymbolKind.S_NEXT_SYM, SymbolKind.S_NODEGROUP_SYM, SymbolKind.S_NONE_SYM, SymbolKind.S_NOT2_SYM, SymbolKind.S_NOT_SYM,
				SymbolKind.S_NOW_SYM, SymbolKind.S_NO_SYM, SymbolKind.S_NO_WAIT_SYM, SymbolKind.S_NO_WRITE_TO_BINLOG, SymbolKind.S_NULL_SYM, SymbolKind.S_NUM, SymbolKind.S_NUMBER_SYM,
				SymbolKind.S_NUMERIC_SYM, SymbolKind.S_NVARCHAR_SYM, SymbolKind.S_OFFSET_SYM, SymbolKind.S_ON_SYM, SymbolKind.S_ONE_SYM, SymbolKind.S_ONLY_SYM, SymbolKind.S_OPEN_SYM,
				SymbolKind.S_OPTIMIZE, SymbolKind.S_OPTIMIZER_COSTS_SYM, SymbolKind.S_OPTIONS_SYM, SymbolKind.S_OPTION, SymbolKind.S_OPTIONALLY, SymbolKind.S_OR2_SYM, SymbolKind.S_ORDER_SYM,
				SymbolKind.S_OR_OR_SYM, SymbolKind.S_OR_SYM, SymbolKind.S_OUTER_SYM, SymbolKind.S_OUTFILE, SymbolKind.S_OUT_SYM, SymbolKind.S_OWNER_SYM, SymbolKind.S_PACK_KEYS_SYM,
				SymbolKind.S_PAGE_SYM, SymbolKind.S_PARAM_MARKER, SymbolKind.S_PARSER_SYM, SymbolKind.S_OBSOLETE_TOKEN_654, SymbolKind.S_PARTIAL, SymbolKind.S_PARTITION_SYM,
				SymbolKind.S_PARTITIONS_SYM, SymbolKind.S_PARTITIONING_SYM, SymbolKind.S_PASSWORD, SymbolKind.S_PHASE_SYM, SymbolKind.S_PLUGIN_DIR_SYM, SymbolKind.S_PLUGIN_SYM,
				SymbolKind.S_PLUGINS_SYM, SymbolKind.S_POINT_SYM, SymbolKind.S_POLYGON_SYM, SymbolKind.S_PORT_SYM, SymbolKind.S_POSITION_SYM, SymbolKind.S_PRECEDES_SYM, SymbolKind.S_PRECISION,
				SymbolKind.S_PREPARE_SYM, SymbolKind.S_PRESERVE_SYM, SymbolKind.S_PREV_SYM, SymbolKind.S_PRIMARY_SYM, SymbolKind.S_PRIVILEGES, SymbolKind.S_PROCEDURE_SYM, SymbolKind.S_PROCESS,
				SymbolKind.S_PROCESSLIST_SYM, SymbolKind.S_PROFILE_SYM, SymbolKind.S_PROFILES_SYM, SymbolKind.S_PROXY_SYM, SymbolKind.S_PURGE, SymbolKind.S_QUARTER_SYM, SymbolKind.S_QUERY_SYM,
				SymbolKind.S_QUICK, SymbolKind.S_RANGE_SYM, SymbolKind.S_READS_SYM, SymbolKind.S_READ_ONLY_SYM, SymbolKind.S_READ_SYM, SymbolKind.S_READ_WRITE_SYM, SymbolKind.S_REAL_SYM,
				SymbolKind.S_REBUILD_SYM, SymbolKind.S_RECOVER_SYM, SymbolKind.S_OBSOLETE_TOKEN_693, SymbolKind.S_REDO_BUFFER_SIZE_SYM, SymbolKind.S_REDUNDANT_SYM, SymbolKind.S_REFERENCES,
				SymbolKind.S_REGEXP, SymbolKind.S_RELAY, SymbolKind.S_RELAYLOG_SYM, SymbolKind.S_RELAY_LOG_FILE_SYM, SymbolKind.S_RELAY_LOG_POS_SYM, SymbolKind.S_RELAY_THREAD,
				SymbolKind.S_RELEASE_SYM, SymbolKind.S_RELOAD, SymbolKind.S_REMOVE_SYM, SymbolKind.S_RENAME, SymbolKind.S_REORGANIZE_SYM, SymbolKind.S_REPAIR, SymbolKind.S_REPEATABLE_SYM,
				SymbolKind.S_REPEAT_SYM, SymbolKind.S_REPLACE_SYM, SymbolKind.S_REPLICATION, SymbolKind.S_REPLICATE_DO_DB, SymbolKind.S_REPLICATE_IGNORE_DB, SymbolKind.S_REPLICATE_DO_TABLE,
				SymbolKind.S_REPLICATE_IGNORE_TABLE, SymbolKind.S_REPLICATE_WILD_DO_TABLE, SymbolKind.S_REPLICATE_WILD_IGNORE_TABLE, SymbolKind.S_REPLICATE_REWRITE_DB, SymbolKind.S_REQUIRE_SYM,
				SymbolKind.S_RESET_SYM, SymbolKind.S_RESIGNAL_SYM, SymbolKind.S_RESOURCES, SymbolKind.S_RESTORE_SYM, SymbolKind.S_RESTRICT, SymbolKind.S_RESUME_SYM, SymbolKind.S_RETURNED_SQLSTATE_SYM,
				SymbolKind.S_RETURNS_SYM, SymbolKind.S_RETURN_SYM, SymbolKind.S_REVERSE_SYM, SymbolKind.S_REVOKE, SymbolKind.S_RIGHT, SymbolKind.S_ROLLBACK_SYM, SymbolKind.S_ROLLUP_SYM,
				SymbolKind.S_ROTATE_SYM, SymbolKind.S_ROUTINE_SYM, SymbolKind.S_ROWS_SYM, SymbolKind.S_ROW_FORMAT_SYM, SymbolKind.S_ROW_SYM, SymbolKind.S_ROW_COUNT_SYM, SymbolKind.S_RTREE_SYM,
				SymbolKind.S_SAVEPOINT_SYM, SymbolKind.S_SCHEDULE_SYM, SymbolKind.S_SCHEMA_NAME_SYM, SymbolKind.S_SECOND_MICROSECOND_SYM, SymbolKind.S_SECOND_SYM, SymbolKind.S_SECURITY_SYM,
				SymbolKind.S_SELECT_SYM, SymbolKind.S_SENSITIVE_SYM, SymbolKind.S_SEPARATOR_SYM, SymbolKind.S_SERIALIZABLE_SYM, SymbolKind.S_SERIAL_SYM, SymbolKind.S_SESSION_SYM,
				SymbolKind.S_SERVER_SYM, SymbolKind.S_OBSOLETE_TOKEN_755, SymbolKind.S_SET_SYM, SymbolKind.S_SET_VAR, SymbolKind.S_SHARE_SYM, SymbolKind.S_SHIFT_LEFT, SymbolKind.S_SHIFT_RIGHT,
				SymbolKind.S_SHOW, SymbolKind.S_SHUTDOWN, SymbolKind.S_SIGNAL_SYM, SymbolKind.S_SIGNED_SYM, SymbolKind.S_SIMPLE_SYM, SymbolKind.S_SLAVE, SymbolKind.S_SLOW, SymbolKind.S_SMALLINT_SYM,
				SymbolKind.S_SNAPSHOT_SYM, SymbolKind.S_SOCKET_SYM, SymbolKind.S_SONAME_SYM, SymbolKind.S_SOUNDS_SYM, SymbolKind.S_SOURCE_SYM, SymbolKind.S_SPATIAL_SYM, SymbolKind.S_SPECIFIC_SYM,
				SymbolKind.S_SQLEXCEPTION_SYM, SymbolKind.S_SQLSTATE_SYM, SymbolKind.S_SQLWARNING_SYM, SymbolKind.S_SQL_AFTER_GTIDS, SymbolKind.S_SQL_AFTER_MTS_GAPS, SymbolKind.S_SQL_BEFORE_GTIDS,
				SymbolKind.S_SQL_BIG_RESULT, SymbolKind.S_SQL_BUFFER_RESULT, SymbolKind.S_OBSOLETE_TOKEN_784, SymbolKind.S_SQL_CALC_FOUND_ROWS, SymbolKind.S_SQL_NO_CACHE_SYM,
				SymbolKind.S_SQL_SMALL_RESULT, SymbolKind.S_SQL_SYM, SymbolKind.S_SQL_THREAD, SymbolKind.S_SSL_SYM, SymbolKind.S_STACKED_SYM, SymbolKind.S_STARTING, SymbolKind.S_STARTS_SYM,
				SymbolKind.S_START_SYM, SymbolKind.S_STATS_AUTO_RECALC_SYM, SymbolKind.S_STATS_PERSISTENT_SYM, SymbolKind.S_STATS_SAMPLE_PAGES_SYM, SymbolKind.S_STATUS_SYM,
				SymbolKind.S_STDDEV_SAMP_SYM, SymbolKind.S_STD_SYM, SymbolKind.S_STOP_SYM, SymbolKind.S_STORAGE_SYM, SymbolKind.S_STORED_SYM, SymbolKind.S_STRAIGHT_JOIN, SymbolKind.S_STRING_SYM,
				SymbolKind.S_SUBCLASS_ORIGIN_SYM, SymbolKind.S_SUBDATE_SYM, SymbolKind.S_SUBJECT_SYM, SymbolKind.S_SUBPARTITIONS_SYM, SymbolKind.S_SUBPARTITION_SYM, SymbolKind.S_SUBSTRING,
				SymbolKind.S_SUM_SYM, SymbolKind.S_SUPER_SYM, SymbolKind.S_SUSPEND_SYM, SymbolKind.S_SWAPS_SYM, SymbolKind.S_SWITCHES_SYM, SymbolKind.S_SYSDATE, SymbolKind.S_TABLES,
				SymbolKind.S_TABLESPACE_SYM, SymbolKind.S_OBSOLETE_TOKEN_820, SymbolKind.S_TABLE_SYM, SymbolKind.S_TABLE_CHECKSUM_SYM, SymbolKind.S_TABLE_NAME_SYM, SymbolKind.S_TEMPORARY,
				SymbolKind.S_TEMPTABLE_SYM, SymbolKind.S_TERMINATED, SymbolKind.S_TEXT_STRING, SymbolKind.S_TEXT_SYM, SymbolKind.S_THAN_SYM, SymbolKind.S_THEN_SYM, SymbolKind.S_TIMESTAMP_SYM,
				SymbolKind.S_TIMESTAMP_ADD, SymbolKind.S_TIMESTAMP_DIFF, SymbolKind.S_TIME_SYM, SymbolKind.S_TINYBLOB_SYM, SymbolKind.S_TINYINT_SYM, SymbolKind.S_TINYTEXT_SYN, SymbolKind.S_TO_SYM,
				SymbolKind.S_TRAILING, SymbolKind.S_TRANSACTION_SYM, SymbolKind.S_TRIGGERS_SYM, SymbolKind.S_TRIGGER_SYM, SymbolKind.S_TRIM, SymbolKind.S_TRUE_SYM, SymbolKind.S_TRUNCATE_SYM,
				SymbolKind.S_TYPES_SYM, SymbolKind.S_TYPE_SYM, SymbolKind.S_OBSOLETE_TOKEN_848, SymbolKind.S_ULONGLONG_NUM, SymbolKind.S_UNCOMMITTED_SYM, SymbolKind.S_UNDEFINED_SYM,
				SymbolKind.S_UNDERSCORE_CHARSET, SymbolKind.S_UNDOFILE_SYM, SymbolKind.S_UNDO_BUFFER_SIZE_SYM, SymbolKind.S_UNDO_SYM, SymbolKind.S_UNICODE_SYM, SymbolKind.S_UNINSTALL_SYM,
				SymbolKind.S_UNION_SYM, SymbolKind.S_UNIQUE_SYM, SymbolKind.S_UNKNOWN_SYM, SymbolKind.S_UNLOCK_SYM, SymbolKind.S_UNSIGNED_SYM, SymbolKind.S_UNTIL_SYM, SymbolKind.S_UPDATE_SYM,
				SymbolKind.S_UPGRADE_SYM, SymbolKind.S_USAGE, SymbolKind.S_USER, SymbolKind.S_USE_FRM, SymbolKind.S_USE_SYM, SymbolKind.S_USING, SymbolKind.S_UTC_DATE_SYM,
				SymbolKind.S_UTC_TIMESTAMP_SYM, SymbolKind.S_UTC_TIME_SYM, SymbolKind.S_VALIDATION_SYM, SymbolKind.S_VALUES, SymbolKind.S_VALUE_SYM, SymbolKind.S_VARBINARY_SYM,
				SymbolKind.S_VARCHAR_SYM, SymbolKind.S_VARIABLES, SymbolKind.S_VARIANCE_SYM, SymbolKind.S_VARYING, SymbolKind.S_VAR_SAMP_SYM, SymbolKind.S_VIEW_SYM, SymbolKind.S_VIRTUAL_SYM,
				SymbolKind.S_WAIT_SYM, SymbolKind.S_WARNINGS, SymbolKind.S_WEEK_SYM, SymbolKind.S_WEIGHT_STRING_SYM, SymbolKind.S_WHEN_SYM, SymbolKind.S_WHERE, SymbolKind.S_WHILE_SYM,
				SymbolKind.S_WITH, SymbolKind.S_OBSOLETE_TOKEN_893, SymbolKind.S_WITH_ROLLUP_SYM, SymbolKind.S_WITHOUT_SYM, SymbolKind.S_WORK_SYM, SymbolKind.S_WRAPPER_SYM, SymbolKind.S_WRITE_SYM,
				SymbolKind.S_X509_SYM, SymbolKind.S_XA_SYM, SymbolKind.S_XID_SYM, SymbolKind.S_XML_SYM, SymbolKind.S_XOR, SymbolKind.S_YEAR_MONTH_SYM, SymbolKind.S_YEAR_SYM, SymbolKind.S_ZEROFILL_SYM,
				SymbolKind.S_JSON_UNQUOTED_SEPARATOR_SYM, SymbolKind.S_PERSIST_SYM, SymbolKind.S_ROLE_SYM, SymbolKind.S_ADMIN_SYM, SymbolKind.S_INVISIBLE_SYM, SymbolKind.S_VISIBLE_SYM,
				SymbolKind.S_EXCEPT_SYM, SymbolKind.S_COMPONENT_SYM, SymbolKind.S_RECURSIVE_SYM, SymbolKind.S_GRAMMAR_SELECTOR_EXPR, SymbolKind.S_GRAMMAR_SELECTOR_GCOL,
				SymbolKind.S_GRAMMAR_SELECTOR_PART, SymbolKind.S_GRAMMAR_SELECTOR_CTE, SymbolKind.S_JSON_OBJECTAGG, SymbolKind.S_JSON_ARRAYAGG, SymbolKind.S_OF_SYM, SymbolKind.S_SKIP_SYM,
				SymbolKind.S_LOCKED_SYM, SymbolKind.S_NOWAIT_SYM, SymbolKind.S_GROUPING_SYM, SymbolKind.S_PERSIST_ONLY_SYM, SymbolKind.S_HISTOGRAM_SYM, SymbolKind.S_BUCKETS_SYM,
				SymbolKind.S_OBSOLETE_TOKEN_930, SymbolKind.S_CLONE_SYM, SymbolKind.S_CUME_DIST_SYM, SymbolKind.S_DENSE_RANK_SYM, SymbolKind.S_EXCLUDE_SYM, SymbolKind.S_FIRST_VALUE_SYM,
				SymbolKind.S_FOLLOWING_SYM, SymbolKind.S_GROUPS_SYM, SymbolKind.S_LAG_SYM, SymbolKind.S_LAST_VALUE_SYM, SymbolKind.S_LEAD_SYM, SymbolKind.S_NTH_VALUE_SYM, SymbolKind.S_NTILE_SYM,
				SymbolKind.S_NULLS_SYM, SymbolKind.S_OTHERS_SYM, SymbolKind.S_OVER_SYM, SymbolKind.S_PERCENT_RANK_SYM, SymbolKind.S_PRECEDING_SYM, SymbolKind.S_RANK_SYM, SymbolKind.S_RESPECT_SYM,
				SymbolKind.S_ROW_NUMBER_SYM, SymbolKind.S_TIES_SYM, SymbolKind.S_UNBOUNDED_SYM, SymbolKind.S_WINDOW_SYM, SymbolKind.S_EMPTY_SYM, SymbolKind.S_JSON_TABLE_SYM, SymbolKind.S_NESTED_SYM,
				SymbolKind.S_ORDINALITY_SYM, SymbolKind.S_PATH_SYM, SymbolKind.S_HISTORY_SYM, SymbolKind.S_REUSE_SYM, SymbolKind.S_SRID_SYM, SymbolKind.S_THREAD_PRIORITY_SYM,
				SymbolKind.S_RESOURCE_SYM, SymbolKind.S_SYSTEM_SYM, SymbolKind.S_VCPU_SYM, SymbolKind.S_OBSOLETE_TOKEN_966, SymbolKind.S_OBSOLETE_TOKEN_967, SymbolKind.S_RESTART_SYM,
				SymbolKind.S_DEFINITION_SYM, SymbolKind.S_DESCRIPTION_SYM, SymbolKind.S_ORGANIZATION_SYM, SymbolKind.S_REFERENCE_SYM, SymbolKind.S_ACTIVE_SYM, SymbolKind.S_INACTIVE_SYM,
				SymbolKind.S_LATERAL_SYM, SymbolKind.S_ARRAY_SYM, SymbolKind.S_MEMBER_SYM, SymbolKind.S_OPTIONAL_SYM, SymbolKind.S_SECONDARY_SYM, SymbolKind.S_SECONDARY_ENGINE_SYM,
				SymbolKind.S_SECONDARY_LOAD_SYM, SymbolKind.S_SECONDARY_UNLOAD_SYM, SymbolKind.S_RETAIN_SYM, SymbolKind.S_OLD_SYM, SymbolKind.S_ENFORCED_SYM, SymbolKind.S_OJ_SYM,
				SymbolKind.S_NETWORK_NAMESPACE_SYM, SymbolKind.S_RANDOM_SYM, SymbolKind.S_OBSOLETE_TOKEN_989, SymbolKind.S_OBSOLETE_TOKEN_990, SymbolKind.S_PRIVILEGE_CHECKS_USER_SYM,
				SymbolKind.S_OBSOLETE_TOKEN_992, SymbolKind.S_REQUIRE_ROW_FORMAT_SYM, SymbolKind.S_PASSWORD_LOCK_TIME_SYM, SymbolKind.S_FAILED_LOGIN_ATTEMPTS_SYM,
				SymbolKind.S_REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYM, SymbolKind.S_STREAM_SYM, SymbolKind.S_OFF_SYM, SymbolKind.S_RETURNING_SYM, SymbolKind.S_JSON_VALUE_SYM, SymbolKind.S_TLS_SYM,
				SymbolKind.S_ATTRIBUTE_SYM, SymbolKind.S_ENGINE_ATTRIBUTE_SYM, SymbolKind.S_SECONDARY_ENGINE_ATTRIBUTE_SYM, SymbolKind.S_SOURCE_CONNECTION_AUTO_FAILOVER_SYM, SymbolKind.S_ZONE_SYM,
				SymbolKind.S_GRAMMAR_SELECTOR_DERIVED_EXPR, SymbolKind.S_REPLICA_SYM, SymbolKind.S_REPLICAS_SYM, SymbolKind.S_ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYM,
				SymbolKind.S_GET_SOURCE_PUBLIC_KEY_SYM, SymbolKind.S_SOURCE_AUTO_POSITION_SYM, SymbolKind.S_SOURCE_BIND_SYM, SymbolKind.S_SOURCE_COMPRESSION_ALGORITHM_SYM,
				SymbolKind.S_SOURCE_CONNECT_RETRY_SYM, SymbolKind.S_SOURCE_DELAY_SYM, SymbolKind.S_SOURCE_HEARTBEAT_PERIOD_SYM, SymbolKind.S_SOURCE_HOST_SYM, SymbolKind.S_SOURCE_LOG_FILE_SYM,
				SymbolKind.S_SOURCE_LOG_POS_SYM, SymbolKind.S_SOURCE_PASSWORD_SYM, SymbolKind.S_SOURCE_PORT_SYM, SymbolKind.S_SOURCE_PUBLIC_KEY_PATH_SYM, SymbolKind.S_SOURCE_RETRY_COUNT_SYM,
				SymbolKind.S_SOURCE_SSL_SYM, SymbolKind.S_SOURCE_SSL_CA_SYM, SymbolKind.S_SOURCE_SSL_CAPATH_SYM, SymbolKind.S_SOURCE_SSL_CERT_SYM, SymbolKind.S_SOURCE_SSL_CIPHER_SYM,
				SymbolKind.S_SOURCE_SSL_CRL_SYM, SymbolKind.S_SOURCE_SSL_CRLPATH_SYM, SymbolKind.S_SOURCE_SSL_KEY_SYM, SymbolKind.S_SOURCE_SSL_VERIFY_SERVER_CERT_SYM,
				SymbolKind.S_SOURCE_TLS_CIPHERSUITES_SYM, SymbolKind.S_SOURCE_TLS_VERSION_SYM, SymbolKind.S_SOURCE_USER_SYM, SymbolKind.S_SOURCE_ZSTD_COMPRESSION_LEVEL_SYM,
				SymbolKind.S_ST_COLLECT_SYM, SymbolKind.S_KEYRING_SYM, SymbolKind.S_AUTHENTICATION_SYM, SymbolKind.S_FACTOR_SYM, SymbolKind.S_FINISH_SYM, SymbolKind.S_INITIATE_SYM,
				SymbolKind.S_REGISTRATION_SYM, SymbolKind.S_UNREGISTER_SYM, SymbolKind.S_INITIAL_SYM, SymbolKind.S_CHALLENGE_RESPONSE_SYM, SymbolKind.S_GTID_ONLY_SYM, SymbolKind.S_INTERSECT_SYM,
				SymbolKind.S_BULK_SYM, SymbolKind.S_URL_SYM, SymbolKind.S_GENERATE_SYM, SymbolKind.S_DOLLAR_QUOTED_STRING_SYM, SymbolKind.S_PARSE_TREE_SYM, SymbolKind.S_LOG_SYM,
				SymbolKind.S_GTIDS_SYM, SymbolKind.S_PARALLEL_SYM, SymbolKind.S_S3_SYM, SymbolKind.S_QUALIFY_SYM, SymbolKind.S_AUTO_SYM, SymbolKind.S_MANUAL_SYM, SymbolKind.S_BERNOULLI_SYM,
				SymbolKind.S_TABLESAMPLE_SYM, SymbolKind.S_KEYWORD_USED_AS_IDENT, SymbolKind.S_KEYWORD_USED_AS_KEYWORD, SymbolKind.S_CONDITIONLESS_JOIN, SymbolKind.S_811_, SymbolKind.S_812_,
				SymbolKind.S_813_, SymbolKind.S_814_, SymbolKind.S_815_, SymbolKind.S_816_, SymbolKind.S_817_, SymbolKind.S_818_, SymbolKind.S_819_, SymbolKind.S_PREFER_PARENTHESES, SymbolKind.S_821_,
				SymbolKind.S_822_, SymbolKind.S_EMPTY_FROM_CLAUSE, SymbolKind.S_824_, SymbolKind.S_825_, SymbolKind.S_826_, SymbolKind.S_827_, SymbolKind.S_828_, SymbolKind.S_829_, SymbolKind.S_830_,
				SymbolKind.S_831_, SymbolKind.S_YYACCEPT, SymbolKind.S_start_entry, SymbolKind.S_sql_statement, SymbolKind.S_835_1, SymbolKind.S_opt_end_of_input,
				SymbolKind.S_simple_statement_or_begin, SymbolKind.S_simple_statement, SymbolKind.S_deallocate, SymbolKind.S_deallocate_or_drop, SymbolKind.S_prepare, SymbolKind.S_prepare_src,
				SymbolKind.S_execute, SymbolKind.S_844_2, SymbolKind.S_execute_using, SymbolKind.S_execute_var_list, SymbolKind.S_execute_var_ident, SymbolKind.S_help, SymbolKind.S_849_3,
				SymbolKind.S_change_replication_stmt, SymbolKind.S_851_4, SymbolKind.S_852_5, SymbolKind.S_filter_defs, SymbolKind.S_filter_def, SymbolKind.S_opt_filter_db_list,
				SymbolKind.S_filter_db_list, SymbolKind.S_filter_db_ident, SymbolKind.S_opt_filter_db_pair_list, SymbolKind.S_filter_db_pair_list, SymbolKind.S_opt_filter_table_list,
				SymbolKind.S_filter_table_list, SymbolKind.S_filter_table_ident, SymbolKind.S_opt_filter_string_list, SymbolKind.S_filter_string_list, SymbolKind.S_filter_string,
				SymbolKind.S_source_defs, SymbolKind.S_source_def, SymbolKind.S_ignore_server_id_list, SymbolKind.S_ignore_server_id, SymbolKind.S_privilege_check_def,
				SymbolKind.S_table_primary_key_check_def, SymbolKind.S_assign_gtids_to_anonymous_transactions_def, SymbolKind.S_source_tls_ciphersuites_def, SymbolKind.S_source_file_def,
				SymbolKind.S_opt_channel, SymbolKind.S_create_table_stmt, SymbolKind.S_create_role_stmt, SymbolKind.S_create_resource_group_stmt, SymbolKind.S_create, SymbolKind.S_880_6,
				SymbolKind.S_create_srs_stmt, SymbolKind.S_srs_attributes, SymbolKind.S_default_role_clause, SymbolKind.S_create_index_stmt, SymbolKind.S_server_options_list,
				SymbolKind.S_server_option, SymbolKind.S_event_tail, SymbolKind.S_888_7, SymbolKind.S_ev_schedule_time, SymbolKind.S_890_8, SymbolKind.S_opt_ev_status, SymbolKind.S_ev_starts,
				SymbolKind.S_ev_ends, SymbolKind.S_opt_ev_on_completion, SymbolKind.S_ev_on_completion, SymbolKind.S_opt_ev_comment, SymbolKind.S_ev_sql_stmt, SymbolKind.S_898_9,
				SymbolKind.S_ev_sql_stmt_inner, SymbolKind.S_sp_name, SymbolKind.S_sp_a_chistics, SymbolKind.S_sp_c_chistics, SymbolKind.S_sp_chistic, SymbolKind.S_sp_c_chistic, SymbolKind.S_sp_suid,
				SymbolKind.S_call_stmt, SymbolKind.S_opt_paren_expr_list, SymbolKind.S_sp_fdparam_list, SymbolKind.S_sp_fdparams, SymbolKind.S_sp_fdparam, SymbolKind.S_sp_pdparam_list,
				SymbolKind.S_sp_pdparams, SymbolKind.S_sp_pdparam, SymbolKind.S_sp_opt_inout, SymbolKind.S_sp_proc_stmts, SymbolKind.S_sp_proc_stmts1, SymbolKind.S_sp_decls, SymbolKind.S_sp_decl,
				SymbolKind.S_919_10, SymbolKind.S_920_11, SymbolKind.S_sp_handler_type, SymbolKind.S_sp_hcond_list, SymbolKind.S_sp_hcond_element, SymbolKind.S_sp_cond, SymbolKind.S_sqlstate,
				SymbolKind.S_opt_value, SymbolKind.S_sp_hcond, SymbolKind.S_signal_stmt, SymbolKind.S_signal_value, SymbolKind.S_opt_signal_value, SymbolKind.S_opt_set_signal_information,
				SymbolKind.S_signal_information_item_list, SymbolKind.S_signal_allowed_expr, SymbolKind.S_signal_condition_information_item_name, SymbolKind.S_resignal_stmt,
				SymbolKind.S_get_diagnostics, SymbolKind.S_which_area, SymbolKind.S_diagnostics_information, SymbolKind.S_statement_information, SymbolKind.S_statement_information_item,
				SymbolKind.S_simple_target_specification, SymbolKind.S_statement_information_item_name, SymbolKind.S_condition_number, SymbolKind.S_condition_information,
				SymbolKind.S_condition_information_item, SymbolKind.S_condition_information_item_name, SymbolKind.S_sp_decl_idents, SymbolKind.S_sp_opt_default, SymbolKind.S_sp_proc_stmt,
				SymbolKind.S_sp_proc_stmt_if, SymbolKind.S_951_12, SymbolKind.S_sp_proc_stmt_statement, SymbolKind.S_953_13, SymbolKind.S_sp_proc_stmt_return, SymbolKind.S_955_14,
				SymbolKind.S_sp_proc_stmt_unlabeled, SymbolKind.S_957_15, SymbolKind.S_sp_proc_stmt_leave, SymbolKind.S_sp_proc_stmt_iterate, SymbolKind.S_sp_proc_stmt_open,
				SymbolKind.S_sp_proc_stmt_fetch, SymbolKind.S_962_16, SymbolKind.S_sp_proc_stmt_close, SymbolKind.S_sp_opt_fetch_noise, SymbolKind.S_sp_fetch_list, SymbolKind.S_sp_if,
				SymbolKind.S_967_17, SymbolKind.S_968_18, SymbolKind.S_969_19, SymbolKind.S_sp_elseifs, SymbolKind.S_case_stmt_specification, SymbolKind.S_simple_case_stmt, SymbolKind.S_973_20,
				SymbolKind.S_974_21, SymbolKind.S_searched_case_stmt, SymbolKind.S_976_22, SymbolKind.S_simple_when_clause_list, SymbolKind.S_searched_when_clause_list,
				SymbolKind.S_simple_when_clause, SymbolKind.S_980_23, SymbolKind.S_981_24, SymbolKind.S_searched_when_clause, SymbolKind.S_983_25, SymbolKind.S_984_26, SymbolKind.S_else_clause_opt,
				SymbolKind.S_sp_labeled_control, SymbolKind.S_987_27, SymbolKind.S_sp_opt_label, SymbolKind.S_sp_labeled_block, SymbolKind.S_990_28, SymbolKind.S_sp_unlabeled_block,
				SymbolKind.S_992_29, SymbolKind.S_sp_block_content, SymbolKind.S_994_30, SymbolKind.S_sp_unlabeled_control, SymbolKind.S_996_31, SymbolKind.S_997_32, SymbolKind.S_998_33,
				SymbolKind.S_999_34, SymbolKind.S_trg_action_time, SymbolKind.S_trg_event, SymbolKind.S_opt_ts_datafile_name, SymbolKind.S_opt_logfile_group_name, SymbolKind.S_opt_tablespace_options,
				SymbolKind.S_tablespace_option_list, SymbolKind.S_tablespace_option, SymbolKind.S_opt_alter_tablespace_options, SymbolKind.S_alter_tablespace_option_list,
				SymbolKind.S_alter_tablespace_option, SymbolKind.S_opt_undo_tablespace_options, SymbolKind.S_undo_tablespace_option_list, SymbolKind.S_undo_tablespace_option,
				SymbolKind.S_opt_logfile_group_options, SymbolKind.S_logfile_group_option_list, SymbolKind.S_logfile_group_option, SymbolKind.S_opt_alter_logfile_group_options,
				SymbolKind.S_alter_logfile_group_option_list, SymbolKind.S_alter_logfile_group_option, SymbolKind.S_ts_datafile, SymbolKind.S_undo_tablespace_state, SymbolKind.S_lg_undofile,
				SymbolKind.S_ts_option_initial_size, SymbolKind.S_ts_option_autoextend_size, SymbolKind.S_option_autoextend_size, SymbolKind.S_ts_option_max_size, SymbolKind.S_ts_option_extent_size,
				SymbolKind.S_ts_option_undo_buffer_size, SymbolKind.S_ts_option_redo_buffer_size, SymbolKind.S_ts_option_nodegroup, SymbolKind.S_ts_option_comment, SymbolKind.S_ts_option_engine,
				SymbolKind.S_ts_option_file_block_size, SymbolKind.S_ts_option_wait, SymbolKind.S_ts_option_encryption, SymbolKind.S_ts_option_engine_attribute, SymbolKind.S_size_number,
				SymbolKind.S_opt_create_table_options_etc, SymbolKind.S_opt_create_partitioning_etc, SymbolKind.S_opt_duplicate_as_qe, SymbolKind.S_as_create_query_expression,
				SymbolKind.S_partition_clause, SymbolKind.S_part_type_def, SymbolKind.S_opt_linear, SymbolKind.S_opt_key_algo, SymbolKind.S_opt_num_parts, SymbolKind.S_opt_sub_part,
				SymbolKind.S_opt_name_list, SymbolKind.S_name_list, SymbolKind.S_opt_num_subparts, SymbolKind.S_opt_part_defs, SymbolKind.S_part_def_list, SymbolKind.S_part_definition,
				SymbolKind.S_opt_part_values, SymbolKind.S_part_func_max, SymbolKind.S_part_values_in, SymbolKind.S_part_value_list, SymbolKind.S_part_value_item_list_paren, SymbolKind.S_1058_35,
				SymbolKind.S_part_value_item_list, SymbolKind.S_part_value_item, SymbolKind.S_opt_sub_partition, SymbolKind.S_sub_part_list, SymbolKind.S_sub_part_definition,
				SymbolKind.S_opt_part_options, SymbolKind.S_part_option_list, SymbolKind.S_part_option, SymbolKind.S_alter_database_options, SymbolKind.S_alter_database_option,
				SymbolKind.S_opt_create_database_options, SymbolKind.S_create_database_options, SymbolKind.S_create_database_option, SymbolKind.S_opt_if_not_exists,
				SymbolKind.S_create_table_options_space_separated, SymbolKind.S_create_table_options, SymbolKind.S_opt_comma, SymbolKind.S_create_table_option, SymbolKind.S_ternary_option,
				SymbolKind.S_default_charset, SymbolKind.S_default_collation, SymbolKind.S_default_encryption, SymbolKind.S_row_types, SymbolKind.S_merge_insert_types, SymbolKind.S_udf_type,
				SymbolKind.S_table_element_list, SymbolKind.S_table_element, SymbolKind.S_column_def, SymbolKind.S_opt_references, SymbolKind.S_table_constraint_def, SymbolKind.S_check_constraint,
				SymbolKind.S_opt_constraint_name, SymbolKind.S_opt_not, SymbolKind.S_opt_constraint_enforcement, SymbolKind.S_constraint_enforcement, SymbolKind.S_field_def,
				SymbolKind.S_opt_generated_always, SymbolKind.S_opt_stored_attribute, SymbolKind.S_type, SymbolKind.S_spatial_type, SymbolKind.S_nchar, SymbolKind.S_varchar, SymbolKind.S_nvarchar,
				SymbolKind.S_int_type, SymbolKind.S_real_type, SymbolKind.S_opt_PRECISION, SymbolKind.S_numeric_type, SymbolKind.S_standard_float_options, SymbolKind.S_float_options,
				SymbolKind.S_precision, SymbolKind.S_type_datetime_precision, SymbolKind.S_func_datetime_precision, SymbolKind.S_field_options, SymbolKind.S_field_opt_list, SymbolKind.S_field_option,
				SymbolKind.S_field_length, SymbolKind.S_opt_field_length, SymbolKind.S_opt_precision, SymbolKind.S_opt_column_attribute_list, SymbolKind.S_column_attribute_list,
				SymbolKind.S_column_attribute, SymbolKind.S_column_format, SymbolKind.S_storage_media, SymbolKind.S_now, SymbolKind.S_now_or_signed_literal, SymbolKind.S_character_set,
				SymbolKind.S_charset_name, SymbolKind.S_opt_load_data_charset, SymbolKind.S_old_or_new_charset_name, SymbolKind.S_old_or_new_charset_name_or_default, SymbolKind.S_collation_name,
				SymbolKind.S_opt_collate, SymbolKind.S_opt_default, SymbolKind.S_ascii, SymbolKind.S_unicode, SymbolKind.S_opt_charset_with_opt_binary, SymbolKind.S_opt_bin_mod,
				SymbolKind.S_ws_num_codepoints, SymbolKind.S_1137_36, SymbolKind.S_opt_primary, SymbolKind.S_references, SymbolKind.S_opt_ref_list, SymbolKind.S_reference_list,
				SymbolKind.S_opt_match_clause, SymbolKind.S_opt_on_update_delete, SymbolKind.S_delete_option, SymbolKind.S_constraint_key_type, SymbolKind.S_key_or_index,
				SymbolKind.S_opt_key_or_index, SymbolKind.S_keys_or_index, SymbolKind.S_opt_unique, SymbolKind.S_opt_fulltext_index_options, SymbolKind.S_fulltext_index_options,
				SymbolKind.S_fulltext_index_option, SymbolKind.S_opt_spatial_index_options, SymbolKind.S_spatial_index_options, SymbolKind.S_spatial_index_option, SymbolKind.S_opt_index_options,
				SymbolKind.S_index_options, SymbolKind.S_index_option, SymbolKind.S_common_index_option, SymbolKind.S_opt_index_name_and_type, SymbolKind.S_opt_index_type_clause,
				SymbolKind.S_index_type_clause, SymbolKind.S_visibility, SymbolKind.S_index_type, SymbolKind.S_key_list, SymbolKind.S_key_part, SymbolKind.S_key_list_with_expression,
				SymbolKind.S_key_part_with_expression, SymbolKind.S_opt_ident, SymbolKind.S_string_list, SymbolKind.S_alter_table_stmt, SymbolKind.S_alter_database_stmt, SymbolKind.S_1173_37,
				SymbolKind.S_alter_procedure_stmt, SymbolKind.S_1175_38, SymbolKind.S_alter_function_stmt, SymbolKind.S_1177_39, SymbolKind.S_alter_view_stmt, SymbolKind.S_1179_40,
				SymbolKind.S_1180_41, SymbolKind.S_alter_event_stmt, SymbolKind.S_1182_42, SymbolKind.S_alter_logfile_stmt, SymbolKind.S_alter_tablespace_stmt, SymbolKind.S_alter_undo_tablespace_stmt,
				SymbolKind.S_alter_server_stmt, SymbolKind.S_alter_user_stmt, SymbolKind.S_opt_replace_password, SymbolKind.S_alter_resource_group_stmt, SymbolKind.S_alter_user_command,
				SymbolKind.S_opt_user_attribute, SymbolKind.S_opt_account_lock_password_expire_options, SymbolKind.S_opt_account_lock_password_expire_option_list,
				SymbolKind.S_opt_account_lock_password_expire_option, SymbolKind.S_connect_options, SymbolKind.S_connect_option_list, SymbolKind.S_connect_option, SymbolKind.S_user_func,
				SymbolKind.S_ev_alter_on_schedule_completion, SymbolKind.S_opt_ev_rename_to, SymbolKind.S_opt_ev_sql_stmt, SymbolKind.S_ident_or_empty, SymbolKind.S_opt_alter_table_actions,
				SymbolKind.S_standalone_alter_table_action, SymbolKind.S_alter_table_partition_options, SymbolKind.S_opt_alter_command_list, SymbolKind.S_standalone_alter_commands,
				SymbolKind.S_opt_with_validation, SymbolKind.S_with_validation, SymbolKind.S_all_or_alt_part_name_list, SymbolKind.S_alter_list, SymbolKind.S_alter_commands_modifier_list,
				SymbolKind.S_alter_list_item, SymbolKind.S_alter_commands_modifier, SymbolKind.S_opt_index_lock_and_algorithm, SymbolKind.S_alter_algorithm_option,
				SymbolKind.S_alter_algorithm_option_value, SymbolKind.S_alter_lock_option, SymbolKind.S_alter_lock_option_value, SymbolKind.S_opt_column, SymbolKind.S_opt_ignore,
				SymbolKind.S_opt_restrict, SymbolKind.S_opt_place, SymbolKind.S_opt_to, SymbolKind.S_group_replication, SymbolKind.S_group_replication_start,
				SymbolKind.S_opt_group_replication_start_options, SymbolKind.S_group_replication_start_options, SymbolKind.S_group_replication_start_option, SymbolKind.S_group_replication_user,
				SymbolKind.S_group_replication_password, SymbolKind.S_group_replication_plugin_auth, SymbolKind.S_stop_replica_stmt, SymbolKind.S_start_replica_stmt, SymbolKind.S_1235_43,
				SymbolKind.S_1236_44, SymbolKind.S_start, SymbolKind.S_opt_start_transaction_option_list, SymbolKind.S_start_transaction_option_list, SymbolKind.S_start_transaction_option,
				SymbolKind.S_opt_user_option, SymbolKind.S_opt_password_option, SymbolKind.S_opt_default_auth_option, SymbolKind.S_opt_plugin_dir_option, SymbolKind.S_opt_replica_thread_option_list,
				SymbolKind.S_replica_thread_option_list, SymbolKind.S_replica_thread_option, SymbolKind.S_opt_replica_until, SymbolKind.S_replica_until, SymbolKind.S_checksum,
				SymbolKind.S_opt_checksum_type, SymbolKind.S_repair_table_stmt, SymbolKind.S_opt_mi_repair_types, SymbolKind.S_mi_repair_types, SymbolKind.S_mi_repair_type,
				SymbolKind.S_analyze_table_stmt, SymbolKind.S_opt_histogram_auto_update, SymbolKind.S_opt_histogram_num_buckets, SymbolKind.S_opt_histogram_update_param, SymbolKind.S_opt_histogram,
				SymbolKind.S_binlog_base64_event, SymbolKind.S_check_table_stmt, SymbolKind.S_opt_mi_check_types, SymbolKind.S_mi_check_types, SymbolKind.S_mi_check_type,
				SymbolKind.S_optimize_table_stmt, SymbolKind.S_opt_no_write_to_binlog, SymbolKind.S_rename, SymbolKind.S_1269_45, SymbolKind.S_rename_list, SymbolKind.S_table_to_table_list,
				SymbolKind.S_table_to_table, SymbolKind.S_keycache_stmt, SymbolKind.S_keycache_list, SymbolKind.S_assign_to_keycache, SymbolKind.S_key_cache_name, SymbolKind.S_preload_stmt,
				SymbolKind.S_preload_list, SymbolKind.S_preload_keys, SymbolKind.S_adm_partition, SymbolKind.S_opt_cache_key_list, SymbolKind.S_opt_ignore_leaves, SymbolKind.S_select_stmt,
				SymbolKind.S_select_stmt_with_into, SymbolKind.S_query_expression, SymbolKind.S_query_expression_body, SymbolKind.S_query_expression_parens, SymbolKind.S_query_primary,
				SymbolKind.S_query_specification, SymbolKind.S_opt_from_clause, SymbolKind.S_from_clause, SymbolKind.S_from_tables, SymbolKind.S_table_reference_list,
				SymbolKind.S_table_value_constructor, SymbolKind.S_explicit_table, SymbolKind.S_select_options, SymbolKind.S_select_option_list, SymbolKind.S_select_option,
				SymbolKind.S_locking_clause_list, SymbolKind.S_locking_clause, SymbolKind.S_lock_strength, SymbolKind.S_table_locking_list, SymbolKind.S_opt_locked_row_action,
				SymbolKind.S_locked_row_action, SymbolKind.S_select_item_list, SymbolKind.S_select_item, SymbolKind.S_select_alias, SymbolKind.S_optional_braces, SymbolKind.S_expr,
				SymbolKind.S_bool_pri, SymbolKind.S_predicate, SymbolKind.S_opt_of, SymbolKind.S_bit_expr, SymbolKind.S_or, SymbolKind.S_and, SymbolKind.S_not, SymbolKind.S_not2, SymbolKind.S_comp_op,
				SymbolKind.S_all_or_any, SymbolKind.S_simple_expr, SymbolKind.S_opt_array_cast, SymbolKind.S_function_call_keyword, SymbolKind.S_function_call_nonkeyword,
				SymbolKind.S_opt_returning_type, SymbolKind.S_function_call_conflict, SymbolKind.S_geometry_function, SymbolKind.S_function_call_generic, SymbolKind.S_fulltext_options,
				SymbolKind.S_opt_natural_language_mode, SymbolKind.S_opt_query_expansion, SymbolKind.S_opt_udf_expr_list, SymbolKind.S_udf_expr_list, SymbolKind.S_udf_expr,
				SymbolKind.S_set_function_specification, SymbolKind.S_sum_expr, SymbolKind.S_sampling_method, SymbolKind.S_sampling_percentage, SymbolKind.S_opt_tablesample_clause,
				SymbolKind.S_window_func_call, SymbolKind.S_opt_lead_lag_info, SymbolKind.S_stable_integer, SymbolKind.S_param_or_var, SymbolKind.S_opt_ll_default, SymbolKind.S_opt_null_treatment,
				SymbolKind.S_opt_from_first_last, SymbolKind.S_opt_windowing_clause, SymbolKind.S_windowing_clause, SymbolKind.S_window_name_or_spec, SymbolKind.S_window_name,
				SymbolKind.S_window_spec, SymbolKind.S_window_spec_details, SymbolKind.S_opt_existing_window_name, SymbolKind.S_opt_partition_clause, SymbolKind.S_opt_window_order_by_clause,
				SymbolKind.S_opt_window_frame_clause, SymbolKind.S_window_frame_extent, SymbolKind.S_window_frame_start, SymbolKind.S_window_frame_between, SymbolKind.S_window_frame_bound,
				SymbolKind.S_opt_window_frame_exclusion, SymbolKind.S_window_frame_units, SymbolKind.S_grouping_operation, SymbolKind.S_in_expression_user_variable_assignment,
				SymbolKind.S_rvalue_system_or_user_variable, SymbolKind.S_opt_distinct, SymbolKind.S_opt_gconcat_separator, SymbolKind.S_opt_gorder_clause, SymbolKind.S_gorder_list,
				SymbolKind.S_in_sum_expr, SymbolKind.S_cast_type, SymbolKind.S_opt_expr_list, SymbolKind.S_expr_list, SymbolKind.S_ident_list_arg, SymbolKind.S_ident_list, SymbolKind.S_opt_expr,
				SymbolKind.S_opt_else, SymbolKind.S_when_list, SymbolKind.S_table_reference, SymbolKind.S_esc_table_reference, SymbolKind.S_joined_table, SymbolKind.S_natural_join_type,
				SymbolKind.S_inner_join_type, SymbolKind.S_outer_join_type, SymbolKind.S_opt_inner, SymbolKind.S_opt_outer, SymbolKind.S_opt_use_partition, SymbolKind.S_use_partition,
				SymbolKind.S_table_factor, SymbolKind.S_table_reference_list_parens, SymbolKind.S_single_table_parens, SymbolKind.S_single_table, SymbolKind.S_joined_table_parens,
				SymbolKind.S_derived_table, SymbolKind.S_table_function, SymbolKind.S_columns_clause, SymbolKind.S_columns_list, SymbolKind.S_jt_column, SymbolKind.S_jt_column_type,
				SymbolKind.S_opt_on_empty_or_error, SymbolKind.S_opt_on_empty_or_error_json_table, SymbolKind.S_on_empty, SymbolKind.S_on_error, SymbolKind.S_json_on_response,
				SymbolKind.S_index_hint_clause, SymbolKind.S_index_hint_type, SymbolKind.S_index_hint_definition, SymbolKind.S_index_hints_list, SymbolKind.S_opt_index_hints_list,
				SymbolKind.S_opt_key_definition, SymbolKind.S_opt_key_usage_list, SymbolKind.S_key_usage_element, SymbolKind.S_key_usage_list, SymbolKind.S_using_list, SymbolKind.S_ident_string_list,
				SymbolKind.S_interval, SymbolKind.S_interval_time_stamp, SymbolKind.S_date_time_type, SymbolKind.S_opt_as, SymbolKind.S_opt_table_alias, SymbolKind.S_opt_all,
				SymbolKind.S_opt_where_clause, SymbolKind.S_where_clause, SymbolKind.S_opt_having_clause, SymbolKind.S_opt_qualify_clause, SymbolKind.S_with_clause, SymbolKind.S_with_list,
				SymbolKind.S_common_table_expr, SymbolKind.S_opt_derived_column_list, SymbolKind.S_simple_ident_list, SymbolKind.S_opt_window_clause, SymbolKind.S_window_definition_list,
				SymbolKind.S_window_definition, SymbolKind.S_opt_group_clause, SymbolKind.S_group_list, SymbolKind.S_olap_opt, SymbolKind.S_alter_order_list, SymbolKind.S_alter_order_item,
				SymbolKind.S_opt_order_clause, SymbolKind.S_order_clause, SymbolKind.S_order_list, SymbolKind.S_opt_ordering_direction, SymbolKind.S_ordering_direction, SymbolKind.S_opt_limit_clause,
				SymbolKind.S_limit_clause, SymbolKind.S_limit_options, SymbolKind.S_limit_option, SymbolKind.S_opt_simple_limit, SymbolKind.S_ulong_num, SymbolKind.S_real_ulong_num,
				SymbolKind.S_ulonglong_num, SymbolKind.S_real_ulonglong_num, SymbolKind.S_dec_num_error, SymbolKind.S_dec_num, SymbolKind.S_select_var_list, SymbolKind.S_select_var_ident,
				SymbolKind.S_into_clause, SymbolKind.S_into_destination, SymbolKind.S_do_stmt, SymbolKind.S_drop_table_stmt, SymbolKind.S_drop_index_stmt, SymbolKind.S_drop_database_stmt,
				SymbolKind.S_drop_function_stmt, SymbolKind.S_drop_resource_group_stmt, SymbolKind.S_drop_procedure_stmt, SymbolKind.S_drop_user_stmt, SymbolKind.S_drop_view_stmt,
				SymbolKind.S_drop_event_stmt, SymbolKind.S_drop_trigger_stmt, SymbolKind.S_drop_tablespace_stmt, SymbolKind.S_drop_undo_tablespace_stmt, SymbolKind.S_drop_logfile_stmt,
				SymbolKind.S_drop_server_stmt, SymbolKind.S_drop_srs_stmt, SymbolKind.S_drop_role_stmt, SymbolKind.S_table_list, SymbolKind.S_table_alias_ref_list, SymbolKind.S_if_exists,
				SymbolKind.S_opt_ignore_unknown_user, SymbolKind.S_opt_temporary, SymbolKind.S_opt_drop_ts_options, SymbolKind.S_drop_ts_option_list, SymbolKind.S_drop_ts_option,
				SymbolKind.S_insert_stmt, SymbolKind.S_replace_stmt, SymbolKind.S_insert_lock_option, SymbolKind.S_replace_lock_option, SymbolKind.S_opt_INTO, SymbolKind.S_insert_from_constructor,
				SymbolKind.S_insert_query_expression, SymbolKind.S_insert_columns, SymbolKind.S_insert_values, SymbolKind.S_query_expression_with_opt_locking_clauses, SymbolKind.S_value_or_values,
				SymbolKind.S_values_list, SymbolKind.S_values_row_list, SymbolKind.S_equal, SymbolKind.S_opt_equal, SymbolKind.S_row_value, SymbolKind.S_row_value_explicit, SymbolKind.S_opt_values,
				SymbolKind.S_values, SymbolKind.S_expr_or_default, SymbolKind.S_opt_values_reference, SymbolKind.S_opt_insert_update_list, SymbolKind.S_update_stmt, SymbolKind.S_opt_with_clause,
				SymbolKind.S_update_list, SymbolKind.S_update_elem, SymbolKind.S_opt_low_priority, SymbolKind.S_delete_stmt, SymbolKind.S_opt_wild, SymbolKind.S_opt_delete_options,
				SymbolKind.S_opt_delete_option, SymbolKind.S_truncate_stmt, SymbolKind.S_opt_table, SymbolKind.S_opt_profile_defs, SymbolKind.S_profile_defs, SymbolKind.S_profile_def,
				SymbolKind.S_opt_for_query, SymbolKind.S_show_databases_stmt, SymbolKind.S_show_tables_stmt, SymbolKind.S_show_triggers_stmt, SymbolKind.S_show_events_stmt,
				SymbolKind.S_show_table_status_stmt, SymbolKind.S_show_open_tables_stmt, SymbolKind.S_show_plugins_stmt, SymbolKind.S_show_engine_logs_stmt, SymbolKind.S_show_engine_mutex_stmt,
				SymbolKind.S_show_engine_status_stmt, SymbolKind.S_show_columns_stmt, SymbolKind.S_show_binary_logs_stmt, SymbolKind.S_show_replicas_stmt, SymbolKind.S_show_binlog_events_stmt,
				SymbolKind.S_show_relaylog_events_stmt, SymbolKind.S_show_keys_stmt, SymbolKind.S_show_engines_stmt, SymbolKind.S_show_count_warnings_stmt, SymbolKind.S_show_count_errors_stmt,
				SymbolKind.S_show_warnings_stmt, SymbolKind.S_show_errors_stmt, SymbolKind.S_show_profiles_stmt, SymbolKind.S_show_profile_stmt, SymbolKind.S_show_status_stmt,
				SymbolKind.S_show_processlist_stmt, SymbolKind.S_show_variables_stmt, SymbolKind.S_show_character_set_stmt, SymbolKind.S_show_collation_stmt, SymbolKind.S_show_privileges_stmt,
				SymbolKind.S_show_grants_stmt, SymbolKind.S_show_create_database_stmt, SymbolKind.S_show_create_table_stmt, SymbolKind.S_show_create_view_stmt,
				SymbolKind.S_show_binary_log_status_stmt, SymbolKind.S_show_replica_status_stmt, SymbolKind.S_show_create_procedure_stmt, SymbolKind.S_show_create_function_stmt,
				SymbolKind.S_show_create_trigger_stmt, SymbolKind.S_show_procedure_status_stmt, SymbolKind.S_show_function_status_stmt, SymbolKind.S_show_procedure_code_stmt,
				SymbolKind.S_show_function_code_stmt, SymbolKind.S_show_create_event_stmt, SymbolKind.S_show_create_user_stmt, SymbolKind.S_show_parse_tree_stmt, SymbolKind.S_engine_or_all,
				SymbolKind.S_opt_storage, SymbolKind.S_opt_db, SymbolKind.S_opt_full, SymbolKind.S_opt_extended, SymbolKind.S_opt_show_cmd_type, SymbolKind.S_from_or_in, SymbolKind.S_opt_binlog_in,
				SymbolKind.S_binlog_from, SymbolKind.S_opt_wild_or_where, SymbolKind.S_describe_stmt, SymbolKind.S_explain_stmt, SymbolKind.S_explainable_stmt, SymbolKind.S_describe_command,
				SymbolKind.S_opt_explain_format, SymbolKind.S_opt_explain_options, SymbolKind.S_opt_explain_into, SymbolKind.S_opt_explain_for_schema, SymbolKind.S_opt_describe_column,
				SymbolKind.S_flush, SymbolKind.S_1585_46, SymbolKind.S_flush_options, SymbolKind.S_1587_47, SymbolKind.S_opt_flush_lock, SymbolKind.S_1589_48, SymbolKind.S_flush_options_list,
				SymbolKind.S_flush_option, SymbolKind.S_opt_table_list, SymbolKind.S_reset, SymbolKind.S_1594_49, SymbolKind.S_reset_options, SymbolKind.S_opt_if_exists_ident,
				SymbolKind.S_persisted_variable_ident, SymbolKind.S_reset_option, SymbolKind.S_1599_50, SymbolKind.S_1600_51, SymbolKind.S_opt_replica_reset_options, SymbolKind.S_source_reset_options,
				SymbolKind.S_purge, SymbolKind.S_1604_52, SymbolKind.S_purge_options, SymbolKind.S_purge_option, SymbolKind.S_kill, SymbolKind.S_kill_option, SymbolKind.S_use, SymbolKind.S_load_stmt,
				SymbolKind.S_data_or_xml, SymbolKind.S_opt_local, SymbolKind.S_opt_from_keyword, SymbolKind.S_load_data_lock, SymbolKind.S_load_source_type, SymbolKind.S_opt_source_count,
				SymbolKind.S_opt_source_order, SymbolKind.S_opt_duplicate, SymbolKind.S_duplicate, SymbolKind.S_opt_field_term, SymbolKind.S_field_term_list, SymbolKind.S_field_term,
				SymbolKind.S_opt_line_term, SymbolKind.S_line_term_list, SymbolKind.S_line_term, SymbolKind.S_opt_xml_rows_identified_by, SymbolKind.S_opt_ignore_lines, SymbolKind.S_lines_or_rows,
				SymbolKind.S_opt_field_or_var_spec, SymbolKind.S_fields_or_vars, SymbolKind.S_field_or_var, SymbolKind.S_opt_load_data_set_spec, SymbolKind.S_load_data_set_list,
				SymbolKind.S_load_data_set_elem, SymbolKind.S_opt_load_algorithm, SymbolKind.S_opt_compression_algorithm, SymbolKind.S_opt_load_parallel, SymbolKind.S_opt_load_memory,
				SymbolKind.S_text_literal, SymbolKind.S_text_string, SymbolKind.S_param_marker, SymbolKind.S_signed_literal, SymbolKind.S_signed_literal_or_null, SymbolKind.S_null_as_literal,
				SymbolKind.S_literal, SymbolKind.S_literal_or_null, SymbolKind.S_NUM_literal, SymbolKind.S_int64_literal, SymbolKind.S_temporal_literal, SymbolKind.S_opt_interval,
				SymbolKind.S_insert_column, SymbolKind.S_table_wild, SymbolKind.S_order_expr, SymbolKind.S_grouping_expr, SymbolKind.S_simple_ident, SymbolKind.S_simple_ident_nospvar,
				SymbolKind.S_simple_ident_q, SymbolKind.S_table_ident, SymbolKind.S_table_ident_opt_wild, SymbolKind.S_IDENT_sys, SymbolKind.S_TEXT_STRING_sys_nonewline,
				SymbolKind.S_filter_wild_db_table_string, SymbolKind.S_TEXT_STRING_sys, SymbolKind.S_TEXT_STRING_literal, SymbolKind.S_TEXT_STRING_filesystem, SymbolKind.S_TEXT_STRING_password,
				SymbolKind.S_TEXT_STRING_hash, SymbolKind.S_TEXT_STRING_validated, SymbolKind.S_ident, SymbolKind.S_role_ident, SymbolKind.S_label_ident, SymbolKind.S_lvalue_ident,
				SymbolKind.S_ident_or_text, SymbolKind.S_role_ident_or_text, SymbolKind.S_user_ident_or_text, SymbolKind.S_user, SymbolKind.S_role, SymbolKind.S_schema, SymbolKind.S_ident_keyword,
				SymbolKind.S_ident_keywords_ambiguous_1_roles_and_labels, SymbolKind.S_ident_keywords_ambiguous_2_labels, SymbolKind.S_label_keyword, SymbolKind.S_ident_keywords_ambiguous_3_roles,
				SymbolKind.S_ident_keywords_unambiguous, SymbolKind.S_role_keyword, SymbolKind.S_lvalue_keyword, SymbolKind.S_ident_keywords_ambiguous_4_system_variables, SymbolKind.S_set,
				SymbolKind.S_start_option_value_list, SymbolKind.S_set_role_stmt, SymbolKind.S_opt_except_role_list, SymbolKind.S_set_resource_group_stmt, SymbolKind.S_thread_id_list,
				SymbolKind.S_thread_id_list_options, SymbolKind.S_start_option_value_list_following_option_type, SymbolKind.S_option_value_list_continued, SymbolKind.S_option_value_list,
				SymbolKind.S_option_value, SymbolKind.S_option_type, SymbolKind.S_opt_var_type, SymbolKind.S_opt_rvalue_system_variable_type, SymbolKind.S_opt_set_var_ident_type,
				SymbolKind.S_option_value_following_option_type, SymbolKind.S_option_value_no_option_type, SymbolKind.S_lvalue_variable, SymbolKind.S_rvalue_system_variable,
				SymbolKind.S_transaction_characteristics, SymbolKind.S_transaction_access_mode, SymbolKind.S_opt_transaction_access_mode, SymbolKind.S_isolation_level,
				SymbolKind.S_opt_isolation_level, SymbolKind.S_transaction_access_mode_types, SymbolKind.S_isolation_types, SymbolKind.S_set_expr_or_default, SymbolKind.S_lock, SymbolKind.S_1716_53,
				SymbolKind.S_table_or_tables, SymbolKind.S_table_lock_list, SymbolKind.S_table_lock, SymbolKind.S_lock_option, SymbolKind.S_unlock, SymbolKind.S_1722_54, SymbolKind.S_shutdown_stmt,
				SymbolKind.S_restart_server_stmt, SymbolKind.S_alter_instance_stmt, SymbolKind.S_alter_instance_action, SymbolKind.S_handler_stmt, SymbolKind.S_handler_scan_function,
				SymbolKind.S_handler_rkey_function, SymbolKind.S_handler_rkey_mode, SymbolKind.S_revoke, SymbolKind.S_1732_55, SymbolKind.S_grant, SymbolKind.S_1734_56, SymbolKind.S_opt_acl_type,
				SymbolKind.S_opt_privileges, SymbolKind.S_role_or_privilege_list, SymbolKind.S_role_or_privilege, SymbolKind.S_opt_with_admin_option, SymbolKind.S_opt_and, SymbolKind.S_require_list,
				SymbolKind.S_require_list_element, SymbolKind.S_grant_ident, SymbolKind.S_user_list, SymbolKind.S_role_list, SymbolKind.S_opt_retain_current_password,
				SymbolKind.S_opt_discard_old_password, SymbolKind.S_opt_user_registration, SymbolKind.S_create_user, SymbolKind.S_opt_create_user_with_mfa, SymbolKind.S_identification,
				SymbolKind.S_identified_by_password, SymbolKind.S_identified_by_random_password, SymbolKind.S_identified_with_plugin, SymbolKind.S_identified_with_plugin_as_auth,
				SymbolKind.S_identified_with_plugin_by_password, SymbolKind.S_identified_with_plugin_by_random_password, SymbolKind.S_opt_initial_auth, SymbolKind.S_alter_user, SymbolKind.S_factor,
				SymbolKind.S_create_user_list, SymbolKind.S_alter_user_list, SymbolKind.S_opt_column_list, SymbolKind.S_column_list, SymbolKind.S_require_clause, SymbolKind.S_grant_options,
				SymbolKind.S_opt_grant_option, SymbolKind.S_opt_with_roles, SymbolKind.S_opt_grant_as, SymbolKind.S_begin_stmt, SymbolKind.S_1771_57, SymbolKind.S_opt_work, SymbolKind.S_opt_chain,
				SymbolKind.S_opt_release, SymbolKind.S_opt_savepoint, SymbolKind.S_commit, SymbolKind.S_rollback, SymbolKind.S_savepoint, SymbolKind.S_release, SymbolKind.S_union_option,
				SymbolKind.S_row_subquery, SymbolKind.S_table_subquery, SymbolKind.S_subquery, SymbolKind.S_query_spec_option, SymbolKind.S_init_lex_create_info,
				SymbolKind.S_view_or_trigger_or_sp_or_event, SymbolKind.S_definer_tail, SymbolKind.S_no_definer_tail, SymbolKind.S_definer_opt, SymbolKind.S_no_definer, SymbolKind.S_definer,
				SymbolKind.S_view_replace_or_algorithm, SymbolKind.S_view_replace, SymbolKind.S_view_algorithm, SymbolKind.S_view_suid, SymbolKind.S_view_tail, SymbolKind.S_1797_58,
				SymbolKind.S_view_query_block, SymbolKind.S_view_check_option, SymbolKind.S_trigger_action_order, SymbolKind.S_trigger_follows_precedes_clause, SymbolKind.S_trigger_tail,
				SymbolKind.S_1803_59, SymbolKind.S_udf_tail, SymbolKind.S_sf_tail, SymbolKind.S_1806_60, SymbolKind.S_1807_61, SymbolKind.S_1808_62, SymbolKind.S_1809_63, SymbolKind.S_routine_string,
				SymbolKind.S_stored_routine_body, SymbolKind.S_sp_tail, SymbolKind.S_1813_64, SymbolKind.S_1814_65, SymbolKind.S_1815_66, SymbolKind.S_1816_67, SymbolKind.S_xa,
				SymbolKind.S_opt_convert_xid, SymbolKind.S_xid, SymbolKind.S_begin_or_start, SymbolKind.S_opt_join_or_resume, SymbolKind.S_opt_one_phase, SymbolKind.S_opt_suspend,
				SymbolKind.S_install_option_type, SymbolKind.S_install_set_rvalue, SymbolKind.S_install_set_value, SymbolKind.S_install_set_value_list, SymbolKind.S_opt_install_set_value_list,
				SymbolKind.S_install_stmt, SymbolKind.S_uninstall, SymbolKind.S_TEXT_STRING_sys_list, SymbolKind.S_import_stmt, SymbolKind.S_clone_stmt, SymbolKind.S_opt_datadir_ssl,
				SymbolKind.S_opt_ssl, SymbolKind.S_resource_group_types, SymbolKind.S_opt_resource_group_vcpu_list, SymbolKind.S_vcpu_range_spec_list, SymbolKind.S_vcpu_num_or_range,
				SymbolKind.S_signed_num, SymbolKind.S_opt_resource_group_priority, SymbolKind.S_opt_resource_group_enable_disable, SymbolKind.S_opt_force, SymbolKind.S_json_attribute };

		static final SymbolKind get(int code) {
			return values_[code];
		}

		public final int getCode() {
			return this.yycode_;
		}

		public final char getChar() {
			return (char) this.yycode_;
		}

		/*
		 * Return YYSTR after stripping away unnecessary quotes and backslashes, so that it's suitable for yyerror. The heuristic is that double-quoting is unnecessary
		 * unless the string contains an apostrophe, a comma, or backslash (other than backslash-backslash). YYSTR is taken from yytname.
		 */
		private static String yytnamerr_(String yystr) {
			if (yystr.charAt(0) == '"') {
				StringBuffer yyr = new StringBuffer();
				strip_quotes: for (int i = 1; i < yystr.length(); i++)
					switch (yystr.charAt(i)) {
					case '\'':
					case ',':
						break strip_quotes;

					case '\\':
						if (yystr.charAt(++i) != '\\')
							break strip_quotes;
						/* Fall through. */
					default:
						yyr.append(yystr.charAt(i));
						break;

					case '"':
						return yyr.toString();
					}
			}
			return yystr;
		}

		/*
		 * YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM. First, the terminals, then, starting at \a YYNTOKENS_, nonterminals.
		 */
		private static String[] yytname_;

		/* The user-facing name of this symbol. */
		public final String getName() {
			return yytnamerr_(yytname_[yycode_]);
		}

	};

	/**
	 * Communication interface between the scanner and the Bison-generated parser <tt>MyParser84</tt>.
	 */
	public interface Lexer {
		/* Token kinds. */
		/** Token "end of file", to be returned by the scanner. */
		static final int YYEOF = 0;
		/** Token error, to be returned by the scanner. */
		static final int YYerror = 256;
		/** Token "invalid token", to be returned by the scanner. */
		static final int YYUNDEF = 1150;
		/** Token ABORT_SYM, to be returned by the scanner. */
		static final int ABORT_SYM = 258;
		/** Token ACCESSIBLE_SYM, to be returned by the scanner. */
		static final int ACCESSIBLE_SYM = 259;
		/** Token ACCOUNT_SYM, to be returned by the scanner. */
		static final int ACCOUNT_SYM = 260;
		/** Token ACTION, to be returned by the scanner. */
		static final int ACTION = 261;
		/** Token ADD, to be returned by the scanner. */
		static final int ADD = 262;
		/** Token ADDDATE_SYM, to be returned by the scanner. */
		static final int ADDDATE_SYM = 263;
		/** Token AFTER_SYM, to be returned by the scanner. */
		static final int AFTER_SYM = 264;
		/** Token AGAINST, to be returned by the scanner. */
		static final int AGAINST = 265;
		/** Token AGGREGATE_SYM, to be returned by the scanner. */
		static final int AGGREGATE_SYM = 266;
		/** Token ALGORITHM_SYM, to be returned by the scanner. */
		static final int ALGORITHM_SYM = 267;
		/** Token ALL, to be returned by the scanner. */
		static final int ALL = 268;
		/** Token ALTER, to be returned by the scanner. */
		static final int ALTER = 269;
		/** Token ALWAYS_SYM, to be returned by the scanner. */
		static final int ALWAYS_SYM = 270;
		/** Token OBSOLETE_TOKEN_271, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_271 = 271;
		/** Token ANALYZE_SYM, to be returned by the scanner. */
		static final int ANALYZE_SYM = 272;
		/** Token AND_AND_SYM, to be returned by the scanner. */
		static final int AND_AND_SYM = 273;
		/** Token AND_SYM, to be returned by the scanner. */
		static final int AND_SYM = 274;
		/** Token ANY_SYM, to be returned by the scanner. */
		static final int ANY_SYM = 275;
		/** Token AS, to be returned by the scanner. */
		static final int AS = 276;
		/** Token ASC, to be returned by the scanner. */
		static final int ASC = 277;
		/** Token ASCII_SYM, to be returned by the scanner. */
		static final int ASCII_SYM = 278;
		/** Token ASENSITIVE_SYM, to be returned by the scanner. */
		static final int ASENSITIVE_SYM = 279;
		/** Token AT_SYM, to be returned by the scanner. */
		static final int AT_SYM = 280;
		/** Token AUTOEXTEND_SIZE_SYM, to be returned by the scanner. */
		static final int AUTOEXTEND_SIZE_SYM = 281;
		/** Token AUTO_INC, to be returned by the scanner. */
		static final int AUTO_INC = 282;
		/** Token AVG_ROW_LENGTH, to be returned by the scanner. */
		static final int AVG_ROW_LENGTH = 283;
		/** Token AVG_SYM, to be returned by the scanner. */
		static final int AVG_SYM = 284;
		/** Token BACKUP_SYM, to be returned by the scanner. */
		static final int BACKUP_SYM = 285;
		/** Token BEFORE_SYM, to be returned by the scanner. */
		static final int BEFORE_SYM = 286;
		/** Token BEGIN_SYM, to be returned by the scanner. */
		static final int BEGIN_SYM = 287;
		/** Token BETWEEN_SYM, to be returned by the scanner. */
		static final int BETWEEN_SYM = 288;
		/** Token BIGINT_SYM, to be returned by the scanner. */
		static final int BIGINT_SYM = 289;
		/** Token BINARY_SYM, to be returned by the scanner. */
		static final int BINARY_SYM = 290;
		/** Token BINLOG_SYM, to be returned by the scanner. */
		static final int BINLOG_SYM = 291;
		/** Token BIN_NUM, to be returned by the scanner. */
		static final int BIN_NUM = 292;
		/** Token BIT_AND_SYM, to be returned by the scanner. */
		static final int BIT_AND_SYM = 293;
		/** Token BIT_OR_SYM, to be returned by the scanner. */
		static final int BIT_OR_SYM = 294;
		/** Token BIT_SYM, to be returned by the scanner. */
		static final int BIT_SYM = 295;
		/** Token BIT_XOR_SYM, to be returned by the scanner. */
		static final int BIT_XOR_SYM = 296;
		/** Token BLOB_SYM, to be returned by the scanner. */
		static final int BLOB_SYM = 297;
		/** Token BLOCK_SYM, to be returned by the scanner. */
		static final int BLOCK_SYM = 298;
		/** Token BOOLEAN_SYM, to be returned by the scanner. */
		static final int BOOLEAN_SYM = 299;
		/** Token BOOL_SYM, to be returned by the scanner. */
		static final int BOOL_SYM = 300;
		/** Token BOTH, to be returned by the scanner. */
		static final int BOTH = 301;
		/** Token BTREE_SYM, to be returned by the scanner. */
		static final int BTREE_SYM = 302;
		/** Token BY, to be returned by the scanner. */
		static final int BY = 303;
		/** Token BYTE_SYM, to be returned by the scanner. */
		static final int BYTE_SYM = 304;
		/** Token CACHE_SYM, to be returned by the scanner. */
		static final int CACHE_SYM = 305;
		/** Token CALL_SYM, to be returned by the scanner. */
		static final int CALL_SYM = 306;
		/** Token CASCADE, to be returned by the scanner. */
		static final int CASCADE = 307;
		/** Token CASCADED, to be returned by the scanner. */
		static final int CASCADED = 308;
		/** Token CASE_SYM, to be returned by the scanner. */
		static final int CASE_SYM = 309;
		/** Token CAST_SYM, to be returned by the scanner. */
		static final int CAST_SYM = 310;
		/** Token CATALOG_NAME_SYM, to be returned by the scanner. */
		static final int CATALOG_NAME_SYM = 311;
		/** Token CHAIN_SYM, to be returned by the scanner. */
		static final int CHAIN_SYM = 312;
		/** Token CHANGE, to be returned by the scanner. */
		static final int CHANGE = 313;
		/** Token CHANGED, to be returned by the scanner. */
		static final int CHANGED = 314;
		/** Token CHANNEL_SYM, to be returned by the scanner. */
		static final int CHANNEL_SYM = 315;
		/** Token CHARSET, to be returned by the scanner. */
		static final int CHARSET = 316;
		/** Token CHAR_SYM, to be returned by the scanner. */
		static final int CHAR_SYM = 317;
		/** Token CHECKSUM_SYM, to be returned by the scanner. */
		static final int CHECKSUM_SYM = 318;
		/** Token CHECK_SYM, to be returned by the scanner. */
		static final int CHECK_SYM = 319;
		/** Token CIPHER_SYM, to be returned by the scanner. */
		static final int CIPHER_SYM = 320;
		/** Token CLASS_ORIGIN_SYM, to be returned by the scanner. */
		static final int CLASS_ORIGIN_SYM = 321;
		/** Token CLIENT_SYM, to be returned by the scanner. */
		static final int CLIENT_SYM = 322;
		/** Token CLOSE_SYM, to be returned by the scanner. */
		static final int CLOSE_SYM = 323;
		/** Token COALESCE, to be returned by the scanner. */
		static final int COALESCE = 324;
		/** Token CODE_SYM, to be returned by the scanner. */
		static final int CODE_SYM = 325;
		/** Token COLLATE_SYM, to be returned by the scanner. */
		static final int COLLATE_SYM = 326;
		/** Token COLLATION_SYM, to be returned by the scanner. */
		static final int COLLATION_SYM = 327;
		/** Token COLUMNS, to be returned by the scanner. */
		static final int COLUMNS = 328;
		/** Token COLUMN_SYM, to be returned by the scanner. */
		static final int COLUMN_SYM = 329;
		/** Token COLUMN_FORMAT_SYM, to be returned by the scanner. */
		static final int COLUMN_FORMAT_SYM = 330;
		/** Token COLUMN_NAME_SYM, to be returned by the scanner. */
		static final int COLUMN_NAME_SYM = 331;
		/** Token COMMENT_SYM, to be returned by the scanner. */
		static final int COMMENT_SYM = 332;
		/** Token COMMITTED_SYM, to be returned by the scanner. */
		static final int COMMITTED_SYM = 333;
		/** Token COMMIT_SYM, to be returned by the scanner. */
		static final int COMMIT_SYM = 334;
		/** Token COMPACT_SYM, to be returned by the scanner. */
		static final int COMPACT_SYM = 335;
		/** Token COMPLETION_SYM, to be returned by the scanner. */
		static final int COMPLETION_SYM = 336;
		/** Token COMPRESSED_SYM, to be returned by the scanner. */
		static final int COMPRESSED_SYM = 337;
		/** Token COMPRESSION_SYM, to be returned by the scanner. */
		static final int COMPRESSION_SYM = 338;
		/** Token ENCRYPTION_SYM, to be returned by the scanner. */
		static final int ENCRYPTION_SYM = 339;
		/** Token CONCURRENT, to be returned by the scanner. */
		static final int CONCURRENT = 340;
		/** Token CONDITION_SYM, to be returned by the scanner. */
		static final int CONDITION_SYM = 341;
		/** Token CONNECTION_SYM, to be returned by the scanner. */
		static final int CONNECTION_SYM = 342;
		/** Token CONSISTENT_SYM, to be returned by the scanner. */
		static final int CONSISTENT_SYM = 343;
		/** Token CONSTRAINT, to be returned by the scanner. */
		static final int CONSTRAINT = 344;
		/** Token CONSTRAINT_CATALOG_SYM, to be returned by the scanner. */
		static final int CONSTRAINT_CATALOG_SYM = 345;
		/** Token CONSTRAINT_NAME_SYM, to be returned by the scanner. */
		static final int CONSTRAINT_NAME_SYM = 346;
		/** Token CONSTRAINT_SCHEMA_SYM, to be returned by the scanner. */
		static final int CONSTRAINT_SCHEMA_SYM = 347;
		/** Token CONTAINS_SYM, to be returned by the scanner. */
		static final int CONTAINS_SYM = 348;
		/** Token CONTEXT_SYM, to be returned by the scanner. */
		static final int CONTEXT_SYM = 349;
		/** Token CONTINUE_SYM, to be returned by the scanner. */
		static final int CONTINUE_SYM = 350;
		/** Token CONVERT_SYM, to be returned by the scanner. */
		static final int CONVERT_SYM = 351;
		/** Token COUNT_SYM, to be returned by the scanner. */
		static final int COUNT_SYM = 352;
		/** Token CPU_SYM, to be returned by the scanner. */
		static final int CPU_SYM = 353;
		/** Token CREATE, to be returned by the scanner. */
		static final int CREATE = 354;
		/** Token CROSS, to be returned by the scanner. */
		static final int CROSS = 355;
		/** Token CUBE_SYM, to be returned by the scanner. */
		static final int CUBE_SYM = 356;
		/** Token CURDATE, to be returned by the scanner. */
		static final int CURDATE = 357;
		/** Token CURRENT_SYM, to be returned by the scanner. */
		static final int CURRENT_SYM = 358;
		/** Token CURRENT_USER, to be returned by the scanner. */
		static final int CURRENT_USER = 359;
		/** Token CURSOR_SYM, to be returned by the scanner. */
		static final int CURSOR_SYM = 360;
		/** Token CURSOR_NAME_SYM, to be returned by the scanner. */
		static final int CURSOR_NAME_SYM = 361;
		/** Token CURTIME, to be returned by the scanner. */
		static final int CURTIME = 362;
		/** Token DATABASE, to be returned by the scanner. */
		static final int DATABASE = 363;
		/** Token DATABASES, to be returned by the scanner. */
		static final int DATABASES = 364;
		/** Token DATAFILE_SYM, to be returned by the scanner. */
		static final int DATAFILE_SYM = 365;
		/** Token DATA_SYM, to be returned by the scanner. */
		static final int DATA_SYM = 366;
		/** Token DATETIME_SYM, to be returned by the scanner. */
		static final int DATETIME_SYM = 367;
		/** Token DATE_ADD_INTERVAL, to be returned by the scanner. */
		static final int DATE_ADD_INTERVAL = 368;
		/** Token DATE_SUB_INTERVAL, to be returned by the scanner. */
		static final int DATE_SUB_INTERVAL = 369;
		/** Token DATE_SYM, to be returned by the scanner. */
		static final int DATE_SYM = 370;
		/** Token DAY_HOUR_SYM, to be returned by the scanner. */
		static final int DAY_HOUR_SYM = 371;
		/** Token DAY_MICROSECOND_SYM, to be returned by the scanner. */
		static final int DAY_MICROSECOND_SYM = 372;
		/** Token DAY_MINUTE_SYM, to be returned by the scanner. */
		static final int DAY_MINUTE_SYM = 373;
		/** Token DAY_SECOND_SYM, to be returned by the scanner. */
		static final int DAY_SECOND_SYM = 374;
		/** Token DAY_SYM, to be returned by the scanner. */
		static final int DAY_SYM = 375;
		/** Token DEALLOCATE_SYM, to be returned by the scanner. */
		static final int DEALLOCATE_SYM = 376;
		/** Token DECIMAL_NUM, to be returned by the scanner. */
		static final int DECIMAL_NUM = 377;
		/** Token DECIMAL_SYM, to be returned by the scanner. */
		static final int DECIMAL_SYM = 378;
		/** Token DECLARE_SYM, to be returned by the scanner. */
		static final int DECLARE_SYM = 379;
		/** Token DEFAULT_SYM, to be returned by the scanner. */
		static final int DEFAULT_SYM = 380;
		/** Token DEFAULT_AUTH_SYM, to be returned by the scanner. */
		static final int DEFAULT_AUTH_SYM = 381;
		/** Token DEFINER_SYM, to be returned by the scanner. */
		static final int DEFINER_SYM = 382;
		/** Token DELAYED_SYM, to be returned by the scanner. */
		static final int DELAYED_SYM = 383;
		/** Token DELAY_KEY_WRITE_SYM, to be returned by the scanner. */
		static final int DELAY_KEY_WRITE_SYM = 384;
		/** Token DELETE_SYM, to be returned by the scanner. */
		static final int DELETE_SYM = 385;
		/** Token DESC, to be returned by the scanner. */
		static final int DESC = 386;
		/** Token DESCRIBE, to be returned by the scanner. */
		static final int DESCRIBE = 387;
		/** Token OBSOLETE_TOKEN_388, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_388 = 388;
		/** Token DETERMINISTIC_SYM, to be returned by the scanner. */
		static final int DETERMINISTIC_SYM = 389;
		/** Token DIAGNOSTICS_SYM, to be returned by the scanner. */
		static final int DIAGNOSTICS_SYM = 390;
		/** Token DIRECTORY_SYM, to be returned by the scanner. */
		static final int DIRECTORY_SYM = 391;
		/** Token DISABLE_SYM, to be returned by the scanner. */
		static final int DISABLE_SYM = 392;
		/** Token DISCARD_SYM, to be returned by the scanner. */
		static final int DISCARD_SYM = 393;
		/** Token DISK_SYM, to be returned by the scanner. */
		static final int DISK_SYM = 394;
		/** Token DISTINCT, to be returned by the scanner. */
		static final int DISTINCT = 395;
		/** Token DIV_SYM, to be returned by the scanner. */
		static final int DIV_SYM = 396;
		/** Token DOUBLE_SYM, to be returned by the scanner. */
		static final int DOUBLE_SYM = 397;
		/** Token DO_SYM, to be returned by the scanner. */
		static final int DO_SYM = 398;
		/** Token DROP, to be returned by the scanner. */
		static final int DROP = 399;
		/** Token DUAL_SYM, to be returned by the scanner. */
		static final int DUAL_SYM = 400;
		/** Token DUMPFILE, to be returned by the scanner. */
		static final int DUMPFILE = 401;
		/** Token DUPLICATE_SYM, to be returned by the scanner. */
		static final int DUPLICATE_SYM = 402;
		/** Token DYNAMIC_SYM, to be returned by the scanner. */
		static final int DYNAMIC_SYM = 403;
		/** Token EACH_SYM, to be returned by the scanner. */
		static final int EACH_SYM = 404;
		/** Token ELSE, to be returned by the scanner. */
		static final int ELSE = 405;
		/** Token ELSEIF_SYM, to be returned by the scanner. */
		static final int ELSEIF_SYM = 406;
		/** Token ENABLE_SYM, to be returned by the scanner. */
		static final int ENABLE_SYM = 407;
		/** Token ENCLOSED, to be returned by the scanner. */
		static final int ENCLOSED = 408;
		/** Token END, to be returned by the scanner. */
		static final int END = 409;
		/** Token ENDS_SYM, to be returned by the scanner. */
		static final int ENDS_SYM = 410;
		/** Token END_OF_INPUT, to be returned by the scanner. */
		static final int END_OF_INPUT = 411;
		/** Token ENGINES_SYM, to be returned by the scanner. */
		static final int ENGINES_SYM = 412;
		/** Token ENGINE_SYM, to be returned by the scanner. */
		static final int ENGINE_SYM = 413;
		/** Token ENUM_SYM, to be returned by the scanner. */
		static final int ENUM_SYM = 414;
		/** Token EQ, to be returned by the scanner. */
		static final int EQ = 415;
		/** Token EQUAL_SYM, to be returned by the scanner. */
		static final int EQUAL_SYM = 416;
		/** Token ERROR_SYM, to be returned by the scanner. */
		static final int ERROR_SYM = 417;
		/** Token ERRORS, to be returned by the scanner. */
		static final int ERRORS = 418;
		/** Token ESCAPED, to be returned by the scanner. */
		static final int ESCAPED = 419;
		/** Token ESCAPE_SYM, to be returned by the scanner. */
		static final int ESCAPE_SYM = 420;
		/** Token EVENTS_SYM, to be returned by the scanner. */
		static final int EVENTS_SYM = 421;
		/** Token EVENT_SYM, to be returned by the scanner. */
		static final int EVENT_SYM = 422;
		/** Token EVERY_SYM, to be returned by the scanner. */
		static final int EVERY_SYM = 423;
		/** Token EXCHANGE_SYM, to be returned by the scanner. */
		static final int EXCHANGE_SYM = 424;
		/** Token EXECUTE_SYM, to be returned by the scanner. */
		static final int EXECUTE_SYM = 425;
		/** Token EXISTS, to be returned by the scanner. */
		static final int EXISTS = 426;
		/** Token EXIT_SYM, to be returned by the scanner. */
		static final int EXIT_SYM = 427;
		/** Token EXPANSION_SYM, to be returned by the scanner. */
		static final int EXPANSION_SYM = 428;
		/** Token EXPIRE_SYM, to be returned by the scanner. */
		static final int EXPIRE_SYM = 429;
		/** Token EXPORT_SYM, to be returned by the scanner. */
		static final int EXPORT_SYM = 430;
		/** Token EXTENDED_SYM, to be returned by the scanner. */
		static final int EXTENDED_SYM = 431;
		/** Token EXTENT_SIZE_SYM, to be returned by the scanner. */
		static final int EXTENT_SIZE_SYM = 432;
		/** Token EXTRACT_SYM, to be returned by the scanner. */
		static final int EXTRACT_SYM = 433;
		/** Token FALSE_SYM, to be returned by the scanner. */
		static final int FALSE_SYM = 434;
		/** Token FAST_SYM, to be returned by the scanner. */
		static final int FAST_SYM = 435;
		/** Token FAULTS_SYM, to be returned by the scanner. */
		static final int FAULTS_SYM = 436;
		/** Token FETCH_SYM, to be returned by the scanner. */
		static final int FETCH_SYM = 437;
		/** Token FILE_SYM, to be returned by the scanner. */
		static final int FILE_SYM = 438;
		/** Token FILE_BLOCK_SIZE_SYM, to be returned by the scanner. */
		static final int FILE_BLOCK_SIZE_SYM = 439;
		/** Token FILTER_SYM, to be returned by the scanner. */
		static final int FILTER_SYM = 440;
		/** Token FIRST_SYM, to be returned by the scanner. */
		static final int FIRST_SYM = 441;
		/** Token FIXED_SYM, to be returned by the scanner. */
		static final int FIXED_SYM = 442;
		/** Token FLOAT_NUM, to be returned by the scanner. */
		static final int FLOAT_NUM = 443;
		/** Token FLOAT_SYM, to be returned by the scanner. */
		static final int FLOAT_SYM = 444;
		/** Token FLUSH_SYM, to be returned by the scanner. */
		static final int FLUSH_SYM = 445;
		/** Token FOLLOWS_SYM, to be returned by the scanner. */
		static final int FOLLOWS_SYM = 446;
		/** Token FORCE_SYM, to be returned by the scanner. */
		static final int FORCE_SYM = 447;
		/** Token FOREIGN, to be returned by the scanner. */
		static final int FOREIGN = 448;
		/** Token FOR_SYM, to be returned by the scanner. */
		static final int FOR_SYM = 449;
		/** Token FORMAT_SYM, to be returned by the scanner. */
		static final int FORMAT_SYM = 450;
		/** Token FOUND_SYM, to be returned by the scanner. */
		static final int FOUND_SYM = 451;
		/** Token FROM, to be returned by the scanner. */
		static final int FROM = 452;
		/** Token FULL, to be returned by the scanner. */
		static final int FULL = 453;
		/** Token FULLTEXT_SYM, to be returned by the scanner. */
		static final int FULLTEXT_SYM = 454;
		/** Token FUNCTION_SYM, to be returned by the scanner. */
		static final int FUNCTION_SYM = 455;
		/** Token GE, to be returned by the scanner. */
		static final int GE = 456;
		/** Token GENERAL, to be returned by the scanner. */
		static final int GENERAL = 457;
		/** Token GENERATED, to be returned by the scanner. */
		static final int GENERATED = 458;
		/** Token GROUP_REPLICATION, to be returned by the scanner. */
		static final int GROUP_REPLICATION = 459;
		/** Token GEOMETRYCOLLECTION_SYM, to be returned by the scanner. */
		static final int GEOMETRYCOLLECTION_SYM = 460;
		/** Token GEOMETRY_SYM, to be returned by the scanner. */
		static final int GEOMETRY_SYM = 461;
		/** Token GET_FORMAT, to be returned by the scanner. */
		static final int GET_FORMAT = 462;
		/** Token GET_SYM, to be returned by the scanner. */
		static final int GET_SYM = 463;
		/** Token GLOBAL_SYM, to be returned by the scanner. */
		static final int GLOBAL_SYM = 464;
		/** Token GRANT, to be returned by the scanner. */
		static final int GRANT = 465;
		/** Token GRANTS, to be returned by the scanner. */
		static final int GRANTS = 466;
		/** Token GROUP_SYM, to be returned by the scanner. */
		static final int GROUP_SYM = 467;
		/** Token GROUP_CONCAT_SYM, to be returned by the scanner. */
		static final int GROUP_CONCAT_SYM = 468;
		/** Token GT_SYM, to be returned by the scanner. */
		static final int GT_SYM = 469;
		/** Token HANDLER_SYM, to be returned by the scanner. */
		static final int HANDLER_SYM = 470;
		/** Token HASH_SYM, to be returned by the scanner. */
		static final int HASH_SYM = 471;
		/** Token HAVING, to be returned by the scanner. */
		static final int HAVING = 472;
		/** Token HELP_SYM, to be returned by the scanner. */
		static final int HELP_SYM = 473;
		/** Token HEX_NUM, to be returned by the scanner. */
		static final int HEX_NUM = 474;
		/** Token HIGH_PRIORITY, to be returned by the scanner. */
		static final int HIGH_PRIORITY = 475;
		/** Token HOST_SYM, to be returned by the scanner. */
		static final int HOST_SYM = 476;
		/** Token HOSTS_SYM, to be returned by the scanner. */
		static final int HOSTS_SYM = 477;
		/** Token HOUR_MICROSECOND_SYM, to be returned by the scanner. */
		static final int HOUR_MICROSECOND_SYM = 478;
		/** Token HOUR_MINUTE_SYM, to be returned by the scanner. */
		static final int HOUR_MINUTE_SYM = 479;
		/** Token HOUR_SECOND_SYM, to be returned by the scanner. */
		static final int HOUR_SECOND_SYM = 480;
		/** Token HOUR_SYM, to be returned by the scanner. */
		static final int HOUR_SYM = 481;
		/** Token IDENT, to be returned by the scanner. */
		static final int IDENT = 482;
		/** Token IDENTIFIED_SYM, to be returned by the scanner. */
		static final int IDENTIFIED_SYM = 483;
		/** Token IDENT_QUOTED, to be returned by the scanner. */
		static final int IDENT_QUOTED = 484;
		/** Token IF, to be returned by the scanner. */
		static final int IF = 485;
		/** Token IGNORE_SYM, to be returned by the scanner. */
		static final int IGNORE_SYM = 486;
		/** Token IGNORE_SERVER_IDS_SYM, to be returned by the scanner. */
		static final int IGNORE_SERVER_IDS_SYM = 487;
		/** Token IMPORT, to be returned by the scanner. */
		static final int IMPORT = 488;
		/** Token INDEXES, to be returned by the scanner. */
		static final int INDEXES = 489;
		/** Token INDEX_SYM, to be returned by the scanner. */
		static final int INDEX_SYM = 490;
		/** Token INFILE_SYM, to be returned by the scanner. */
		static final int INFILE_SYM = 491;
		/** Token INITIAL_SIZE_SYM, to be returned by the scanner. */
		static final int INITIAL_SIZE_SYM = 492;
		/** Token INNER_SYM, to be returned by the scanner. */
		static final int INNER_SYM = 493;
		/** Token INOUT_SYM, to be returned by the scanner. */
		static final int INOUT_SYM = 494;
		/** Token INSENSITIVE_SYM, to be returned by the scanner. */
		static final int INSENSITIVE_SYM = 495;
		/** Token INSERT_SYM, to be returned by the scanner. */
		static final int INSERT_SYM = 496;
		/** Token INSERT_METHOD, to be returned by the scanner. */
		static final int INSERT_METHOD = 497;
		/** Token INSTANCE_SYM, to be returned by the scanner. */
		static final int INSTANCE_SYM = 498;
		/** Token INSTALL_SYM, to be returned by the scanner. */
		static final int INSTALL_SYM = 499;
		/** Token INTERVAL_SYM, to be returned by the scanner. */
		static final int INTERVAL_SYM = 500;
		/** Token INTO, to be returned by the scanner. */
		static final int INTO = 501;
		/** Token INT_SYM, to be returned by the scanner. */
		static final int INT_SYM = 502;
		/** Token INVOKER_SYM, to be returned by the scanner. */
		static final int INVOKER_SYM = 503;
		/** Token IN_SYM, to be returned by the scanner. */
		static final int IN_SYM = 504;
		/** Token IO_AFTER_GTIDS, to be returned by the scanner. */
		static final int IO_AFTER_GTIDS = 505;
		/** Token IO_BEFORE_GTIDS, to be returned by the scanner. */
		static final int IO_BEFORE_GTIDS = 506;
		/** Token IO_SYM, to be returned by the scanner. */
		static final int IO_SYM = 507;
		/** Token IPC_SYM, to be returned by the scanner. */
		static final int IPC_SYM = 508;
		/** Token IS, to be returned by the scanner. */
		static final int IS = 509;
		/** Token ISOLATION, to be returned by the scanner. */
		static final int ISOLATION = 510;
		/** Token ISSUER_SYM, to be returned by the scanner. */
		static final int ISSUER_SYM = 511;
		/** Token ITERATE_SYM, to be returned by the scanner. */
		static final int ITERATE_SYM = 512;
		/** Token JOIN_SYM, to be returned by the scanner. */
		static final int JOIN_SYM = 513;
		/** Token JSON_SEPARATOR_SYM, to be returned by the scanner. */
		static final int JSON_SEPARATOR_SYM = 514;
		/** Token JSON_SYM, to be returned by the scanner. */
		static final int JSON_SYM = 515;
		/** Token KEYS, to be returned by the scanner. */
		static final int KEYS = 516;
		/** Token KEY_BLOCK_SIZE, to be returned by the scanner. */
		static final int KEY_BLOCK_SIZE = 517;
		/** Token KEY_SYM, to be returned by the scanner. */
		static final int KEY_SYM = 518;
		/** Token KILL_SYM, to be returned by the scanner. */
		static final int KILL_SYM = 519;
		/** Token LANGUAGE_SYM, to be returned by the scanner. */
		static final int LANGUAGE_SYM = 520;
		/** Token LAST_SYM, to be returned by the scanner. */
		static final int LAST_SYM = 521;
		/** Token LE, to be returned by the scanner. */
		static final int LE = 522;
		/** Token LEADING, to be returned by the scanner. */
		static final int LEADING = 523;
		/** Token LEAVES, to be returned by the scanner. */
		static final int LEAVES = 524;
		/** Token LEAVE_SYM, to be returned by the scanner. */
		static final int LEAVE_SYM = 525;
		/** Token LEFT, to be returned by the scanner. */
		static final int LEFT = 526;
		/** Token LESS_SYM, to be returned by the scanner. */
		static final int LESS_SYM = 527;
		/** Token LEVEL_SYM, to be returned by the scanner. */
		static final int LEVEL_SYM = 528;
		/** Token LEX_HOSTNAME, to be returned by the scanner. */
		static final int LEX_HOSTNAME = 529;
		/** Token LIKE, to be returned by the scanner. */
		static final int LIKE = 530;
		/** Token LIMIT, to be returned by the scanner. */
		static final int LIMIT = 531;
		/** Token LINEAR_SYM, to be returned by the scanner. */
		static final int LINEAR_SYM = 532;
		/** Token LINES, to be returned by the scanner. */
		static final int LINES = 533;
		/** Token LINESTRING_SYM, to be returned by the scanner. */
		static final int LINESTRING_SYM = 534;
		/** Token LIST_SYM, to be returned by the scanner. */
		static final int LIST_SYM = 535;
		/** Token LOAD, to be returned by the scanner. */
		static final int LOAD = 536;
		/** Token LOCAL_SYM, to be returned by the scanner. */
		static final int LOCAL_SYM = 537;
		/** Token OBSOLETE_TOKEN_538, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_538 = 538;
		/** Token LOCKS_SYM, to be returned by the scanner. */
		static final int LOCKS_SYM = 539;
		/** Token LOCK_SYM, to be returned by the scanner. */
		static final int LOCK_SYM = 540;
		/** Token LOGFILE_SYM, to be returned by the scanner. */
		static final int LOGFILE_SYM = 541;
		/** Token LOGS_SYM, to be returned by the scanner. */
		static final int LOGS_SYM = 542;
		/** Token LONGBLOB_SYM, to be returned by the scanner. */
		static final int LONGBLOB_SYM = 543;
		/** Token LONGTEXT_SYM, to be returned by the scanner. */
		static final int LONGTEXT_SYM = 544;
		/** Token LONG_NUM, to be returned by the scanner. */
		static final int LONG_NUM = 545;
		/** Token LONG_SYM, to be returned by the scanner. */
		static final int LONG_SYM = 546;
		/** Token LOOP_SYM, to be returned by the scanner. */
		static final int LOOP_SYM = 547;
		/** Token LOW_PRIORITY, to be returned by the scanner. */
		static final int LOW_PRIORITY = 548;
		/** Token LT, to be returned by the scanner. */
		static final int LT = 549;
		/** Token OBSOLETE_TOKEN_550, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_550 = 550;
		/** Token OBSOLETE_TOKEN_551, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_551 = 551;
		/** Token OBSOLETE_TOKEN_552, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_552 = 552;
		/** Token OBSOLETE_TOKEN_553, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_553 = 553;
		/** Token OBSOLETE_TOKEN_554, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_554 = 554;
		/** Token OBSOLETE_TOKEN_555, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_555 = 555;
		/** Token OBSOLETE_TOKEN_556, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_556 = 556;
		/** Token OBSOLETE_TOKEN_557, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_557 = 557;
		/** Token OBSOLETE_TOKEN_558, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_558 = 558;
		/** Token OBSOLETE_TOKEN_559, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_559 = 559;
		/** Token OBSOLETE_TOKEN_561, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_561 = 561;
		/** Token OBSOLETE_TOKEN_562, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_562 = 562;
		/** Token OBSOLETE_TOKEN_563, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_563 = 563;
		/** Token OBSOLETE_TOKEN_564, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_564 = 564;
		/** Token OBSOLETE_TOKEN_565, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_565 = 565;
		/** Token OBSOLETE_TOKEN_566, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_566 = 566;
		/** Token OBSOLETE_TOKEN_567, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_567 = 567;
		/** Token OBSOLETE_TOKEN_568, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_568 = 568;
		/** Token OBSOLETE_TOKEN_569, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_569 = 569;
		/** Token OBSOLETE_TOKEN_570, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_570 = 570;
		/** Token MASTER_SYM, to be returned by the scanner. */
		static final int MASTER_SYM = 571;
		/** Token OBSOLETE_TOKEN_572, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_572 = 572;
		/** Token OBSOLETE_TOKEN_573, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_573 = 573;
		/** Token MATCH, to be returned by the scanner. */
		static final int MATCH = 574;
		/** Token MAX_CONNECTIONS_PER_HOUR, to be returned by the scanner. */
		static final int MAX_CONNECTIONS_PER_HOUR = 575;
		/** Token MAX_QUERIES_PER_HOUR, to be returned by the scanner. */
		static final int MAX_QUERIES_PER_HOUR = 576;
		/** Token MAX_ROWS, to be returned by the scanner. */
		static final int MAX_ROWS = 577;
		/** Token MAX_SIZE_SYM, to be returned by the scanner. */
		static final int MAX_SIZE_SYM = 578;
		/** Token MAX_SYM, to be returned by the scanner. */
		static final int MAX_SYM = 579;
		/** Token MAX_UPDATES_PER_HOUR, to be returned by the scanner. */
		static final int MAX_UPDATES_PER_HOUR = 580;
		/** Token MAX_USER_CONNECTIONS_SYM, to be returned by the scanner. */
		static final int MAX_USER_CONNECTIONS_SYM = 581;
		/** Token MAX_VALUE_SYM, to be returned by the scanner. */
		static final int MAX_VALUE_SYM = 582;
		/** Token MEDIUMBLOB_SYM, to be returned by the scanner. */
		static final int MEDIUMBLOB_SYM = 583;
		/** Token MEDIUMINT_SYM, to be returned by the scanner. */
		static final int MEDIUMINT_SYM = 584;
		/** Token MEDIUMTEXT_SYM, to be returned by the scanner. */
		static final int MEDIUMTEXT_SYM = 585;
		/** Token MEDIUM_SYM, to be returned by the scanner. */
		static final int MEDIUM_SYM = 586;
		/** Token MEMORY_SYM, to be returned by the scanner. */
		static final int MEMORY_SYM = 587;
		/** Token MERGE_SYM, to be returned by the scanner. */
		static final int MERGE_SYM = 588;
		/** Token MESSAGE_TEXT_SYM, to be returned by the scanner. */
		static final int MESSAGE_TEXT_SYM = 589;
		/** Token MICROSECOND_SYM, to be returned by the scanner. */
		static final int MICROSECOND_SYM = 590;
		/** Token MIGRATE_SYM, to be returned by the scanner. */
		static final int MIGRATE_SYM = 591;
		/** Token MINUTE_MICROSECOND_SYM, to be returned by the scanner. */
		static final int MINUTE_MICROSECOND_SYM = 592;
		/** Token MINUTE_SECOND_SYM, to be returned by the scanner. */
		static final int MINUTE_SECOND_SYM = 593;
		/** Token MINUTE_SYM, to be returned by the scanner. */
		static final int MINUTE_SYM = 594;
		/** Token MIN_ROWS, to be returned by the scanner. */
		static final int MIN_ROWS = 595;
		/** Token MIN_SYM, to be returned by the scanner. */
		static final int MIN_SYM = 596;
		/** Token MODE_SYM, to be returned by the scanner. */
		static final int MODE_SYM = 597;
		/** Token MODIFIES_SYM, to be returned by the scanner. */
		static final int MODIFIES_SYM = 598;
		/** Token MODIFY_SYM, to be returned by the scanner. */
		static final int MODIFY_SYM = 599;
		/** Token MOD_SYM, to be returned by the scanner. */
		static final int MOD_SYM = 600;
		/** Token MONTH_SYM, to be returned by the scanner. */
		static final int MONTH_SYM = 601;
		/** Token MULTILINESTRING_SYM, to be returned by the scanner. */
		static final int MULTILINESTRING_SYM = 602;
		/** Token MULTIPOINT_SYM, to be returned by the scanner. */
		static final int MULTIPOINT_SYM = 603;
		/** Token MULTIPOLYGON_SYM, to be returned by the scanner. */
		static final int MULTIPOLYGON_SYM = 604;
		/** Token MUTEX_SYM, to be returned by the scanner. */
		static final int MUTEX_SYM = 605;
		/** Token MYSQL_ERRNO_SYM, to be returned by the scanner. */
		static final int MYSQL_ERRNO_SYM = 606;
		/** Token NAMES_SYM, to be returned by the scanner. */
		static final int NAMES_SYM = 607;
		/** Token NAME_SYM, to be returned by the scanner. */
		static final int NAME_SYM = 608;
		/** Token NATIONAL_SYM, to be returned by the scanner. */
		static final int NATIONAL_SYM = 609;
		/** Token NATURAL, to be returned by the scanner. */
		static final int NATURAL = 610;
		/** Token NCHAR_STRING, to be returned by the scanner. */
		static final int NCHAR_STRING = 611;
		/** Token NCHAR_SYM, to be returned by the scanner. */
		static final int NCHAR_SYM = 612;
		/** Token NDBCLUSTER_SYM, to be returned by the scanner. */
		static final int NDBCLUSTER_SYM = 613;
		/** Token NE, to be returned by the scanner. */
		static final int NE = 614;
		/** Token NEG, to be returned by the scanner. */
		static final int NEG = 615;
		/** Token NEVER_SYM, to be returned by the scanner. */
		static final int NEVER_SYM = 616;
		/** Token NEW_SYM, to be returned by the scanner. */
		static final int NEW_SYM = 617;
		/** Token NEXT_SYM, to be returned by the scanner. */
		static final int NEXT_SYM = 618;
		/** Token NODEGROUP_SYM, to be returned by the scanner. */
		static final int NODEGROUP_SYM = 619;
		/** Token NONE_SYM, to be returned by the scanner. */
		static final int NONE_SYM = 620;
		/** Token NOT2_SYM, to be returned by the scanner. */
		static final int NOT2_SYM = 621;
		/** Token NOT_SYM, to be returned by the scanner. */
		static final int NOT_SYM = 622;
		/** Token NOW_SYM, to be returned by the scanner. */
		static final int NOW_SYM = 623;
		/** Token NO_SYM, to be returned by the scanner. */
		static final int NO_SYM = 624;
		/** Token NO_WAIT_SYM, to be returned by the scanner. */
		static final int NO_WAIT_SYM = 625;
		/** Token NO_WRITE_TO_BINLOG, to be returned by the scanner. */
		static final int NO_WRITE_TO_BINLOG = 626;
		/** Token NULL_SYM, to be returned by the scanner. */
		static final int NULL_SYM = 627;
		/** Token NUM, to be returned by the scanner. */
		static final int NUM = 628;
		/** Token NUMBER_SYM, to be returned by the scanner. */
		static final int NUMBER_SYM = 629;
		/** Token NUMERIC_SYM, to be returned by the scanner. */
		static final int NUMERIC_SYM = 630;
		/** Token NVARCHAR_SYM, to be returned by the scanner. */
		static final int NVARCHAR_SYM = 631;
		/** Token OFFSET_SYM, to be returned by the scanner. */
		static final int OFFSET_SYM = 632;
		/** Token ON_SYM, to be returned by the scanner. */
		static final int ON_SYM = 633;
		/** Token ONE_SYM, to be returned by the scanner. */
		static final int ONE_SYM = 634;
		/** Token ONLY_SYM, to be returned by the scanner. */
		static final int ONLY_SYM = 635;
		/** Token OPEN_SYM, to be returned by the scanner. */
		static final int OPEN_SYM = 636;
		/** Token OPTIMIZE, to be returned by the scanner. */
		static final int OPTIMIZE = 637;
		/** Token OPTIMIZER_COSTS_SYM, to be returned by the scanner. */
		static final int OPTIMIZER_COSTS_SYM = 638;
		/** Token OPTIONS_SYM, to be returned by the scanner. */
		static final int OPTIONS_SYM = 639;
		/** Token OPTION, to be returned by the scanner. */
		static final int OPTION = 640;
		/** Token OPTIONALLY, to be returned by the scanner. */
		static final int OPTIONALLY = 641;
		/** Token OR2_SYM, to be returned by the scanner. */
		static final int OR2_SYM = 642;
		/** Token ORDER_SYM, to be returned by the scanner. */
		static final int ORDER_SYM = 643;
		/** Token OR_OR_SYM, to be returned by the scanner. */
		static final int OR_OR_SYM = 644;
		/** Token OR_SYM, to be returned by the scanner. */
		static final int OR_SYM = 645;
		/** Token OUTER_SYM, to be returned by the scanner. */
		static final int OUTER_SYM = 646;
		/** Token OUTFILE, to be returned by the scanner. */
		static final int OUTFILE = 647;
		/** Token OUT_SYM, to be returned by the scanner. */
		static final int OUT_SYM = 648;
		/** Token OWNER_SYM, to be returned by the scanner. */
		static final int OWNER_SYM = 649;
		/** Token PACK_KEYS_SYM, to be returned by the scanner. */
		static final int PACK_KEYS_SYM = 650;
		/** Token PAGE_SYM, to be returned by the scanner. */
		static final int PAGE_SYM = 651;
		/** Token PARAM_MARKER, to be returned by the scanner. */
		static final int PARAM_MARKER = 652;
		/** Token PARSER_SYM, to be returned by the scanner. */
		static final int PARSER_SYM = 653;
		/** Token OBSOLETE_TOKEN_654, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_654 = 654;
		/** Token PARTIAL, to be returned by the scanner. */
		static final int PARTIAL = 655;
		/** Token PARTITION_SYM, to be returned by the scanner. */
		static final int PARTITION_SYM = 656;
		/** Token PARTITIONS_SYM, to be returned by the scanner. */
		static final int PARTITIONS_SYM = 657;
		/** Token PARTITIONING_SYM, to be returned by the scanner. */
		static final int PARTITIONING_SYM = 658;
		/** Token PASSWORD, to be returned by the scanner. */
		static final int PASSWORD = 659;
		/** Token PHASE_SYM, to be returned by the scanner. */
		static final int PHASE_SYM = 660;
		/** Token PLUGIN_DIR_SYM, to be returned by the scanner. */
		static final int PLUGIN_DIR_SYM = 661;
		/** Token PLUGIN_SYM, to be returned by the scanner. */
		static final int PLUGIN_SYM = 662;
		/** Token PLUGINS_SYM, to be returned by the scanner. */
		static final int PLUGINS_SYM = 663;
		/** Token POINT_SYM, to be returned by the scanner. */
		static final int POINT_SYM = 664;
		/** Token POLYGON_SYM, to be returned by the scanner. */
		static final int POLYGON_SYM = 665;
		/** Token PORT_SYM, to be returned by the scanner. */
		static final int PORT_SYM = 666;
		/** Token POSITION_SYM, to be returned by the scanner. */
		static final int POSITION_SYM = 667;
		/** Token PRECEDES_SYM, to be returned by the scanner. */
		static final int PRECEDES_SYM = 668;
		/** Token PRECISION, to be returned by the scanner. */
		static final int PRECISION = 669;
		/** Token PREPARE_SYM, to be returned by the scanner. */
		static final int PREPARE_SYM = 670;
		/** Token PRESERVE_SYM, to be returned by the scanner. */
		static final int PRESERVE_SYM = 671;
		/** Token PREV_SYM, to be returned by the scanner. */
		static final int PREV_SYM = 672;
		/** Token PRIMARY_SYM, to be returned by the scanner. */
		static final int PRIMARY_SYM = 673;
		/** Token PRIVILEGES, to be returned by the scanner. */
		static final int PRIVILEGES = 674;
		/** Token PROCEDURE_SYM, to be returned by the scanner. */
		static final int PROCEDURE_SYM = 675;
		/** Token PROCESS, to be returned by the scanner. */
		static final int PROCESS = 676;
		/** Token PROCESSLIST_SYM, to be returned by the scanner. */
		static final int PROCESSLIST_SYM = 677;
		/** Token PROFILE_SYM, to be returned by the scanner. */
		static final int PROFILE_SYM = 678;
		/** Token PROFILES_SYM, to be returned by the scanner. */
		static final int PROFILES_SYM = 679;
		/** Token PROXY_SYM, to be returned by the scanner. */
		static final int PROXY_SYM = 680;
		/** Token PURGE, to be returned by the scanner. */
		static final int PURGE = 681;
		/** Token QUARTER_SYM, to be returned by the scanner. */
		static final int QUARTER_SYM = 682;
		/** Token QUERY_SYM, to be returned by the scanner. */
		static final int QUERY_SYM = 683;
		/** Token QUICK, to be returned by the scanner. */
		static final int QUICK = 684;
		/** Token RANGE_SYM, to be returned by the scanner. */
		static final int RANGE_SYM = 685;
		/** Token READS_SYM, to be returned by the scanner. */
		static final int READS_SYM = 686;
		/** Token READ_ONLY_SYM, to be returned by the scanner. */
		static final int READ_ONLY_SYM = 687;
		/** Token READ_SYM, to be returned by the scanner. */
		static final int READ_SYM = 688;
		/** Token READ_WRITE_SYM, to be returned by the scanner. */
		static final int READ_WRITE_SYM = 689;
		/** Token REAL_SYM, to be returned by the scanner. */
		static final int REAL_SYM = 690;
		/** Token REBUILD_SYM, to be returned by the scanner. */
		static final int REBUILD_SYM = 691;
		/** Token RECOVER_SYM, to be returned by the scanner. */
		static final int RECOVER_SYM = 692;
		/** Token OBSOLETE_TOKEN_693, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_693 = 693;
		/** Token REDO_BUFFER_SIZE_SYM, to be returned by the scanner. */
		static final int REDO_BUFFER_SIZE_SYM = 694;
		/** Token REDUNDANT_SYM, to be returned by the scanner. */
		static final int REDUNDANT_SYM = 695;
		/** Token REFERENCES, to be returned by the scanner. */
		static final int REFERENCES = 696;
		/** Token REGEXP, to be returned by the scanner. */
		static final int REGEXP = 697;
		/** Token RELAY, to be returned by the scanner. */
		static final int RELAY = 698;
		/** Token RELAYLOG_SYM, to be returned by the scanner. */
		static final int RELAYLOG_SYM = 699;
		/** Token RELAY_LOG_FILE_SYM, to be returned by the scanner. */
		static final int RELAY_LOG_FILE_SYM = 700;
		/** Token RELAY_LOG_POS_SYM, to be returned by the scanner. */
		static final int RELAY_LOG_POS_SYM = 701;
		/** Token RELAY_THREAD, to be returned by the scanner. */
		static final int RELAY_THREAD = 702;
		/** Token RELEASE_SYM, to be returned by the scanner. */
		static final int RELEASE_SYM = 703;
		/** Token RELOAD, to be returned by the scanner. */
		static final int RELOAD = 704;
		/** Token REMOVE_SYM, to be returned by the scanner. */
		static final int REMOVE_SYM = 705;
		/** Token RENAME, to be returned by the scanner. */
		static final int RENAME = 706;
		/** Token REORGANIZE_SYM, to be returned by the scanner. */
		static final int REORGANIZE_SYM = 707;
		/** Token REPAIR, to be returned by the scanner. */
		static final int REPAIR = 708;
		/** Token REPEATABLE_SYM, to be returned by the scanner. */
		static final int REPEATABLE_SYM = 709;
		/** Token REPEAT_SYM, to be returned by the scanner. */
		static final int REPEAT_SYM = 710;
		/** Token REPLACE_SYM, to be returned by the scanner. */
		static final int REPLACE_SYM = 711;
		/** Token REPLICATION, to be returned by the scanner. */
		static final int REPLICATION = 712;
		/** Token REPLICATE_DO_DB, to be returned by the scanner. */
		static final int REPLICATE_DO_DB = 713;
		/** Token REPLICATE_IGNORE_DB, to be returned by the scanner. */
		static final int REPLICATE_IGNORE_DB = 714;
		/** Token REPLICATE_DO_TABLE, to be returned by the scanner. */
		static final int REPLICATE_DO_TABLE = 715;
		/** Token REPLICATE_IGNORE_TABLE, to be returned by the scanner. */
		static final int REPLICATE_IGNORE_TABLE = 716;
		/** Token REPLICATE_WILD_DO_TABLE, to be returned by the scanner. */
		static final int REPLICATE_WILD_DO_TABLE = 717;
		/** Token REPLICATE_WILD_IGNORE_TABLE, to be returned by the scanner. */
		static final int REPLICATE_WILD_IGNORE_TABLE = 718;
		/** Token REPLICATE_REWRITE_DB, to be returned by the scanner. */
		static final int REPLICATE_REWRITE_DB = 719;
		/** Token REQUIRE_SYM, to be returned by the scanner. */
		static final int REQUIRE_SYM = 720;
		/** Token RESET_SYM, to be returned by the scanner. */
		static final int RESET_SYM = 721;
		/** Token RESIGNAL_SYM, to be returned by the scanner. */
		static final int RESIGNAL_SYM = 722;
		/** Token RESOURCES, to be returned by the scanner. */
		static final int RESOURCES = 723;
		/** Token RESTORE_SYM, to be returned by the scanner. */
		static final int RESTORE_SYM = 724;
		/** Token RESTRICT, to be returned by the scanner. */
		static final int RESTRICT = 725;
		/** Token RESUME_SYM, to be returned by the scanner. */
		static final int RESUME_SYM = 726;
		/** Token RETURNED_SQLSTATE_SYM, to be returned by the scanner. */
		static final int RETURNED_SQLSTATE_SYM = 727;
		/** Token RETURNS_SYM, to be returned by the scanner. */
		static final int RETURNS_SYM = 728;
		/** Token RETURN_SYM, to be returned by the scanner. */
		static final int RETURN_SYM = 729;
		/** Token REVERSE_SYM, to be returned by the scanner. */
		static final int REVERSE_SYM = 730;
		/** Token REVOKE, to be returned by the scanner. */
		static final int REVOKE = 731;
		/** Token RIGHT, to be returned by the scanner. */
		static final int RIGHT = 732;
		/** Token ROLLBACK_SYM, to be returned by the scanner. */
		static final int ROLLBACK_SYM = 733;
		/** Token ROLLUP_SYM, to be returned by the scanner. */
		static final int ROLLUP_SYM = 734;
		/** Token ROTATE_SYM, to be returned by the scanner. */
		static final int ROTATE_SYM = 735;
		/** Token ROUTINE_SYM, to be returned by the scanner. */
		static final int ROUTINE_SYM = 736;
		/** Token ROWS_SYM, to be returned by the scanner. */
		static final int ROWS_SYM = 737;
		/** Token ROW_FORMAT_SYM, to be returned by the scanner. */
		static final int ROW_FORMAT_SYM = 738;
		/** Token ROW_SYM, to be returned by the scanner. */
		static final int ROW_SYM = 739;
		/** Token ROW_COUNT_SYM, to be returned by the scanner. */
		static final int ROW_COUNT_SYM = 740;
		/** Token RTREE_SYM, to be returned by the scanner. */
		static final int RTREE_SYM = 741;
		/** Token SAVEPOINT_SYM, to be returned by the scanner. */
		static final int SAVEPOINT_SYM = 742;
		/** Token SCHEDULE_SYM, to be returned by the scanner. */
		static final int SCHEDULE_SYM = 743;
		/** Token SCHEMA_NAME_SYM, to be returned by the scanner. */
		static final int SCHEMA_NAME_SYM = 744;
		/** Token SECOND_MICROSECOND_SYM, to be returned by the scanner. */
		static final int SECOND_MICROSECOND_SYM = 745;
		/** Token SECOND_SYM, to be returned by the scanner. */
		static final int SECOND_SYM = 746;
		/** Token SECURITY_SYM, to be returned by the scanner. */
		static final int SECURITY_SYM = 747;
		/** Token SELECT_SYM, to be returned by the scanner. */
		static final int SELECT_SYM = 748;
		/** Token SENSITIVE_SYM, to be returned by the scanner. */
		static final int SENSITIVE_SYM = 749;
		/** Token SEPARATOR_SYM, to be returned by the scanner. */
		static final int SEPARATOR_SYM = 750;
		/** Token SERIALIZABLE_SYM, to be returned by the scanner. */
		static final int SERIALIZABLE_SYM = 751;
		/** Token SERIAL_SYM, to be returned by the scanner. */
		static final int SERIAL_SYM = 752;
		/** Token SESSION_SYM, to be returned by the scanner. */
		static final int SESSION_SYM = 753;
		/** Token SERVER_SYM, to be returned by the scanner. */
		static final int SERVER_SYM = 754;
		/** Token OBSOLETE_TOKEN_755, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_755 = 755;
		/** Token SET_SYM, to be returned by the scanner. */
		static final int SET_SYM = 756;
		/** Token SET_VAR, to be returned by the scanner. */
		static final int SET_VAR = 757;
		/** Token SHARE_SYM, to be returned by the scanner. */
		static final int SHARE_SYM = 758;
		/** Token SHIFT_LEFT, to be returned by the scanner. */
		static final int SHIFT_LEFT = 759;
		/** Token SHIFT_RIGHT, to be returned by the scanner. */
		static final int SHIFT_RIGHT = 760;
		/** Token SHOW, to be returned by the scanner. */
		static final int SHOW = 761;
		/** Token SHUTDOWN, to be returned by the scanner. */
		static final int SHUTDOWN = 762;
		/** Token SIGNAL_SYM, to be returned by the scanner. */
		static final int SIGNAL_SYM = 763;
		/** Token SIGNED_SYM, to be returned by the scanner. */
		static final int SIGNED_SYM = 764;
		/** Token SIMPLE_SYM, to be returned by the scanner. */
		static final int SIMPLE_SYM = 765;
		/** Token SLAVE, to be returned by the scanner. */
		static final int SLAVE = 766;
		/** Token SLOW, to be returned by the scanner. */
		static final int SLOW = 767;
		/** Token SMALLINT_SYM, to be returned by the scanner. */
		static final int SMALLINT_SYM = 768;
		/** Token SNAPSHOT_SYM, to be returned by the scanner. */
		static final int SNAPSHOT_SYM = 769;
		/** Token SOCKET_SYM, to be returned by the scanner. */
		static final int SOCKET_SYM = 770;
		/** Token SONAME_SYM, to be returned by the scanner. */
		static final int SONAME_SYM = 771;
		/** Token SOUNDS_SYM, to be returned by the scanner. */
		static final int SOUNDS_SYM = 772;
		/** Token SOURCE_SYM, to be returned by the scanner. */
		static final int SOURCE_SYM = 773;
		/** Token SPATIAL_SYM, to be returned by the scanner. */
		static final int SPATIAL_SYM = 774;
		/** Token SPECIFIC_SYM, to be returned by the scanner. */
		static final int SPECIFIC_SYM = 775;
		/** Token SQLEXCEPTION_SYM, to be returned by the scanner. */
		static final int SQLEXCEPTION_SYM = 776;
		/** Token SQLSTATE_SYM, to be returned by the scanner. */
		static final int SQLSTATE_SYM = 777;
		/** Token SQLWARNING_SYM, to be returned by the scanner. */
		static final int SQLWARNING_SYM = 778;
		/** Token SQL_AFTER_GTIDS, to be returned by the scanner. */
		static final int SQL_AFTER_GTIDS = 779;
		/** Token SQL_AFTER_MTS_GAPS, to be returned by the scanner. */
		static final int SQL_AFTER_MTS_GAPS = 780;
		/** Token SQL_BEFORE_GTIDS, to be returned by the scanner. */
		static final int SQL_BEFORE_GTIDS = 781;
		/** Token SQL_BIG_RESULT, to be returned by the scanner. */
		static final int SQL_BIG_RESULT = 782;
		/** Token SQL_BUFFER_RESULT, to be returned by the scanner. */
		static final int SQL_BUFFER_RESULT = 783;
		/** Token OBSOLETE_TOKEN_784, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_784 = 784;
		/** Token SQL_CALC_FOUND_ROWS, to be returned by the scanner. */
		static final int SQL_CALC_FOUND_ROWS = 785;
		/** Token SQL_NO_CACHE_SYM, to be returned by the scanner. */
		static final int SQL_NO_CACHE_SYM = 786;
		/** Token SQL_SMALL_RESULT, to be returned by the scanner. */
		static final int SQL_SMALL_RESULT = 787;
		/** Token SQL_SYM, to be returned by the scanner. */
		static final int SQL_SYM = 788;
		/** Token SQL_THREAD, to be returned by the scanner. */
		static final int SQL_THREAD = 789;
		/** Token SSL_SYM, to be returned by the scanner. */
		static final int SSL_SYM = 790;
		/** Token STACKED_SYM, to be returned by the scanner. */
		static final int STACKED_SYM = 791;
		/** Token STARTING, to be returned by the scanner. */
		static final int STARTING = 792;
		/** Token STARTS_SYM, to be returned by the scanner. */
		static final int STARTS_SYM = 793;
		/** Token START_SYM, to be returned by the scanner. */
		static final int START_SYM = 794;
		/** Token STATS_AUTO_RECALC_SYM, to be returned by the scanner. */
		static final int STATS_AUTO_RECALC_SYM = 795;
		/** Token STATS_PERSISTENT_SYM, to be returned by the scanner. */
		static final int STATS_PERSISTENT_SYM = 796;
		/** Token STATS_SAMPLE_PAGES_SYM, to be returned by the scanner. */
		static final int STATS_SAMPLE_PAGES_SYM = 797;
		/** Token STATUS_SYM, to be returned by the scanner. */
		static final int STATUS_SYM = 798;
		/** Token STDDEV_SAMP_SYM, to be returned by the scanner. */
		static final int STDDEV_SAMP_SYM = 799;
		/** Token STD_SYM, to be returned by the scanner. */
		static final int STD_SYM = 800;
		/** Token STOP_SYM, to be returned by the scanner. */
		static final int STOP_SYM = 801;
		/** Token STORAGE_SYM, to be returned by the scanner. */
		static final int STORAGE_SYM = 802;
		/** Token STORED_SYM, to be returned by the scanner. */
		static final int STORED_SYM = 803;
		/** Token STRAIGHT_JOIN, to be returned by the scanner. */
		static final int STRAIGHT_JOIN = 804;
		/** Token STRING_SYM, to be returned by the scanner. */
		static final int STRING_SYM = 805;
		/** Token SUBCLASS_ORIGIN_SYM, to be returned by the scanner. */
		static final int SUBCLASS_ORIGIN_SYM = 806;
		/** Token SUBDATE_SYM, to be returned by the scanner. */
		static final int SUBDATE_SYM = 807;
		/** Token SUBJECT_SYM, to be returned by the scanner. */
		static final int SUBJECT_SYM = 808;
		/** Token SUBPARTITIONS_SYM, to be returned by the scanner. */
		static final int SUBPARTITIONS_SYM = 809;
		/** Token SUBPARTITION_SYM, to be returned by the scanner. */
		static final int SUBPARTITION_SYM = 810;
		/** Token SUBSTRING, to be returned by the scanner. */
		static final int SUBSTRING = 811;
		/** Token SUM_SYM, to be returned by the scanner. */
		static final int SUM_SYM = 812;
		/** Token SUPER_SYM, to be returned by the scanner. */
		static final int SUPER_SYM = 813;
		/** Token SUSPEND_SYM, to be returned by the scanner. */
		static final int SUSPEND_SYM = 814;
		/** Token SWAPS_SYM, to be returned by the scanner. */
		static final int SWAPS_SYM = 815;
		/** Token SWITCHES_SYM, to be returned by the scanner. */
		static final int SWITCHES_SYM = 816;
		/** Token SYSDATE, to be returned by the scanner. */
		static final int SYSDATE = 817;
		/** Token TABLES, to be returned by the scanner. */
		static final int TABLES = 818;
		/** Token TABLESPACE_SYM, to be returned by the scanner. */
		static final int TABLESPACE_SYM = 819;
		/** Token OBSOLETE_TOKEN_820, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_820 = 820;
		/** Token TABLE_SYM, to be returned by the scanner. */
		static final int TABLE_SYM = 821;
		/** Token TABLE_CHECKSUM_SYM, to be returned by the scanner. */
		static final int TABLE_CHECKSUM_SYM = 822;
		/** Token TABLE_NAME_SYM, to be returned by the scanner. */
		static final int TABLE_NAME_SYM = 823;
		/** Token TEMPORARY, to be returned by the scanner. */
		static final int TEMPORARY = 824;
		/** Token TEMPTABLE_SYM, to be returned by the scanner. */
		static final int TEMPTABLE_SYM = 825;
		/** Token TERMINATED, to be returned by the scanner. */
		static final int TERMINATED = 826;
		/** Token TEXT_STRING, to be returned by the scanner. */
		static final int TEXT_STRING = 827;
		/** Token TEXT_SYM, to be returned by the scanner. */
		static final int TEXT_SYM = 828;
		/** Token THAN_SYM, to be returned by the scanner. */
		static final int THAN_SYM = 829;
		/** Token THEN_SYM, to be returned by the scanner. */
		static final int THEN_SYM = 830;
		/** Token TIMESTAMP_SYM, to be returned by the scanner. */
		static final int TIMESTAMP_SYM = 831;
		/** Token TIMESTAMP_ADD, to be returned by the scanner. */
		static final int TIMESTAMP_ADD = 832;
		/** Token TIMESTAMP_DIFF, to be returned by the scanner. */
		static final int TIMESTAMP_DIFF = 833;
		/** Token TIME_SYM, to be returned by the scanner. */
		static final int TIME_SYM = 834;
		/** Token TINYBLOB_SYM, to be returned by the scanner. */
		static final int TINYBLOB_SYM = 835;
		/** Token TINYINT_SYM, to be returned by the scanner. */
		static final int TINYINT_SYM = 836;
		/** Token TINYTEXT_SYN, to be returned by the scanner. */
		static final int TINYTEXT_SYN = 837;
		/** Token TO_SYM, to be returned by the scanner. */
		static final int TO_SYM = 838;
		/** Token TRAILING, to be returned by the scanner. */
		static final int TRAILING = 839;
		/** Token TRANSACTION_SYM, to be returned by the scanner. */
		static final int TRANSACTION_SYM = 840;
		/** Token TRIGGERS_SYM, to be returned by the scanner. */
		static final int TRIGGERS_SYM = 841;
		/** Token TRIGGER_SYM, to be returned by the scanner. */
		static final int TRIGGER_SYM = 842;
		/** Token TRIM, to be returned by the scanner. */
		static final int TRIM = 843;
		/** Token TRUE_SYM, to be returned by the scanner. */
		static final int TRUE_SYM = 844;
		/** Token TRUNCATE_SYM, to be returned by the scanner. */
		static final int TRUNCATE_SYM = 845;
		/** Token TYPES_SYM, to be returned by the scanner. */
		static final int TYPES_SYM = 846;
		/** Token TYPE_SYM, to be returned by the scanner. */
		static final int TYPE_SYM = 847;
		/** Token OBSOLETE_TOKEN_848, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_848 = 848;
		/** Token ULONGLONG_NUM, to be returned by the scanner. */
		static final int ULONGLONG_NUM = 849;
		/** Token UNCOMMITTED_SYM, to be returned by the scanner. */
		static final int UNCOMMITTED_SYM = 850;
		/** Token UNDEFINED_SYM, to be returned by the scanner. */
		static final int UNDEFINED_SYM = 851;
		/** Token UNDERSCORE_CHARSET, to be returned by the scanner. */
		static final int UNDERSCORE_CHARSET = 852;
		/** Token UNDOFILE_SYM, to be returned by the scanner. */
		static final int UNDOFILE_SYM = 853;
		/** Token UNDO_BUFFER_SIZE_SYM, to be returned by the scanner. */
		static final int UNDO_BUFFER_SIZE_SYM = 854;
		/** Token UNDO_SYM, to be returned by the scanner. */
		static final int UNDO_SYM = 855;
		/** Token UNICODE_SYM, to be returned by the scanner. */
		static final int UNICODE_SYM = 856;
		/** Token UNINSTALL_SYM, to be returned by the scanner. */
		static final int UNINSTALL_SYM = 857;
		/** Token UNION_SYM, to be returned by the scanner. */
		static final int UNION_SYM = 858;
		/** Token UNIQUE_SYM, to be returned by the scanner. */
		static final int UNIQUE_SYM = 859;
		/** Token UNKNOWN_SYM, to be returned by the scanner. */
		static final int UNKNOWN_SYM = 860;
		/** Token UNLOCK_SYM, to be returned by the scanner. */
		static final int UNLOCK_SYM = 861;
		/** Token UNSIGNED_SYM, to be returned by the scanner. */
		static final int UNSIGNED_SYM = 862;
		/** Token UNTIL_SYM, to be returned by the scanner. */
		static final int UNTIL_SYM = 863;
		/** Token UPDATE_SYM, to be returned by the scanner. */
		static final int UPDATE_SYM = 864;
		/** Token UPGRADE_SYM, to be returned by the scanner. */
		static final int UPGRADE_SYM = 865;
		/** Token USAGE, to be returned by the scanner. */
		static final int USAGE = 866;
		/** Token USER, to be returned by the scanner. */
		static final int USER = 867;
		/** Token USE_FRM, to be returned by the scanner. */
		static final int USE_FRM = 868;
		/** Token USE_SYM, to be returned by the scanner. */
		static final int USE_SYM = 869;
		/** Token USING, to be returned by the scanner. */
		static final int USING = 870;
		/** Token UTC_DATE_SYM, to be returned by the scanner. */
		static final int UTC_DATE_SYM = 871;
		/** Token UTC_TIMESTAMP_SYM, to be returned by the scanner. */
		static final int UTC_TIMESTAMP_SYM = 872;
		/** Token UTC_TIME_SYM, to be returned by the scanner. */
		static final int UTC_TIME_SYM = 873;
		/** Token VALIDATION_SYM, to be returned by the scanner. */
		static final int VALIDATION_SYM = 874;
		/** Token VALUES, to be returned by the scanner. */
		static final int VALUES = 875;
		/** Token VALUE_SYM, to be returned by the scanner. */
		static final int VALUE_SYM = 876;
		/** Token VARBINARY_SYM, to be returned by the scanner. */
		static final int VARBINARY_SYM = 877;
		/** Token VARCHAR_SYM, to be returned by the scanner. */
		static final int VARCHAR_SYM = 878;
		/** Token VARIABLES, to be returned by the scanner. */
		static final int VARIABLES = 879;
		/** Token VARIANCE_SYM, to be returned by the scanner. */
		static final int VARIANCE_SYM = 880;
		/** Token VARYING, to be returned by the scanner. */
		static final int VARYING = 881;
		/** Token VAR_SAMP_SYM, to be returned by the scanner. */
		static final int VAR_SAMP_SYM = 882;
		/** Token VIEW_SYM, to be returned by the scanner. */
		static final int VIEW_SYM = 883;
		/** Token VIRTUAL_SYM, to be returned by the scanner. */
		static final int VIRTUAL_SYM = 884;
		/** Token WAIT_SYM, to be returned by the scanner. */
		static final int WAIT_SYM = 885;
		/** Token WARNINGS, to be returned by the scanner. */
		static final int WARNINGS = 886;
		/** Token WEEK_SYM, to be returned by the scanner. */
		static final int WEEK_SYM = 887;
		/** Token WEIGHT_STRING_SYM, to be returned by the scanner. */
		static final int WEIGHT_STRING_SYM = 888;
		/** Token WHEN_SYM, to be returned by the scanner. */
		static final int WHEN_SYM = 889;
		/** Token WHERE, to be returned by the scanner. */
		static final int WHERE = 890;
		/** Token WHILE_SYM, to be returned by the scanner. */
		static final int WHILE_SYM = 891;
		/** Token WITH, to be returned by the scanner. */
		static final int WITH = 892;
		/** Token OBSOLETE_TOKEN_893, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_893 = 893;
		/** Token WITH_ROLLUP_SYM, to be returned by the scanner. */
		static final int WITH_ROLLUP_SYM = 894;
		/** Token WITHOUT_SYM, to be returned by the scanner. */
		static final int WITHOUT_SYM = 895;
		/** Token WORK_SYM, to be returned by the scanner. */
		static final int WORK_SYM = 896;
		/** Token WRAPPER_SYM, to be returned by the scanner. */
		static final int WRAPPER_SYM = 897;
		/** Token WRITE_SYM, to be returned by the scanner. */
		static final int WRITE_SYM = 898;
		/** Token X509_SYM, to be returned by the scanner. */
		static final int X509_SYM = 899;
		/** Token XA_SYM, to be returned by the scanner. */
		static final int XA_SYM = 900;
		/** Token XID_SYM, to be returned by the scanner. */
		static final int XID_SYM = 901;
		/** Token XML_SYM, to be returned by the scanner. */
		static final int XML_SYM = 902;
		/** Token XOR, to be returned by the scanner. */
		static final int XOR = 903;
		/** Token YEAR_MONTH_SYM, to be returned by the scanner. */
		static final int YEAR_MONTH_SYM = 904;
		/** Token YEAR_SYM, to be returned by the scanner. */
		static final int YEAR_SYM = 905;
		/** Token ZEROFILL_SYM, to be returned by the scanner. */
		static final int ZEROFILL_SYM = 906;
		/** Token JSON_UNQUOTED_SEPARATOR_SYM, to be returned by the scanner. */
		static final int JSON_UNQUOTED_SEPARATOR_SYM = 907;
		/** Token PERSIST_SYM, to be returned by the scanner. */
		static final int PERSIST_SYM = 908;
		/** Token ROLE_SYM, to be returned by the scanner. */
		static final int ROLE_SYM = 909;
		/** Token ADMIN_SYM, to be returned by the scanner. */
		static final int ADMIN_SYM = 910;
		/** Token INVISIBLE_SYM, to be returned by the scanner. */
		static final int INVISIBLE_SYM = 911;
		/** Token VISIBLE_SYM, to be returned by the scanner. */
		static final int VISIBLE_SYM = 912;
		/** Token EXCEPT_SYM, to be returned by the scanner. */
		static final int EXCEPT_SYM = 913;
		/** Token COMPONENT_SYM, to be returned by the scanner. */
		static final int COMPONENT_SYM = 914;
		/** Token RECURSIVE_SYM, to be returned by the scanner. */
		static final int RECURSIVE_SYM = 915;
		/** Token GRAMMAR_SELECTOR_EXPR, to be returned by the scanner. */
		static final int GRAMMAR_SELECTOR_EXPR = 916;
		/** Token GRAMMAR_SELECTOR_GCOL, to be returned by the scanner. */
		static final int GRAMMAR_SELECTOR_GCOL = 917;
		/** Token GRAMMAR_SELECTOR_PART, to be returned by the scanner. */
		static final int GRAMMAR_SELECTOR_PART = 918;
		/** Token GRAMMAR_SELECTOR_CTE, to be returned by the scanner. */
		static final int GRAMMAR_SELECTOR_CTE = 919;
		/** Token JSON_OBJECTAGG, to be returned by the scanner. */
		static final int JSON_OBJECTAGG = 920;
		/** Token JSON_ARRAYAGG, to be returned by the scanner. */
		static final int JSON_ARRAYAGG = 921;
		/** Token OF_SYM, to be returned by the scanner. */
		static final int OF_SYM = 922;
		/** Token SKIP_SYM, to be returned by the scanner. */
		static final int SKIP_SYM = 923;
		/** Token LOCKED_SYM, to be returned by the scanner. */
		static final int LOCKED_SYM = 924;
		/** Token NOWAIT_SYM, to be returned by the scanner. */
		static final int NOWAIT_SYM = 925;
		/** Token GROUPING_SYM, to be returned by the scanner. */
		static final int GROUPING_SYM = 926;
		/** Token PERSIST_ONLY_SYM, to be returned by the scanner. */
		static final int PERSIST_ONLY_SYM = 927;
		/** Token HISTOGRAM_SYM, to be returned by the scanner. */
		static final int HISTOGRAM_SYM = 928;
		/** Token BUCKETS_SYM, to be returned by the scanner. */
		static final int BUCKETS_SYM = 929;
		/** Token OBSOLETE_TOKEN_930, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_930 = 930;
		/** Token CLONE_SYM, to be returned by the scanner. */
		static final int CLONE_SYM = 931;
		/** Token CUME_DIST_SYM, to be returned by the scanner. */
		static final int CUME_DIST_SYM = 932;
		/** Token DENSE_RANK_SYM, to be returned by the scanner. */
		static final int DENSE_RANK_SYM = 933;
		/** Token EXCLUDE_SYM, to be returned by the scanner. */
		static final int EXCLUDE_SYM = 934;
		/** Token FIRST_VALUE_SYM, to be returned by the scanner. */
		static final int FIRST_VALUE_SYM = 935;
		/** Token FOLLOWING_SYM, to be returned by the scanner. */
		static final int FOLLOWING_SYM = 936;
		/** Token GROUPS_SYM, to be returned by the scanner. */
		static final int GROUPS_SYM = 937;
		/** Token LAG_SYM, to be returned by the scanner. */
		static final int LAG_SYM = 938;
		/** Token LAST_VALUE_SYM, to be returned by the scanner. */
		static final int LAST_VALUE_SYM = 939;
		/** Token LEAD_SYM, to be returned by the scanner. */
		static final int LEAD_SYM = 940;
		/** Token NTH_VALUE_SYM, to be returned by the scanner. */
		static final int NTH_VALUE_SYM = 941;
		/** Token NTILE_SYM, to be returned by the scanner. */
		static final int NTILE_SYM = 942;
		/** Token NULLS_SYM, to be returned by the scanner. */
		static final int NULLS_SYM = 943;
		/** Token OTHERS_SYM, to be returned by the scanner. */
		static final int OTHERS_SYM = 944;
		/** Token OVER_SYM, to be returned by the scanner. */
		static final int OVER_SYM = 945;
		/** Token PERCENT_RANK_SYM, to be returned by the scanner. */
		static final int PERCENT_RANK_SYM = 946;
		/** Token PRECEDING_SYM, to be returned by the scanner. */
		static final int PRECEDING_SYM = 947;
		/** Token RANK_SYM, to be returned by the scanner. */
		static final int RANK_SYM = 948;
		/** Token RESPECT_SYM, to be returned by the scanner. */
		static final int RESPECT_SYM = 949;
		/** Token ROW_NUMBER_SYM, to be returned by the scanner. */
		static final int ROW_NUMBER_SYM = 950;
		/** Token TIES_SYM, to be returned by the scanner. */
		static final int TIES_SYM = 951;
		/** Token UNBOUNDED_SYM, to be returned by the scanner. */
		static final int UNBOUNDED_SYM = 952;
		/** Token WINDOW_SYM, to be returned by the scanner. */
		static final int WINDOW_SYM = 953;
		/** Token EMPTY_SYM, to be returned by the scanner. */
		static final int EMPTY_SYM = 954;
		/** Token JSON_TABLE_SYM, to be returned by the scanner. */
		static final int JSON_TABLE_SYM = 955;
		/** Token NESTED_SYM, to be returned by the scanner. */
		static final int NESTED_SYM = 956;
		/** Token ORDINALITY_SYM, to be returned by the scanner. */
		static final int ORDINALITY_SYM = 957;
		/** Token PATH_SYM, to be returned by the scanner. */
		static final int PATH_SYM = 958;
		/** Token HISTORY_SYM, to be returned by the scanner. */
		static final int HISTORY_SYM = 959;
		/** Token REUSE_SYM, to be returned by the scanner. */
		static final int REUSE_SYM = 960;
		/** Token SRID_SYM, to be returned by the scanner. */
		static final int SRID_SYM = 961;
		/** Token THREAD_PRIORITY_SYM, to be returned by the scanner. */
		static final int THREAD_PRIORITY_SYM = 962;
		/** Token RESOURCE_SYM, to be returned by the scanner. */
		static final int RESOURCE_SYM = 963;
		/** Token SYSTEM_SYM, to be returned by the scanner. */
		static final int SYSTEM_SYM = 964;
		/** Token VCPU_SYM, to be returned by the scanner. */
		static final int VCPU_SYM = 965;
		/** Token OBSOLETE_TOKEN_966, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_966 = 966;
		/** Token OBSOLETE_TOKEN_967, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_967 = 967;
		/** Token RESTART_SYM, to be returned by the scanner. */
		static final int RESTART_SYM = 968;
		/** Token DEFINITION_SYM, to be returned by the scanner. */
		static final int DEFINITION_SYM = 969;
		/** Token DESCRIPTION_SYM, to be returned by the scanner. */
		static final int DESCRIPTION_SYM = 970;
		/** Token ORGANIZATION_SYM, to be returned by the scanner. */
		static final int ORGANIZATION_SYM = 971;
		/** Token REFERENCE_SYM, to be returned by the scanner. */
		static final int REFERENCE_SYM = 972;
		/** Token ACTIVE_SYM, to be returned by the scanner. */
		static final int ACTIVE_SYM = 973;
		/** Token INACTIVE_SYM, to be returned by the scanner. */
		static final int INACTIVE_SYM = 974;
		/** Token LATERAL_SYM, to be returned by the scanner. */
		static final int LATERAL_SYM = 975;
		/** Token ARRAY_SYM, to be returned by the scanner. */
		static final int ARRAY_SYM = 976;
		/** Token MEMBER_SYM, to be returned by the scanner. */
		static final int MEMBER_SYM = 977;
		/** Token OPTIONAL_SYM, to be returned by the scanner. */
		static final int OPTIONAL_SYM = 978;
		/** Token SECONDARY_SYM, to be returned by the scanner. */
		static final int SECONDARY_SYM = 979;
		/** Token SECONDARY_ENGINE_SYM, to be returned by the scanner. */
		static final int SECONDARY_ENGINE_SYM = 980;
		/** Token SECONDARY_LOAD_SYM, to be returned by the scanner. */
		static final int SECONDARY_LOAD_SYM = 981;
		/** Token SECONDARY_UNLOAD_SYM, to be returned by the scanner. */
		static final int SECONDARY_UNLOAD_SYM = 982;
		/** Token RETAIN_SYM, to be returned by the scanner. */
		static final int RETAIN_SYM = 983;
		/** Token OLD_SYM, to be returned by the scanner. */
		static final int OLD_SYM = 984;
		/** Token ENFORCED_SYM, to be returned by the scanner. */
		static final int ENFORCED_SYM = 985;
		/** Token OJ_SYM, to be returned by the scanner. */
		static final int OJ_SYM = 986;
		/** Token NETWORK_NAMESPACE_SYM, to be returned by the scanner. */
		static final int NETWORK_NAMESPACE_SYM = 987;
		/** Token RANDOM_SYM, to be returned by the scanner. */
		static final int RANDOM_SYM = 988;
		/** Token OBSOLETE_TOKEN_989, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_989 = 989;
		/** Token OBSOLETE_TOKEN_990, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_990 = 990;
		/** Token PRIVILEGE_CHECKS_USER_SYM, to be returned by the scanner. */
		static final int PRIVILEGE_CHECKS_USER_SYM = 991;
		/** Token OBSOLETE_TOKEN_992, to be returned by the scanner. */
		static final int OBSOLETE_TOKEN_992 = 992;
		/** Token REQUIRE_ROW_FORMAT_SYM, to be returned by the scanner. */
		static final int REQUIRE_ROW_FORMAT_SYM = 993;
		/** Token PASSWORD_LOCK_TIME_SYM, to be returned by the scanner. */
		static final int PASSWORD_LOCK_TIME_SYM = 994;
		/** Token FAILED_LOGIN_ATTEMPTS_SYM, to be returned by the scanner. */
		static final int FAILED_LOGIN_ATTEMPTS_SYM = 995;
		/** Token REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYM, to be returned by the scanner. */
		static final int REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYM = 996;
		/** Token STREAM_SYM, to be returned by the scanner. */
		static final int STREAM_SYM = 997;
		/** Token OFF_SYM, to be returned by the scanner. */
		static final int OFF_SYM = 998;
		/** Token RETURNING_SYM, to be returned by the scanner. */
		static final int RETURNING_SYM = 999;
		/** Token JSON_VALUE_SYM, to be returned by the scanner. */
		static final int JSON_VALUE_SYM = 1151;
		/** Token TLS_SYM, to be returned by the scanner. */
		static final int TLS_SYM = 1152;
		/** Token ATTRIBUTE_SYM, to be returned by the scanner. */
		static final int ATTRIBUTE_SYM = 1153;
		/** Token ENGINE_ATTRIBUTE_SYM, to be returned by the scanner. */
		static final int ENGINE_ATTRIBUTE_SYM = 1154;
		/** Token SECONDARY_ENGINE_ATTRIBUTE_SYM, to be returned by the scanner. */
		static final int SECONDARY_ENGINE_ATTRIBUTE_SYM = 1155;
		/** Token SOURCE_CONNECTION_AUTO_FAILOVER_SYM, to be returned by the scanner. */
		static final int SOURCE_CONNECTION_AUTO_FAILOVER_SYM = 1156;
		/** Token ZONE_SYM, to be returned by the scanner. */
		static final int ZONE_SYM = 1157;
		/** Token GRAMMAR_SELECTOR_DERIVED_EXPR, to be returned by the scanner. */
		static final int GRAMMAR_SELECTOR_DERIVED_EXPR = 1158;
		/** Token REPLICA_SYM, to be returned by the scanner. */
		static final int REPLICA_SYM = 1159;
		/** Token REPLICAS_SYM, to be returned by the scanner. */
		static final int REPLICAS_SYM = 1160;
		/** Token ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYM, to be returned by the scanner. */
		static final int ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYM = 1161;
		/** Token GET_SOURCE_PUBLIC_KEY_SYM, to be returned by the scanner. */
		static final int GET_SOURCE_PUBLIC_KEY_SYM = 1162;
		/** Token SOURCE_AUTO_POSITION_SYM, to be returned by the scanner. */
		static final int SOURCE_AUTO_POSITION_SYM = 1163;
		/** Token SOURCE_BIND_SYM, to be returned by the scanner. */
		static final int SOURCE_BIND_SYM = 1164;
		/** Token SOURCE_COMPRESSION_ALGORITHM_SYM, to be returned by the scanner. */
		static final int SOURCE_COMPRESSION_ALGORITHM_SYM = 1165;
		/** Token SOURCE_CONNECT_RETRY_SYM, to be returned by the scanner. */
		static final int SOURCE_CONNECT_RETRY_SYM = 1166;
		/** Token SOURCE_DELAY_SYM, to be returned by the scanner. */
		static final int SOURCE_DELAY_SYM = 1167;
		/** Token SOURCE_HEARTBEAT_PERIOD_SYM, to be returned by the scanner. */
		static final int SOURCE_HEARTBEAT_PERIOD_SYM = 1168;
		/** Token SOURCE_HOST_SYM, to be returned by the scanner. */
		static final int SOURCE_HOST_SYM = 1169;
		/** Token SOURCE_LOG_FILE_SYM, to be returned by the scanner. */
		static final int SOURCE_LOG_FILE_SYM = 1170;
		/** Token SOURCE_LOG_POS_SYM, to be returned by the scanner. */
		static final int SOURCE_LOG_POS_SYM = 1171;
		/** Token SOURCE_PASSWORD_SYM, to be returned by the scanner. */
		static final int SOURCE_PASSWORD_SYM = 1172;
		/** Token SOURCE_PORT_SYM, to be returned by the scanner. */
		static final int SOURCE_PORT_SYM = 1173;
		/** Token SOURCE_PUBLIC_KEY_PATH_SYM, to be returned by the scanner. */
		static final int SOURCE_PUBLIC_KEY_PATH_SYM = 1174;
		/** Token SOURCE_RETRY_COUNT_SYM, to be returned by the scanner. */
		static final int SOURCE_RETRY_COUNT_SYM = 1175;
		/** Token SOURCE_SSL_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_SYM = 1176;
		/** Token SOURCE_SSL_CA_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CA_SYM = 1177;
		/** Token SOURCE_SSL_CAPATH_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CAPATH_SYM = 1178;
		/** Token SOURCE_SSL_CERT_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CERT_SYM = 1179;
		/** Token SOURCE_SSL_CIPHER_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CIPHER_SYM = 1180;
		/** Token SOURCE_SSL_CRL_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CRL_SYM = 1181;
		/** Token SOURCE_SSL_CRLPATH_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_CRLPATH_SYM = 1182;
		/** Token SOURCE_SSL_KEY_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_KEY_SYM = 1183;
		/** Token SOURCE_SSL_VERIFY_SERVER_CERT_SYM, to be returned by the scanner. */
		static final int SOURCE_SSL_VERIFY_SERVER_CERT_SYM = 1184;
		/** Token SOURCE_TLS_CIPHERSUITES_SYM, to be returned by the scanner. */
		static final int SOURCE_TLS_CIPHERSUITES_SYM = 1185;
		/** Token SOURCE_TLS_VERSION_SYM, to be returned by the scanner. */
		static final int SOURCE_TLS_VERSION_SYM = 1186;
		/** Token SOURCE_USER_SYM, to be returned by the scanner. */
		static final int SOURCE_USER_SYM = 1187;
		/** Token SOURCE_ZSTD_COMPRESSION_LEVEL_SYM, to be returned by the scanner. */
		static final int SOURCE_ZSTD_COMPRESSION_LEVEL_SYM = 1188;
		/** Token ST_COLLECT_SYM, to be returned by the scanner. */
		static final int ST_COLLECT_SYM = 1189;
		/** Token KEYRING_SYM, to be returned by the scanner. */
		static final int KEYRING_SYM = 1190;
		/** Token AUTHENTICATION_SYM, to be returned by the scanner. */
		static final int AUTHENTICATION_SYM = 1191;
		/** Token FACTOR_SYM, to be returned by the scanner. */
		static final int FACTOR_SYM = 1192;
		/** Token FINISH_SYM, to be returned by the scanner. */
		static final int FINISH_SYM = 1193;
		/** Token INITIATE_SYM, to be returned by the scanner. */
		static final int INITIATE_SYM = 1194;
		/** Token REGISTRATION_SYM, to be returned by the scanner. */
		static final int REGISTRATION_SYM = 1195;
		/** Token UNREGISTER_SYM, to be returned by the scanner. */
		static final int UNREGISTER_SYM = 1196;
		/** Token INITIAL_SYM, to be returned by the scanner. */
		static final int INITIAL_SYM = 1197;
		/** Token CHALLENGE_RESPONSE_SYM, to be returned by the scanner. */
		static final int CHALLENGE_RESPONSE_SYM = 1198;
		/** Token GTID_ONLY_SYM, to be returned by the scanner. */
		static final int GTID_ONLY_SYM = 1199;
		/** Token INTERSECT_SYM, to be returned by the scanner. */
		static final int INTERSECT_SYM = 1200;
		/** Token BULK_SYM, to be returned by the scanner. */
		static final int BULK_SYM = 1201;
		/** Token URL_SYM, to be returned by the scanner. */
		static final int URL_SYM = 1202;
		/** Token GENERATE_SYM, to be returned by the scanner. */
		static final int GENERATE_SYM = 1203;
		/** Token DOLLAR_QUOTED_STRING_SYM, to be returned by the scanner. */
		static final int DOLLAR_QUOTED_STRING_SYM = 1204;
		/** Token PARSE_TREE_SYM, to be returned by the scanner. */
		static final int PARSE_TREE_SYM = 1205;
		/** Token LOG_SYM, to be returned by the scanner. */
		static final int LOG_SYM = 1206;
		/** Token GTIDS_SYM, to be returned by the scanner. */
		static final int GTIDS_SYM = 1207;
		/** Token PARALLEL_SYM, to be returned by the scanner. */
		static final int PARALLEL_SYM = 1208;
		/** Token S3_SYM, to be returned by the scanner. */
		static final int S3_SYM = 1209;
		/** Token QUALIFY_SYM, to be returned by the scanner. */
		static final int QUALIFY_SYM = 1210;
		/** Token AUTO_SYM, to be returned by the scanner. */
		static final int AUTO_SYM = 1211;
		/** Token MANUAL_SYM, to be returned by the scanner. */
		static final int MANUAL_SYM = 1212;
		/** Token BERNOULLI_SYM, to be returned by the scanner. */
		static final int BERNOULLI_SYM = 1213;
		/** Token TABLESAMPLE_SYM, to be returned by the scanner. */
		static final int TABLESAMPLE_SYM = 1214;
		/** Token KEYWORD_USED_AS_IDENT, to be returned by the scanner. */
		static final int KEYWORD_USED_AS_IDENT = 1215;
		/** Token KEYWORD_USED_AS_KEYWORD, to be returned by the scanner. */
		static final int KEYWORD_USED_AS_KEYWORD = 1216;
		/** Token CONDITIONLESS_JOIN, to be returned by the scanner. */
		static final int CONDITIONLESS_JOIN = 1217;
		/** Token PREFER_PARENTHESES, to be returned by the scanner. */
		static final int PREFER_PARENTHESES = 1218;
		/** Token EMPTY_FROM_CLAUSE, to be returned by the scanner. */
		static final int EMPTY_FROM_CLAUSE = 1219;

		/** Deprecated, use YYEOF instead. */
		public static final int EOF = YYEOF;

		/**
		 * Method to retrieve the beginning position of the last scanned token.
		 *
		 * @return the position at which the last scanned token starts.
		 */
		Position getStartPos(MySQLThread thd);

		/**
		 * Method to retrieve the ending position of the last scanned token.
		 *
		 * @return the first position beyond the last scanned token.
		 */
		Position getEndPos(MySQLThread thd);

		/**
		 * Method to retrieve the semantic value of the last scanned token.
		 *
		 * @return the semantic value of the last scanned token.
		 */
		Object getLVal(MySQLThread thd);

		/**
		 * Entry point for the scanner. Returns the token identifier corresponding to the next token and prepares to return the semantic value and beginning/ending
		 * positions of the token.
		 *
		 * @return the token identifier corresponding to the next token.
		 */
		int yylex(MySQLThread thd) throws java.io.IOException;

		/**
		 * Emit an error referring to the given locationin a user-defined way.
		 *
		 * @param loc The location of the element to which the error message is related.
		 * @param msg The string for the error message.
		 */
		void yyerror(MySQLThread thd, Location loc, String msg);

	}

	/**
	 * The object doing lexical analysis for us.
	 */
	public MyLexer yylexer;

	@Override
	public MySQLLexer lexer() {
		return yylexer;
	}

//	private int yydebug = 0;

	/* User arguments. */
//    protected final class THD *YYTHD;
//    protected final class Parse_tree_root **parse_tree;

	/**
	 * Instantiates the Bison-generated parser.
	 *
	 * @param yylexer The scanner that will supply tokens to the parser.
	 * @throws IOException
	 */
//  public MyParser84(Lexer yylexer, THD YYTHD,class Parse_tree_root parse_tree)
	public MyParser(MySQLLexer yylexer) throws IOException {
		this.yylexer = (MyLexer) yylexer;
//this.YYTHD = YYTHD;
//          this.parse_tree = parse_tree;

		yytable_ = MySQLParserUtils.initArrayForShort("84/yytable");
		yycheck_ = MySQLParserUtils.initArrayForShort("84/yycheck");
		yypact_ = MySQLParserUtils.initArrayForInt("84/yypact");
		yydefact_ = MySQLParserUtils.initArrayForShort("84/yydefact");
		yypgoto_ = MySQLParserUtils.initArrayForShort("84/yypgoto");
		yydefgoto_ = MySQLParserUtils.initArrayForShort("84/yydefgoto");
		yystos_ = MySQLParserUtils.initArrayForShort("84/yystos");
		yyr1_ = MySQLParserUtils.initArrayForShort("84/yyr1");
		yyr2_ = MySQLParserUtils.initArrayForByte("84/yyr2");
		yytranslate_table_ = MySQLParserUtils.initArrayForShort("84/yytranslate_table");
		SymbolKind.yytname_ = MySQLParserUtils.initArrayForString("84/yytname");
	}

	private int yynerrs = 0;

	/**
	 * The number of syntax errors so far.
	 */
	public final int getNumberOfErrors() {
		return yynerrs;
	}

	private final class YYStack {
		private int[] stateStack = new int[16];
		private Location[] locStack = new Location[16];
		private Object[] valueStack = new Object[16];

		public int size = 16;
		public int height = -1;

		public final void push(int state, Object value, Location loc) {
			height++;
			if (size == height) {
				int[] newStateStack = new int[size * 2];
				System.arraycopy(stateStack, 0, newStateStack, 0, height);
				stateStack = newStateStack;
				Location[] newLocStack = new Location[size * 2];
				System.arraycopy(locStack, 0, newLocStack, 0, height);
				locStack = newLocStack;

				Object[] newValueStack = new Object[size * 2];
				System.arraycopy(valueStack, 0, newValueStack, 0, height);
				valueStack = newValueStack;

				size *= 2;
			}

			stateStack[height] = state;
			locStack[height] = loc;
			valueStack[height] = value;
		}

		public final void pop() {
			pop(1);
		}

		public final void pop(int num) {
			// Avoid memory leaks... garbage collection is a white lie!
			if (0 < num) {
				java.util.Arrays.fill(valueStack, height - num + 1, height + 1, null);
				java.util.Arrays.fill(locStack, height - num + 1, height + 1, null);
			}
			height -= num;
		}

		public final int stateAt(int i) {
			return stateStack[height - i];
		}

		public final Location locationAt(int i) {
			return locStack[height - i];
		}

		public final Object valueAt(int i) {
			return valueStack[height - i];
		}

		// Print the state stack on the debug stream.
		public void printStateStack() {
			if (LOGGER.isDebugEnabled()) {
				StringBuilder sb = new StringBuilder();
				for (int i = 0; i <= height; i++) {
					sb.append(' ').append(stateStack[i]);
				}
				LOGGER.debug("Stack now{}", sb);
			}
		}
	}

	/**
	 * Returned by a Bison action in order to stop the parsing process and return success (<tt>true</tt>).
	 */
	public static final int YYACCEPT = 0;

	/**
	 * Returned by a Bison action in order to stop the parsing process and return failure (<tt>false</tt>).
	 */
	public static final int YYABORT = 1;

	/**
	 * Returned by a Bison action in order to start error recovery without printing an error message.
	 */
	public static final int YYERROR = 2;

	/**
	 * Internal return codes that are not supported for user semantic actions.
	 */
	private static final int YYERRLAB = 3;
	private static final int YYNEWSTATE = 4;
	private static final int YYDEFAULT = 5;
	private static final int YYREDUCE = 6;
	private static final int YYERRLAB1 = 7;
	private static final int YYRETURN = 8;

	private int yyerrstatus_ = 0;

	/**
	 * Whether error recovery is being done. In this state, the parser reads token until it reaches a known state, and then restarts normal operation.
	 */
	public final boolean recovering() {
		return yyerrstatus_ == 0;
	}

	/**
	 * Compute post-reduction state.
	 *
	 * @param yystate the current state
	 * @param yysym   the nonterminal to push on the stack
	 */
	private int yyLRGotoState(int yystate, int yysym) {
		int yyr = yypgoto_[yysym - YYNTOKENS_] + yystate;
		if (0 <= yyr && yyr <= YYLAST_ && yycheck_[yyr] == yystate)
			return yytable_[yyr];
		else
			return yydefgoto_[yysym - YYNTOKENS_];
	}

	private int yyaction(int yyn, YYStack yystack, int yylen, MySQLThread mThd) {
		SQLThread thd = (SQLThread) mThd;
		/*
		 * If YYLEN is nonzero, implement the default value of the action: '$$ = $1'. Otherwise, use the top of the stack.
		 *
		 * Otherwise, the following line sets YYVAL to garbage. This behavior is undocumented and Bison users should not rely upon it.
		 */
		Object yyval = (0 < yylen) ? yystack.valueAt(yylen - 1) : yystack.valueAt(0);
		Location yyloc = yylloc(yystack, yylen);

		switch (yyn) {
		case 3: /* start_entry: GRAMMAR_SELECTOR_EXPR bit_expr END_OF_INPUT */
//  if (yyn == 3)
//    /* "sql_yacc.y":2304  */
//          {
//            ITEMIZE(((item)(yystack.valueAt (1))), &((item)(yystack.valueAt (1))));
//            static_cast<Expression_parser_state *>(YYP)->result= ((item)(yystack.valueAt (1)));
//          };
			break;

		case 4: /* start_entry: GRAMMAR_SELECTOR_PART partition_clause END_OF_INPUT */
//  if (yyn == 4)
//    /* "sql_yacc.y":2309  */
//          {
//            /*
//              We enter here when translating partition info string into
//              partition_info data structure.
//            */
//            CONTEXTUALIZE(((partition_clause)(yystack.valueAt (1))));
//            static_cast<Partition_expr_parser_state *>(YYP)->result=
//              &((partition_clause)(yystack.valueAt (1)))->part_info;
//          };
			break;

		case 5: /* start_entry: GRAMMAR_SELECTOR_GCOL IDENT_sys '(' expr ')' END_OF_INPUT */
//  if (yyn == 5)
//    /* "sql_yacc.y":2319  */
//          {
//            /*
//              We enter here when translating generated column info string into
//              partition_info data structure.
//            */
//
//            // Check gcol expression for the "PARSE_GCOL_EXPR" prefix:
//            if (!is_identifier(((lexer.lex_str)(yystack.valueAt (4))), "PARSE_GCOL_EXPR"))
//              MYSQL_YYABORT;
//
//            auto gcol_info= NEW_PTN Value_generator;
//            if (gcol_info == nullptr)
//              MYSQL_YYABORT; // OOM
//            ITEMIZE(((item)(yystack.valueAt (2))), &((item)(yystack.valueAt (2))));
//            gcol_info->expr_item= ((item)(yystack.valueAt (2)));
//            static_cast<Gcol_expr_parser_state *>(YYP)->result= gcol_info;
//          };
			break;

		case 6: /* start_entry: GRAMMAR_SELECTOR_CTE table_subquery END_OF_INPUT */
//  if (yyn == 6)
//    /* "sql_yacc.y":2337  */
//          {
//            static_cast<Common_table_expr_parser_state *>(YYP)->result= ((subquery)(yystack.valueAt (1)));
//          };
			break;

		case 7: /* start_entry: GRAMMAR_SELECTOR_DERIVED_EXPR expr END_OF_INPUT */
//  if (yyn == 7)
//    /* "sql_yacc.y":2341  */
//         {
//           ITEMIZE(((item)(yystack.valueAt (1))), &((item)(yystack.valueAt (1))));
//           static_cast<Derived_expr_parser_state *>(YYP)->result= ((item)(yystack.valueAt (1)));
//         };
			break;

		case 8: /* sql_statement: END_OF_INPUT */
			if (yyn == 8)
			/* "sql_yacc.y":2349 */
			{
//            THD *thd= YYTHD;
//            if (!thd->is_bootstrap_system_thread() &&
//                !thd->m_parser_state->has_comment())
//            {
//              my_error(ER_EMPTY_QUERY, MYF(0));
//              MYSQL_YYABORT;
//            }
//            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
//            YYLIP->found_semicolon= nullptr;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_EMPTY_QUERY;
				LexInputStream lip = thd.mParserState.mLip;
				lip.foundSemicolon = 0;
			}
			;
			break;

		case 9: /* $@1: %empty */
			if (yyn == 9)
			/* "sql_yacc.y":2361 */
			{
//            Lex_input_stream *lip = YYLIP;
//
//            if (YYTHD->get_protocol()->has_client_capability(CLIENT_MULTI_QUERIES) &&
//                lip->multi_statements &&
//                ! lip->eof())
//            {
//              /*
//                We found a well formed query, and multi queries are allowed:
//                - force the parser to stop after the ';'
//                - mark the start of the next query for the next invocation
//                  of the parser.
//              */
//              lip->next_state= MY_LEX_END;
//              lip->found_semicolon= lip->get_ptr();
//            }
//            else
//            {
//              /* Single query, terminated. */
//              lip->found_semicolon= nullptr;
//            }
				LexInputStream lip = thd.mParserState.mLip;
				String sql;
				if (!lip.eof()) {
					lip.nextState = MyLexStates.MY_LEX_END;
					sql = lip.sqlBuf.substring(lip.foundSemicolon, lip.getPtr() - 1);
					lip.foundSemicolon = lip.getPtr();
				} else {
					sql = lip.sqlBuf.substring(lip.foundSemicolon, lip.getPtr() - 1);
					lip.foundSemicolon = 0;
				}
				thd.addSQL(sql);
			}
			;
			break;

		case 11: /* sql_statement: simple_statement_or_begin END_OF_INPUT */
			if (yyn == 11)
			/* "sql_yacc.y":2386 */
			{
//            /* Single query, not terminated. */
//            YYLIP->found_semicolon= nullptr;
				LexInputStream lip = thd.mParserState.mLip;
				lip.foundSemicolon = 0;
			}
			;
			break;

		case 14: /* simple_statement_or_begin: simple_statement */
//  if (yyn == 14)
//    /* "sql_yacc.y":2398  */
//                                { *parse_tree= ((top_level_node)(yystack.valueAt (0))); };
			break;

		case 16: /* simple_statement: alter_database_stmt */
//  if (yyn == 16)
//    /* "sql_yacc.y":2404  */
//                                        { yyval= nullptr; };
			break;

		case 17: /* simple_statement: alter_event_stmt */
//  if (yyn == 17)
//    /* "sql_yacc.y":2405  */
//                                        { yyval= nullptr; };
			break;

		case 18: /* simple_statement: alter_function_stmt */
//  if (yyn == 18)
//    /* "sql_yacc.y":2406  */
//                                        { yyval= nullptr; };
			break;

		case 20: /* simple_statement: alter_logfile_stmt */
//  if (yyn == 20)
//    /* "sql_yacc.y":2408  */
//                                        { yyval= nullptr; };
			break;

		case 21: /* simple_statement: alter_procedure_stmt */
//  if (yyn == 21)
//    /* "sql_yacc.y":2409  */
//                                        { yyval= nullptr; };
			break;

		case 23: /* simple_statement: alter_server_stmt */
//  if (yyn == 23)
//    /* "sql_yacc.y":2411  */
//                                        { yyval= nullptr; };
			break;

		case 24: /* simple_statement: alter_tablespace_stmt */
//  if (yyn == 24)
//    /* "sql_yacc.y":2412  */
//                                        { yyval= nullptr; };
			break;

		case 25: /* simple_statement: alter_undo_tablespace_stmt */
//  if (yyn == 25)
//    /* "sql_yacc.y":2413  */
//                                        { yyval= nullptr; };
			break;

		case 27: /* simple_statement: alter_user_stmt */
//  if (yyn == 27)
//    /* "sql_yacc.y":2415  */
//                                        { yyval= nullptr; };
			break;

		case 28: /* simple_statement: alter_view_stmt */
//  if (yyn == 28)
//    /* "sql_yacc.y":2416  */
//                                        { yyval= nullptr; };
			break;

		case 30: /* simple_statement: binlog_base64_event */
//  if (yyn == 30)
//    /* "sql_yacc.y":2418  */
//                                        { yyval= nullptr; };
			break;

		case 32: /* simple_statement: change_replication_stmt */
//  if (yyn == 32)
//    /* "sql_yacc.y":2420  */
//                                        { yyval= nullptr; };
			break;

		case 34: /* simple_statement: checksum */
//  if (yyn == 34)
//    /* "sql_yacc.y":2422  */
//                                        { yyval= nullptr; };
			break;

		case 35: /* simple_statement: clone_stmt */
//  if (yyn == 35)
//    /* "sql_yacc.y":2423  */
//                                        { yyval= nullptr; };
			break;

		case 36: /* simple_statement: commit */
//  if (yyn == 36)
//    /* "sql_yacc.y":2424  */
//                                        { yyval= nullptr; };
			break;

		case 37: /* simple_statement: create */
//  if (yyn == 37)
//    /* "sql_yacc.y":2425  */
//                                        { yyval= nullptr; };
			break;

		case 43: /* simple_statement: deallocate */
//  if (yyn == 43)
//    /* "sql_yacc.y":2431  */
//                                        { yyval= nullptr; };
			break;

		case 47: /* simple_statement: drop_database_stmt */
//  if (yyn == 47)
//    /* "sql_yacc.y":2435  */
//                                        { yyval= nullptr; };
			break;

		case 48: /* simple_statement: drop_event_stmt */
//  if (yyn == 48)
//    /* "sql_yacc.y":2436  */
//                                        { yyval= nullptr; };
			break;

		case 49: /* simple_statement: drop_function_stmt */
//  if (yyn == 49)
//    /* "sql_yacc.y":2437  */
//                                        { yyval= nullptr; };
			break;

		case 51: /* simple_statement: drop_logfile_stmt */
//  if (yyn == 51)
//    /* "sql_yacc.y":2439  */
//                                        { yyval= nullptr; };
			break;

		case 52: /* simple_statement: drop_procedure_stmt */
//  if (yyn == 52)
//    /* "sql_yacc.y":2440  */
//                                        { yyval= nullptr; };
			break;

		case 55: /* simple_statement: drop_server_stmt */
//  if (yyn == 55)
//    /* "sql_yacc.y":2443  */
//                                        { yyval= nullptr; };
			break;

		case 57: /* simple_statement: drop_tablespace_stmt */
//  if (yyn == 57)
//    /* "sql_yacc.y":2445  */
//                                        { yyval= nullptr; };
			break;

		case 58: /* simple_statement: drop_undo_tablespace_stmt */
//  if (yyn == 58)
//    /* "sql_yacc.y":2446  */
//                                        { yyval= nullptr; };
			break;

		case 59: /* simple_statement: drop_table_stmt */
//  if (yyn == 59)
//    /* "sql_yacc.y":2447  */
//                                        { yyval= nullptr; };
			break;

		case 60: /* simple_statement: drop_trigger_stmt */
//  if (yyn == 60)
//    /* "sql_yacc.y":2448  */
//                                        { yyval= nullptr; };
			break;

		case 61: /* simple_statement: drop_user_stmt */
//  if (yyn == 61)
//    /* "sql_yacc.y":2449  */
//                                        { yyval= nullptr; };
			break;

		case 62: /* simple_statement: drop_view_stmt */
//  if (yyn == 62)
//    /* "sql_yacc.y":2450  */
//                                        { yyval= nullptr; };
			break;

		case 63: /* simple_statement: execute */
//  if (yyn == 63)
//    /* "sql_yacc.y":2451  */
//                                        { yyval= nullptr; };
			break;

		case 65: /* simple_statement: flush */
//  if (yyn == 65)
//    /* "sql_yacc.y":2453  */
//                                        { yyval= nullptr; };
			break;

		case 66: /* simple_statement: get_diagnostics */
//  if (yyn == 66)
//    /* "sql_yacc.y":2454  */
//                                        { yyval= nullptr; };
			break;

		case 67: /* simple_statement: group_replication */
//  if (yyn == 67)
//    /* "sql_yacc.y":2455  */
//                                        { yyval= nullptr; };
			break;

		case 68: /* simple_statement: grant */
//  if (yyn == 68)
//    /* "sql_yacc.y":2456  */
//                                        { yyval= nullptr; };
			break;

		case 70: /* simple_statement: help */
//  if (yyn == 70)
//    /* "sql_yacc.y":2458  */
//                                        { yyval= nullptr; };
			break;

		case 71: /* simple_statement: import_stmt */
//  if (yyn == 71)
//    /* "sql_yacc.y":2459  */
//                                        { yyval= nullptr; };
			break;

		case 74: /* simple_statement: kill */
//  if (yyn == 74)
//    /* "sql_yacc.y":2462  */
//                                        { yyval= nullptr; };
			break;

		case 76: /* simple_statement: lock */
//  if (yyn == 76)
//    /* "sql_yacc.y":2464  */
//                                        { yyval= nullptr; };
			break;

		case 80: /* simple_statement: prepare */
//  if (yyn == 80)
//    /* "sql_yacc.y":2468  */
//                                        { yyval= nullptr; };
			break;

		case 81: /* simple_statement: purge */
//  if (yyn == 81)
//    /* "sql_yacc.y":2469  */
//                                        { yyval= nullptr; };
			break;

		case 82: /* simple_statement: release */
//  if (yyn == 82)
//    /* "sql_yacc.y":2470  */
//                                        { yyval= nullptr; };
			break;

		case 83: /* simple_statement: rename */
//  if (yyn == 83)
//    /* "sql_yacc.y":2471  */
//                                        { yyval= nullptr; };
			break;

		case 86: /* simple_statement: reset */
//  if (yyn == 86)
//    /* "sql_yacc.y":2474  */
//                                        { yyval= nullptr; };
			break;

		case 87: /* simple_statement: resignal_stmt */
//  if (yyn == 87)
//    /* "sql_yacc.y":2475  */
//                                        { yyval= nullptr; };
			break;

		case 89: /* simple_statement: revoke */
//  if (yyn == 89)
//    /* "sql_yacc.y":2477  */
//                                        { yyval= nullptr; };
			break;

		case 90: /* simple_statement: rollback */
//  if (yyn == 90)
//    /* "sql_yacc.y":2478  */
//                                        { yyval= nullptr; };
			break;

		case 91: /* simple_statement: savepoint */
//  if (yyn == 91)
//    /* "sql_yacc.y":2479  */
//                                        { yyval= nullptr; };
			break;

		case 93: /* simple_statement: set */
//  if (yyn == 93)
//    /* "sql_yacc.y":2481  */
//                                        { yyval= nullptr; CONTEXTUALIZE(((set)(yystack.valueAt (0)))); };
			break;

		case 142: /* simple_statement: signal_stmt */
//  if (yyn == 142)
//    /* "sql_yacc.y":2530  */
//                                        { yyval= nullptr; };
			break;

		case 143: /* simple_statement: start */
//  if (yyn == 143)
//    /* "sql_yacc.y":2531  */
//                                        { yyval= nullptr; };
			break;

		case 144: /* simple_statement: start_replica_stmt */
//  if (yyn == 144)
//    /* "sql_yacc.y":2532  */
//                                        { yyval= nullptr; };
			break;

		case 145: /* simple_statement: stop_replica_stmt */
//  if (yyn == 145)
//    /* "sql_yacc.y":2533  */
//                                        { yyval= nullptr; };
			break;

		case 147: /* simple_statement: uninstall */
//  if (yyn == 147)
//    /* "sql_yacc.y":2535  */
//                                        { yyval= nullptr; };
			break;

		case 148: /* simple_statement: unlock */
//  if (yyn == 148)
//    /* "sql_yacc.y":2536  */
//                                        { yyval= nullptr; };
			break;

		case 150: /* simple_statement: use */
//  if (yyn == 150)
//    /* "sql_yacc.y":2538  */
//                                        { yyval= nullptr; };
			break;

		case 151: /* simple_statement: xa */
//  if (yyn == 151)
//    /* "sql_yacc.y":2539  */
//                                        { yyval= nullptr; };
			break;

		case 152: /* deallocate: deallocate_or_drop PREPARE_SYM ident */
			if (yyn == 152)
			/* "sql_yacc.y":2544 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DEALLOCATE_PREPARE;
//            lex->prepared_stmt_name= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
			}
			;
			break;

		case 155: /* prepare: PREPARE_SYM ident FROM prepare_src */
			if (yyn == 155)
			/* "sql_yacc.y":2559 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            lex->sql_command= SQLCOM_PREPARE;
//            lex->prepared_stmt_name= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2))));
				/*
				 * We don't know know at this time whether there's a password in prepare_src, so we err on the side of caution. Setting the flag will force a rewrite which will
				 * obscure all of prepare_src in the "Query" log line. We'll see the actual query (with just the passwords obscured, if any) immediately afterwards in the
				 * "Prepare" log lines anyway, and then again in the "Execute" log line if and when prepare_src is executed.
				 */
//            lex->contains_plaintext_password= true;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_PREPARE;
			}
			;
			break;

		case 156: /* prepare_src: TEXT_STRING_sys */
//  if (yyn == 156)
//    /* "sql_yacc.y":2579  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            lex->prepared_stmt_code= ((lexer.lex_str)(yystack.valueAt (0)));
//            lex->prepared_stmt_code_is_varref= false;
//          };
			break;

		case 157: /* prepare_src: '@' ident_or_text */
//  if (yyn == 157)
//    /* "sql_yacc.y":2586  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            lex->prepared_stmt_code= ((lexer.lex_str)(yystack.valueAt (0)));
//            lex->prepared_stmt_code_is_varref= true;
//          };
			break;

		case 158: /* $@2: %empty */
			if (yyn == 158)
			/* "sql_yacc.y":2596 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            lex->sql_command= SQLCOM_EXECUTE;
//            lex->prepared_stmt_name= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_EXECUTE;
			}
			;
			break;

		case 159: /* execute: EXECUTE_SYM ident $@2 execute_using */
//  if (yyn == 159)
//    /* "sql_yacc.y":2603  */
//          {};
			break;

		case 164: /* execute_var_ident: '@' ident_or_text */
//  if (yyn == 164)
//    /* "sql_yacc.y":2618  */
//          {
//            LEX *lex=Lex;
//            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&((lexer.lex_str)(yystack.valueAt (0))), sizeof(LEX_STRING));
//            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
//              MYSQL_YYABORT;
//          };
			break;

		case 165: /* $@3: %empty */
//  if (yyn == 165)
//    /* "sql_yacc.y":2630  */
//          {
//            if (Lex->sphead)
//            {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 166: /* help: HELP_SYM $@3 ident_or_text */
			if (yyn == 166)
			/* "sql_yacc.y":2638 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_HELP;
//            lex->help_arg= ((lexer.lex_str)(yystack.valueAt (0))).str;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_HELP;
			}
			;
			break;

		case 167: /* $@4: %empty */
			if (yyn == 167)
			/* "sql_yacc.y":2649 */
			{
//            LEX *lex = Lex;
//            lex->sql_command = SQLCOM_CHANGE_REPLICATION_SOURCE;
//            /*
//              Clear LEX_SOURCE_INFO struct. repl_ignore_server_ids is cleared
//              in THD::cleanup_after_query. So it is guaranteed to be empty here.
//            */
//            assert(Lex->mi.repl_ignore_server_ids.empty());
//            lex->mi.set_unspecified();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CHANGE_REPLICATION_SOURCE;
			}
			;
			break;

		case 168: /* change_replication_stmt: CHANGE REPLICATION SOURCE_SYM TO_SYM $@4 source_defs opt_channel */
//  if (yyn == 168)
//    /* "sql_yacc.y":2660  */
//          {
//            if (Lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 169: /* $@5: %empty */
			if (yyn == 169)
			/* "sql_yacc.y":2665 */
			{
//            THD *thd= YYTHD;
//            LEX* lex= thd->lex;
//            assert(lex->m_sql_cmd == nullptr);
//            lex->sql_command = SQLCOM_CHANGE_REPLICATION_FILTER;
//            lex->m_sql_cmd= NEW_PTN Sql_cmd_change_repl_filter();
//            if (lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CHANGE_REPLICATION_FILTER;
			}
			;
			break;

		case 170: /* change_replication_stmt: CHANGE REPLICATION FILTER_SYM $@5 filter_defs opt_channel */
//  if (yyn == 170)
//    /* "sql_yacc.y":2675  */
//          {
//            if (Lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 173: /* filter_def: REPLICATE_DO_DB EQ opt_filter_db_list */
//  if (yyn == 173)
//    /* "sql_yacc.y":2687  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_DO_DB);
//          };
			break;

		case 174: /* filter_def: REPLICATE_IGNORE_DB EQ opt_filter_db_list */
//  if (yyn == 174)
//    /* "sql_yacc.y":2694  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_IGNORE_DB);
//          };
			break;

		case 175: /* filter_def: REPLICATE_DO_TABLE EQ opt_filter_table_list */
//  if (yyn == 175)
//    /* "sql_yacc.y":2701  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_DO_TABLE);
//          };
			break;

		case 176: /* filter_def: REPLICATE_IGNORE_TABLE EQ opt_filter_table_list */
//  if (yyn == 176)
//    /* "sql_yacc.y":2708  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_IGNORE_TABLE);
//          };
			break;

		case 177: /* filter_def: REPLICATE_WILD_DO_TABLE EQ opt_filter_string_list */
//  if (yyn == 177)
//    /* "sql_yacc.y":2715  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_WILD_DO_TABLE);
//          };
			break;

		case 178: /* filter_def: REPLICATE_WILD_IGNORE_TABLE EQ opt_filter_string_list */
//  if (yyn == 178)
//    /* "sql_yacc.y":2722  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))),
//                                             OPT_REPLICATE_WILD_IGNORE_TABLE);
//          };
			break;

		case 179: /* filter_def: REPLICATE_REWRITE_DB EQ opt_filter_db_pair_list */
//  if (yyn == 179)
//    /* "sql_yacc.y":2730  */
//          {
//            Sql_cmd_change_repl_filter * filter_sql_cmd=
//              (Sql_cmd_change_repl_filter*) Lex->m_sql_cmd;
//            assert(filter_sql_cmd != nullptr);
//            filter_sql_cmd->set_filter_value(((item_list)(yystack.valueAt (0))), OPT_REPLICATE_REWRITE_DB);
//          };
			break;

		case 180: /* opt_filter_db_list: '(' ')' */
//  if (yyn == 180)
//    /* "sql_yacc.y":2739  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 181: /* opt_filter_db_list: '(' filter_db_list ')' */
//  if (yyn == 181)
//    /* "sql_yacc.y":2745  */
//          {
//            yyval= ((item_list)(yystack.valueAt (1)));
//          };
			break;

		case 182: /* filter_db_list: filter_db_ident */
//  if (yyn == 182)
//    /* "sql_yacc.y":2752  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((item)(yystack.valueAt (0))));
//          };
			break;

		case 183: /* filter_db_list: filter_db_list ',' filter_db_ident */
//  if (yyn == 183)
//    /* "sql_yacc.y":2759  */
//          {
//            ((item_list)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0))));
//            yyval= ((item_list)(yystack.valueAt (2)));
//          };
			break;

		case 184: /* filter_db_ident: ident */
//  if (yyn == 184)
//    /* "sql_yacc.y":2767  */
//          {
//            THD *thd= YYTHD;
//            Item *db_item= NEW_PTN Item_string(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                               thd->charset());
//            yyval= db_item;
//          };
			break;

		case 185: /* opt_filter_db_pair_list: '(' ')' */
//  if (yyn == 185)
//    /* "sql_yacc.y":2776  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 186: /* opt_filter_db_pair_list: '(' filter_db_pair_list ')' */
//  if (yyn == 186)
//    /* "sql_yacc.y":2782  */
//          {
//            yyval= ((item_list)(yystack.valueAt (1)));
//          };
			break;

		case 187: /* filter_db_pair_list: '(' filter_db_ident ',' filter_db_ident ')' */
//  if (yyn == 187)
//    /* "sql_yacc.y":2788  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((item)(yystack.valueAt (3))));
//            yyval->push_back(((item)(yystack.valueAt (1))));
//          };
			break;

		case 188: /* filter_db_pair_list: filter_db_pair_list ',' '(' filter_db_ident ',' filter_db_ident ')' */
//  if (yyn == 188)
//    /* "sql_yacc.y":2796  */
//          {
//            ((item_list)(yystack.valueAt (6)))->push_back(((item)(yystack.valueAt (3))));
//            ((item_list)(yystack.valueAt (6)))->push_back(((item)(yystack.valueAt (1))));
//            yyval= ((item_list)(yystack.valueAt (6)));
//          };
			break;

		case 189: /* opt_filter_table_list: '(' ')' */
//  if (yyn == 189)
//    /* "sql_yacc.y":2804  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 190: /* opt_filter_table_list: '(' filter_table_list ')' */
//  if (yyn == 190)
//    /* "sql_yacc.y":2810  */
//          {
//            yyval= ((item_list)(yystack.valueAt (1)));
//          };
			break;

		case 191: /* filter_table_list: filter_table_ident */
//  if (yyn == 191)
//    /* "sql_yacc.y":2817  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((item)(yystack.valueAt (0))));
//          };
			break;

		case 192: /* filter_table_list: filter_table_list ',' filter_table_ident */
//  if (yyn == 192)
//    /* "sql_yacc.y":2824  */
//          {
//            ((item_list)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0))));
//            yyval= ((item_list)(yystack.valueAt (2)));
//          };
			break;

		case 193: /* filter_table_ident: schema '.' ident */
//  if (yyn == 193)
//    /* "sql_yacc.y":2832  */
//          {
//            THD *thd= YYTHD;
//            Item_string *table_item= NEW_PTN Item_string(((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (2))).length,
//                                                         thd->charset());
//            table_item->append(thd->strmake(".", 1), 1);
//            table_item->append(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//            yyval= table_item;
//          };
			break;

		case 194: /* opt_filter_string_list: '(' ')' */
//  if (yyn == 194)
//    /* "sql_yacc.y":2844  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 195: /* opt_filter_string_list: '(' filter_string_list ')' */
//  if (yyn == 195)
//    /* "sql_yacc.y":2850  */
//          {
//            yyval= ((item_list)(yystack.valueAt (1)));
//          };
			break;

		case 196: /* filter_string_list: filter_string */
//  if (yyn == 196)
//    /* "sql_yacc.y":2857  */
//          {
//            yyval= NEW_PTN mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((item)(yystack.valueAt (0))));
//          };
			break;

		case 197: /* filter_string_list: filter_string_list ',' filter_string */
//  if (yyn == 197)
//    /* "sql_yacc.y":2864  */
//          {
//            ((item_list)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0))));
//            yyval= ((item_list)(yystack.valueAt (2)));
//          };
			break;

		case 198: /* filter_string: filter_wild_db_table_string */
//  if (yyn == 198)
//    /* "sql_yacc.y":2872  */
//          {
//            THD *thd= YYTHD;
//            Item *string_item= NEW_PTN Item_string(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                                   thd->charset());
//            yyval= string_item;
//          };
			break;

		case 201: /* source_def: SOURCE_HOST_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 201)
//    /* "sql_yacc.y":2887  */
//          {
//            Lex->mi.host = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 202: /* source_def: NETWORK_NAMESPACE_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 202)
//    /* "sql_yacc.y":2891  */
//          {
//            Lex->mi.network_namespace = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 203: /* source_def: SOURCE_BIND_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 203)
//    /* "sql_yacc.y":2895  */
//          {
//            Lex->mi.bind_addr = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 204: /* source_def: SOURCE_USER_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 204)
//    /* "sql_yacc.y":2899  */
//          {
//            Lex->mi.user = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 205: /* source_def: SOURCE_PASSWORD_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 205)
//    /* "sql_yacc.y":2903  */
//          {
//            Lex->mi.password = ((lexer.lex_str)(yystack.valueAt (0))).str;
//            if (strlen(((lexer.lex_str)(yystack.valueAt (0))).str) > 32)
//            {
//              my_error(ER_CHANGE_SOURCE_PASSWORD_LENGTH, MYF(0));
//              MYSQL_YYABORT;
//            }
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 206: /* source_def: SOURCE_PORT_SYM EQ ulong_num */
//  if (yyn == 206)
//    /* "sql_yacc.y":2913  */
//          {
//            Lex->mi.port = ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 207: /* source_def: SOURCE_CONNECT_RETRY_SYM EQ ulong_num */
//  if (yyn == 207)
//    /* "sql_yacc.y":2917  */
//          {
//            Lex->mi.connect_retry = ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 208: /* source_def: SOURCE_RETRY_COUNT_SYM EQ ulong_num */
//  if (yyn == 208)
//    /* "sql_yacc.y":2921  */
//          {
//            Lex->mi.retry_count= ((ulong_num)(yystack.valueAt (0)));
//            Lex->mi.retry_count_opt= LEX_SOURCE_INFO::LEX_MI_ENABLE;
//          };
			break;

		case 209: /* source_def: SOURCE_DELAY_SYM EQ ulong_num */
//  if (yyn == 209)
//    /* "sql_yacc.y":2926  */
//          {
//            if (((ulong_num)(yystack.valueAt (0))) > SOURCE_DELAY_MAX)
//            {
//              const char *msg= YYTHD->strmake(yystack.locationAt (0).cpp.start, yystack.locationAt (0).cpp.end - yystack.locationAt (0).cpp.start);
//              my_error(ER_SOURCE_DELAY_VALUE_OUT_OF_RANGE, MYF(0),
//                       msg, SOURCE_DELAY_MAX);
//            }
//            else
//              Lex->mi.sql_delay = ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 210: /* source_def: SOURCE_SSL_SYM EQ ulong_num */
//  if (yyn == 210)
//    /* "sql_yacc.y":2937  */
//          {
//            Lex->mi.ssl= ((ulong_num)(yystack.valueAt (0))) ?
//              LEX_SOURCE_INFO::LEX_MI_ENABLE : LEX_SOURCE_INFO::LEX_MI_DISABLE;
//          };
			break;

		case 211: /* source_def: SOURCE_SSL_CA_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 211)
//    /* "sql_yacc.y":2942  */
//          {
//            Lex->mi.ssl_ca= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 212: /* source_def: SOURCE_SSL_CAPATH_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 212)
//    /* "sql_yacc.y":2946  */
//          {
//            Lex->mi.ssl_capath= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 213: /* source_def: SOURCE_TLS_VERSION_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 213)
//    /* "sql_yacc.y":2950  */
//          {
//            Lex->mi.tls_version= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 215: /* source_def: SOURCE_SSL_CERT_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 215)
//    /* "sql_yacc.y":2955  */
//          {
//            Lex->mi.ssl_cert= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 216: /* source_def: SOURCE_SSL_CIPHER_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 216)
//    /* "sql_yacc.y":2959  */
//          {
//            Lex->mi.ssl_cipher= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 217: /* source_def: SOURCE_SSL_KEY_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 217)
//    /* "sql_yacc.y":2963  */
//          {
//            Lex->mi.ssl_key= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 218: /* source_def: SOURCE_SSL_VERIFY_SERVER_CERT_SYM EQ ulong_num */
//  if (yyn == 218)
//    /* "sql_yacc.y":2967  */
//          {
//            Lex->mi.ssl_verify_server_cert= ((ulong_num)(yystack.valueAt (0))) ?
//              LEX_SOURCE_INFO::LEX_MI_ENABLE : LEX_SOURCE_INFO::LEX_MI_DISABLE;
//          };
			break;

		case 219: /* source_def: SOURCE_SSL_CRL_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 219)
//    /* "sql_yacc.y":2972  */
//          {
//            Lex->mi.ssl_crl= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 220: /* source_def: SOURCE_SSL_CRLPATH_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 220)
//    /* "sql_yacc.y":2976  */
//          {
//            Lex->mi.ssl_crlpath= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 221: /* source_def: SOURCE_PUBLIC_KEY_PATH_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 221)
//    /* "sql_yacc.y":2980  */
//          {
//            Lex->mi.public_key_path= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 222: /* source_def: GET_SOURCE_PUBLIC_KEY_SYM EQ ulong_num */
//  if (yyn == 222)
//    /* "sql_yacc.y":2984  */
//          {
//            Lex->mi.get_public_key= ((ulong_num)(yystack.valueAt (0))) ?
//              LEX_SOURCE_INFO::LEX_MI_ENABLE :
//              LEX_SOURCE_INFO::LEX_MI_DISABLE;
//          };
			break;

		case 223: /* source_def: SOURCE_HEARTBEAT_PERIOD_SYM EQ NUM_literal */
//  if (yyn == 223)
//    /* "sql_yacc.y":2990  */
//          {
//            Item *num= ((item_num)(yystack.valueAt (0)));
//            ITEMIZE(num, &num);
//
//            Lex->mi.heartbeat_period= (float) num->val_real();
//            if (Lex->mi.heartbeat_period > REPLICA_MAX_HEARTBEAT_PERIOD ||
//                Lex->mi.heartbeat_period < 0.0)
//            {
//               const char format[]= "%d";
//               char buf[4*sizeof(REPLICA_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
//               sprintf(buf, format, REPLICA_MAX_HEARTBEAT_PERIOD);
//               my_error(ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
//               MYSQL_YYABORT;
//            }
//            if (Lex->mi.heartbeat_period > replica_net_timeout)
//            {
//              push_warning(YYTHD, Sql_condition::SL_WARNING,
//                           ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
//                           ER_THD(YYTHD, ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
//            }
//            if (Lex->mi.heartbeat_period < 0.001)
//            {
//              if (Lex->mi.heartbeat_period != 0.0)
//              {
//                push_warning(YYTHD, Sql_condition::SL_WARNING,
//                             ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
//                             ER_THD(YYTHD, ER_REPLICA_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
//                Lex->mi.heartbeat_period= 0.0;
//              }
//              Lex->mi.heartbeat_opt=  LEX_SOURCE_INFO::LEX_MI_DISABLE;
//            }
//            Lex->mi.heartbeat_opt=  LEX_SOURCE_INFO::LEX_MI_ENABLE;
//          };
			break;

		case 224: /* source_def: IGNORE_SERVER_IDS_SYM EQ '(' ignore_server_id_list ')' */
//  if (yyn == 224)
//    /* "sql_yacc.y":3024  */
//          {
//            Lex->mi.repl_ignore_server_ids_opt= LEX_SOURCE_INFO::LEX_MI_ENABLE;
//           };
			break;

		case 225: /* source_def: SOURCE_COMPRESSION_ALGORITHM_SYM EQ TEXT_STRING_sys */
//  if (yyn == 225)
//    /* "sql_yacc.y":3028  */
//          {
//            Lex->mi.compression_algorithm = ((lexer.lex_str)(yystack.valueAt (0))).str;
//           };
			break;

		case 226: /* source_def: SOURCE_ZSTD_COMPRESSION_LEVEL_SYM EQ ulong_num */
//  if (yyn == 226)
//    /* "sql_yacc.y":3032  */
//          {
//            Lex->mi.zstd_compression_level = ((ulong_num)(yystack.valueAt (0)));
//           };
			break;

		case 227: /* source_def: SOURCE_AUTO_POSITION_SYM EQ ulong_num */
//  if (yyn == 227)
//    /* "sql_yacc.y":3036  */
//          {
//            Lex->mi.auto_position= ((ulong_num)(yystack.valueAt (0))) ?
//              LEX_SOURCE_INFO::LEX_MI_ENABLE :
//              LEX_SOURCE_INFO::LEX_MI_DISABLE;
//          };
			break;

		case 229: /* source_def: REQUIRE_ROW_FORMAT_SYM EQ ulong_num */
//  if (yyn == 229)
//    /* "sql_yacc.y":3043  */
//          {
//            switch(((ulong_num)(yystack.valueAt (0)))) {
//            case 0:
//                Lex->mi.require_row_format =
//                  LEX_SOURCE_INFO::LEX_MI_DISABLE;
//                break;
//            case 1:
//                Lex->mi.require_row_format =
//                  LEX_SOURCE_INFO::LEX_MI_ENABLE;
//                break;
//            default:
//              const char* wrong_value = YYTHD->strmake(yystack.locationAt (0).raw.start, yystack.locationAt (0).raw.length());
//              my_error(ER_REQUIRE_ROW_FORMAT_INVALID_VALUE, MYF(0), wrong_value);
//            }
//          };
			break;

		case 231: /* source_def: SOURCE_CONNECTION_AUTO_FAILOVER_SYM EQ real_ulong_num */
//  if (yyn == 231)
//    /* "sql_yacc.y":3060  */
//          {
//            switch(((ulong_num)(yystack.valueAt (0)))) {
//            case 0:
//                Lex->mi.m_source_connection_auto_failover =
//                  LEX_SOURCE_INFO::LEX_MI_DISABLE;
//                break;
//            case 1:
//                Lex->mi.m_source_connection_auto_failover =
//                  LEX_SOURCE_INFO::LEX_MI_ENABLE;
//                break;
//            default:
//                YYTHD->syntax_error_at(yystack.locationAt (0));
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 233: /* source_def: GTID_ONLY_SYM EQ real_ulong_num */
//  if (yyn == 233)
//    /* "sql_yacc.y":3077  */
//          {
//            switch(((ulong_num)(yystack.valueAt (0)))) {
//            case 0:
//                Lex->mi.m_gtid_only =
//                  LEX_SOURCE_INFO::LEX_MI_DISABLE;
//                break;
//            case 1:
//                Lex->mi.m_gtid_only =
//                  LEX_SOURCE_INFO::LEX_MI_ENABLE;
//                break;
//            default:
//                YYTHD->syntax_error_at(yystack.locationAt (0),
//                  "You have an error in your CHANGE REPLICATION SOURCE syntax; GTID_ONLY only accepts values 0 or 1");
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 238: /* ignore_server_id: ulong_num */
//  if (yyn == 238)
//    /* "sql_yacc.y":3104  */
//          {
//            Lex->mi.repl_ignore_server_ids.push_back(((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 239: /* privilege_check_def: user_ident_or_text */
//  if (yyn == 239)
//    /* "sql_yacc.y":3110  */
//          {
//            Lex->mi.privilege_checks_none= false;
//            Lex->mi.privilege_checks_username= ((lex_user)(yystack.valueAt (0)))->user.str;
//            Lex->mi.privilege_checks_hostname= ((lex_user)(yystack.valueAt (0)))->host.str;
//          };
			break;

		case 240: /* privilege_check_def: NULL_SYM */
//  if (yyn == 240)
//    /* "sql_yacc.y":3116  */
//          {
//            Lex->mi.privilege_checks_none= true;
//            Lex->mi.privilege_checks_username= nullptr;
//            Lex->mi.privilege_checks_hostname= nullptr;
//          };
			break;

		case 241: /* table_primary_key_check_def: STREAM_SYM */
//  if (yyn == 241)
//    /* "sql_yacc.y":3125  */
//          {
//            Lex->mi.require_table_primary_key_check= LEX_SOURCE_INFO::LEX_MI_PK_CHECK_STREAM;
//          };
			break;

		case 242: /* table_primary_key_check_def: ON_SYM */
//  if (yyn == 242)
//    /* "sql_yacc.y":3129  */
//          {
//            Lex->mi.require_table_primary_key_check= LEX_SOURCE_INFO::LEX_MI_PK_CHECK_ON;
//          };
			break;

		case 243: /* table_primary_key_check_def: OFF_SYM */
//  if (yyn == 243)
//    /* "sql_yacc.y":3133  */
//          {
//            Lex->mi.require_table_primary_key_check= LEX_SOURCE_INFO::LEX_MI_PK_CHECK_OFF;
//          };
			break;

		case 244: /* table_primary_key_check_def: GENERATE_SYM */
//  if (yyn == 244)
//    /* "sql_yacc.y":3137  */
//          {
//            Lex->mi.require_table_primary_key_check= LEX_SOURCE_INFO::LEX_MI_PK_CHECK_GENERATE;
//          };
			break;

		case 245: /* assign_gtids_to_anonymous_transactions_def: OFF_SYM */
//  if (yyn == 245)
//    /* "sql_yacc.y":3144  */
//          {
//            Lex->mi.assign_gtids_to_anonymous_transactions_type = LEX_SOURCE_INFO::LEX_MI_ANONYMOUS_TO_GTID_OFF;
//          };
			break;

		case 246: /* assign_gtids_to_anonymous_transactions_def: LOCAL_SYM */
//  if (yyn == 246)
//    /* "sql_yacc.y":3148  */
//          {
//            Lex->mi.assign_gtids_to_anonymous_transactions_type = LEX_SOURCE_INFO::LEX_MI_ANONYMOUS_TO_GTID_LOCAL;
//          };
			break;

		case 247: /* assign_gtids_to_anonymous_transactions_def: TEXT_STRING */
//  if (yyn == 247)
//    /* "sql_yacc.y":3152  */
//          {
//            Lex->mi.assign_gtids_to_anonymous_transactions_type = LEX_SOURCE_INFO::LEX_MI_ANONYMOUS_TO_GTID_UUID;
//            Lex->mi.assign_gtids_to_anonymous_transactions_manual_uuid = ((lexer.lex_str)(yystack.valueAt (0))).str;
//            if (!mysql::gtid::Uuid::is_valid(((lexer.lex_str)(yystack.valueAt (0))).str, mysql::gtid::Uuid::TEXT_LENGTH))
//            {
//              my_error(ER_WRONG_VALUE, MYF(0), "UUID", ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 248: /* source_tls_ciphersuites_def: TEXT_STRING_sys_nonewline */
//  if (yyn == 248)
//    /* "sql_yacc.y":3166  */
//          {
//            Lex->mi.tls_ciphersuites = LEX_SOURCE_INFO::SPECIFIED_STRING;
//            Lex->mi.tls_ciphersuites_string= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 249: /* source_tls_ciphersuites_def: NULL_SYM */
//  if (yyn == 249)
//    /* "sql_yacc.y":3171  */
//          {
//            Lex->mi.tls_ciphersuites = LEX_SOURCE_INFO::SPECIFIED_NULL;
//            Lex->mi.tls_ciphersuites_string = nullptr;
//          };
			break;

		case 250: /* source_file_def: SOURCE_LOG_FILE_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 250)
//    /* "sql_yacc.y":3179  */
//          {
//            Lex->mi.log_file_name = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 251: /* source_file_def: SOURCE_LOG_POS_SYM EQ ulonglong_num */
//  if (yyn == 251)
//    /* "sql_yacc.y":3183  */
//          {
//            Lex->mi.pos = ((ulonglong_number)(yystack.valueAt (0)));
//            /*
//               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
//               instead of causing subsequent errors.
//               We need to do it in this file, because only there we know that
//               SOURCE_LOG_POS has been explicitely specified. On the contrary
//               in change_master() (rpl_replica.cc) we cannot distinguish between 0
//               (SOURCE_LOG_POS_SYM explicitely specified as 0) and 0 (unspecified),
//               whereas we want to distinguish (specified 0 means "read the binlog
//               from 0" (4 in fact), unspecified means "don't change the position
//               (keep the preceding value)").
//            */
//            Lex->mi.pos = max<ulonglong>(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
//          };
			break;

		case 252: /* source_file_def: RELAY_LOG_FILE_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 252)
//    /* "sql_yacc.y":3199  */
//          {
//            Lex->mi.relay_log_name = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 253: /* source_file_def: RELAY_LOG_POS_SYM EQ ulong_num */
//  if (yyn == 253)
//    /* "sql_yacc.y":3203  */
//          {
//            Lex->mi.relay_log_pos = ((ulong_num)(yystack.valueAt (0)));
//            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
//            Lex->mi.relay_log_pos = max<ulong>(BIN_LOG_HEADER_SIZE,
//                                               Lex->mi.relay_log_pos);
//          };
			break;

		case 254: /* opt_channel: %empty */
//  if (yyn == 254)
//    /* "sql_yacc.y":3212  */
//                 { yyval = {}; };
			break;

		case 255: /* opt_channel: FOR_SYM CHANNEL_SYM TEXT_STRING_sys_nonewline */
//  if (yyn == 255)
//    /* "sql_yacc.y":3214  */
//          { yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 256: /* create_table_stmt: CREATE opt_temporary TABLE_SYM opt_if_not_exists table_ident '(' table_element_list ')' opt_create_table_options_etc */
//  if (yyn == 256)
//    /* "sql_yacc.y":3220  */
//          {
//            yyval= NEW_PTN PT_create_table_stmt((yyloc), YYMEM_ROOT, ((is_not_empty)(yystack.valueAt (7))), ((is_not_empty)(yystack.valueAt (5))), ((table)(yystack.valueAt (4))),
//                                             ((table_element_list)(yystack.valueAt (2))),
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_create_table_options,
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_partitioning,
//                                             ((create_table_tail)(yystack.valueAt (0))).on_duplicate,
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_query_expression);
//          };
			break;

		case 257: /* create_table_stmt: CREATE opt_temporary TABLE_SYM opt_if_not_exists table_ident opt_create_table_options_etc */
//  if (yyn == 257)
//    /* "sql_yacc.y":3230  */
//          {
//            yyval= NEW_PTN PT_create_table_stmt((yyloc), YYMEM_ROOT, ((is_not_empty)(yystack.valueAt (4))), ((is_not_empty)(yystack.valueAt (2))), ((table)(yystack.valueAt (1))),
//                                             nullptr,
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_create_table_options,
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_partitioning,
//                                             ((create_table_tail)(yystack.valueAt (0))).on_duplicate,
//                                             ((create_table_tail)(yystack.valueAt (0))).opt_query_expression);
//          };
			break;

		case 258: /* create_table_stmt: CREATE opt_temporary TABLE_SYM opt_if_not_exists table_ident LIKE table_ident */
//  if (yyn == 258)
//    /* "sql_yacc.y":3240  */
//          {
//            yyval= NEW_PTN PT_create_table_stmt((yyloc), YYMEM_ROOT, ((is_not_empty)(yystack.valueAt (5))), ((is_not_empty)(yystack.valueAt (3))), ((table)(yystack.valueAt (2))), ((table)(yystack.valueAt (0))));
//          };
			break;

		case 259: /* create_table_stmt: CREATE opt_temporary TABLE_SYM opt_if_not_exists table_ident '(' LIKE table_ident ')' */
//  if (yyn == 259)
//    /* "sql_yacc.y":3245  */
//          {
//            yyval= NEW_PTN PT_create_table_stmt((yyloc), YYMEM_ROOT, ((is_not_empty)(yystack.valueAt (7))), ((is_not_empty)(yystack.valueAt (5))), ((table)(yystack.valueAt (4))), ((table)(yystack.valueAt (1))));
//          };
			break;

		case 260: /* create_role_stmt: CREATE ROLE_SYM opt_if_not_exists role_list */
//  if (yyn == 260)
//    /* "sql_yacc.y":3252  */
//          {
//            yyval= NEW_PTN PT_create_role((yyloc), !!((is_not_empty)(yystack.valueAt (1))), ((user_list)(yystack.valueAt (0))));
//          };
			break;

		case 261: /*
					 * create_resource_group_stmt: CREATE RESOURCE_SYM GROUP_SYM ident TYPE_SYM opt_equal resource_group_types opt_resource_group_vcpu_list
					 * opt_resource_group_priority opt_resource_group_enable_disable
					 */
//  if (yyn == 261)
//    /* "sql_yacc.y":3262  */
//          {
//            yyval= NEW_PTN PT_create_resource_group((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (6)))), ((resource_group_type)(yystack.valueAt (3))), ((resource_group_vcpu_list_type)(yystack.valueAt (2))), ((resource_group_priority_type)(yystack.valueAt (1))),
//                                                 ((resource_group_state_type)(yystack.valueAt (0))).is_default ? true :
//                                                 ((resource_group_state_type)(yystack.valueAt (0))).value);
//          };
			break;

		case 262: /* $@6: %empty */
//  if (yyn == 262)
//    /* "sql_yacc.y":3271  */
//          {
//            Lex->create_info= YYTHD->alloc_typed<HA_CREATE_INFO>();
//            if (Lex->create_info == nullptr)
//              MYSQL_YYABORT; // OOM
//            Lex->create_info->default_table_charset= nullptr;
//            Lex->create_info->used_fields= 0;
//          };
			break;

		case 263: /* create: CREATE DATABASE opt_if_not_exists ident $@6 opt_create_database_options */
			if (yyn == 263)
			/* "sql_yacc.y":3279 */
			{
//            LEX *lex=Lex;
//            lex->sql_command=SQLCOM_CREATE_DB;
//            lex->name= ((lexer.lex_str)(yystack.valueAt (2)));
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (3))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_DB;
			}
			;
			break;

		case 264: /* create: CREATE view_or_trigger_or_sp_or_event */
//  if (yyn == 264)
//    /* "sql_yacc.y":3286  */
//          {};
			break;

		case 265: /*
					 * create: CREATE USER opt_if_not_exists create_user_list default_role_clause require_clause connect_options opt_account_lock_password_expire_options
					 * opt_user_attribute
					 */
			if (yyn == 265)
			/* "sql_yacc.y":3291 */
			{
//            LEX *lex=Lex;
//            lex->sql_command = SQLCOM_CREATE_USER;
//            lex->default_roles= ((user_list)(yystack.valueAt (4)));
//            Lex->create_info= YYTHD->alloc_typed<HA_CREATE_INFO>();
//            if (Lex->create_info == nullptr)
//              MYSQL_YYABORT; // OOM
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (6))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//            MAKE_CMD_DCL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_USER;
			}
			;
			break;

		case 266: /* create: CREATE LOGFILE_SYM GROUP_SYM ident ADD lg_undofile opt_logfile_group_options */
			if (yyn == 266)
			/* "sql_yacc.y":3303 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//
//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }
//
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_logfile_group{CREATE_LOGFILE_GROUP,
//                                                          ((lexer.lex_str)(yystack.valueAt (3))), pc, ((lexer.lex_str)(yystack.valueAt (1)))};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ //OOM
//
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 267: /* create: CREATE TABLESPACE_SYM ident opt_ts_datafile_name opt_logfile_group_name opt_tablespace_options */
			if (yyn == 267)
			/* "sql_yacc.y":3323 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//
//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT;
//            }
//
//            auto cmd= NEW_PTN Sql_cmd_create_tablespace{((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (2))), ((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ //OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 268: /* create: CREATE UNDO_SYM TABLESPACE_SYM ident ADD ts_datafile opt_undo_tablespace_options */
			if (yyn == 268)
			/* "sql_yacc.y":3342 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; // OOM
//
//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT;
//            }
//
//            auto cmd= NEW_PTN Sql_cmd_create_undo_tablespace{
//              CREATE_UNDO_TABLESPACE, ((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!cmd)
//              MYSQL_YYABORT; //OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 269: /* create: CREATE SERVER_SYM ident_or_text FOREIGN DATA_SYM WRAPPER_SYM ident_or_text OPTIONS_SYM '(' server_options_list ')' */
			if (yyn == 269)
			/* "sql_yacc.y":3362 */
			{
//            Lex->sql_command= SQLCOM_CREATE_SERVER;
//            if (((lexer.lex_str)(yystack.valueAt (8))).length == 0)
//            {
//              my_error(ER_WRONG_VALUE, MYF(0), "server name", "");
//              MYSQL_YYABORT;
//            }
//            Lex->server_options.m_server_name= ((lexer.lex_str)(yystack.valueAt (8)));
//            Lex->server_options.set_scheme(((lexer.lex_str)(yystack.valueAt (4))));
//            Lex->m_sql_cmd=
//              NEW_PTN Sql_cmd_create_server(&Lex->server_options);
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_SERVER;
			}
			;
			break;

		case 270: /* create_srs_stmt: CREATE OR_SYM REPLACE_SYM SPATIAL_SYM REFERENCE_SYM SYSTEM_SYM real_ulonglong_num srs_attributes */
//  if (yyn == 270)
//    /* "sql_yacc.y":3379  */
//          {
//            yyval= NEW_PTN PT_create_srs((yyloc), ((ulonglong_number)(yystack.valueAt (1))), *((sql_cmd_srs_attributes)(yystack.valueAt (0))), true, false);
//          };
			break;

		case 271: /* create_srs_stmt: CREATE SPATIAL_SYM REFERENCE_SYM SYSTEM_SYM opt_if_not_exists real_ulonglong_num srs_attributes */
//  if (yyn == 271)
//    /* "sql_yacc.y":3384  */
//          {
//            yyval= NEW_PTN PT_create_srs((yyloc), ((ulonglong_number)(yystack.valueAt (1))), *((sql_cmd_srs_attributes)(yystack.valueAt (0))), false, ((is_not_empty)(yystack.valueAt (2))));
//          };
			break;

		case 272: /* srs_attributes: %empty */
//  if (yyn == 272)
//    /* "sql_yacc.y":3391  */
//          {
//            yyval = NEW_PTN Sql_cmd_srs_attributes();
//            if (!yyval)
//              MYSQL_YYABORT_ERROR(ER_DA_OOM, MYF(0)); /* purecov: inspected */
//          };
			break;

		case 273: /* srs_attributes: srs_attributes NAME_SYM TEXT_STRING_sys_nonewline */
//  if (yyn == 273)
//    /* "sql_yacc.y":3397  */
//          {
//            if (((sql_cmd_srs_attributes)(yystack.valueAt (2)))->srs_name.str != nullptr)
//            {
//              MYSQL_YYABORT_ERROR(ER_SRS_MULTIPLE_ATTRIBUTE_DEFINITIONS, MYF(0),
//                                  "NAME");
//            }
//            else
//            {
//              ((sql_cmd_srs_attributes)(yystack.valueAt (2)))->srs_name= ((lexer.lex_str)(yystack.valueAt (0)));
//            }
//          };
			break;

		case 274: /* srs_attributes: srs_attributes DEFINITION_SYM TEXT_STRING_sys_nonewline */
//  if (yyn == 274)
//    /* "sql_yacc.y":3409  */
//          {
//            if (((sql_cmd_srs_attributes)(yystack.valueAt (2)))->definition.str != nullptr)
//            {
//              MYSQL_YYABORT_ERROR(ER_SRS_MULTIPLE_ATTRIBUTE_DEFINITIONS, MYF(0),
//                                  "DEFINITION");
//            }
//            else
//            {
//              ((sql_cmd_srs_attributes)(yystack.valueAt (2)))->definition= ((lexer.lex_str)(yystack.valueAt (0)));
//            }
//          };
			break;

		case 275: /* srs_attributes: srs_attributes ORGANIZATION_SYM TEXT_STRING_sys_nonewline IDENTIFIED_SYM BY real_ulonglong_num */
//  if (yyn == 275)
//    /* "sql_yacc.y":3422  */
//          {
//            if (((sql_cmd_srs_attributes)(yystack.valueAt (5)))->organization.str != nullptr)
//            {
//              MYSQL_YYABORT_ERROR(ER_SRS_MULTIPLE_ATTRIBUTE_DEFINITIONS, MYF(0),
//                                  "ORGANIZATION");
//            }
//            else
//            {
//              ((sql_cmd_srs_attributes)(yystack.valueAt (5)))->organization= ((lexer.lex_str)(yystack.valueAt (3)));
//              ((sql_cmd_srs_attributes)(yystack.valueAt (5)))->organization_coordsys_id= ((ulonglong_number)(yystack.valueAt (0)));
//            }
//          };
			break;

		case 276: /* srs_attributes: srs_attributes DESCRIPTION_SYM TEXT_STRING_sys_nonewline */
//  if (yyn == 276)
//    /* "sql_yacc.y":3435  */
//          {
//            if (((sql_cmd_srs_attributes)(yystack.valueAt (2)))->description.str != nullptr)
//            {
//              MYSQL_YYABORT_ERROR(ER_SRS_MULTIPLE_ATTRIBUTE_DEFINITIONS, MYF(0),
//                                  "DESCRIPTION");
//            }
//            else
//            {
//              ((sql_cmd_srs_attributes)(yystack.valueAt (2)))->description= ((lexer.lex_str)(yystack.valueAt (0)));
//            }
//          };
			break;

		case 277: /* default_role_clause: %empty */
//  if (yyn == 277)
//    /* "sql_yacc.y":3450  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 278: /* default_role_clause: DEFAULT_SYM ROLE_SYM role_list */
//  if (yyn == 278)
//    /* "sql_yacc.y":3455  */
//          {
//            yyval= ((user_list)(yystack.valueAt (0)));
//          };
			break;

		case 279: /*
					 * create_index_stmt: CREATE opt_unique INDEX_SYM ident opt_index_type_clause ON_SYM table_ident '(' key_list_with_expression ')' opt_index_options
					 * opt_index_lock_and_algorithm
					 */
//  if (yyn == 279)
//    /* "sql_yacc.y":3464  */
//          {
//            yyval= NEW_PTN PT_create_index_stmt((yyloc), YYMEM_ROOT, ((key_type)(yystack.valueAt (10))), ((lexer.lex_str)(yystack.valueAt (8))), ((index_option)(yystack.valueAt (7))),
//                                             ((table)(yystack.valueAt (5))), ((index_column_list)(yystack.valueAt (3))), ((index_options)(yystack.valueAt (1))),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).algo.get_or_default(),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).lock.get_or_default());
//          };
			break;

		case 280: /*
					 * create_index_stmt: CREATE FULLTEXT_SYM INDEX_SYM ident ON_SYM table_ident '(' key_list_with_expression ')' opt_fulltext_index_options
					 * opt_index_lock_and_algorithm
					 */
//  if (yyn == 280)
//    /* "sql_yacc.y":3472  */
//          {
//            yyval= NEW_PTN PT_create_index_stmt((yyloc), YYMEM_ROOT, KEYTYPE_FULLTEXT, ((lexer.lex_str)(yystack.valueAt (7))),
//                                             nullptr, ((table)(yystack.valueAt (5))), ((index_column_list)(yystack.valueAt (3))), ((index_options)(yystack.valueAt (1))),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).algo.get_or_default(),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).lock.get_or_default());
//          };
			break;

		case 281: /*
					 * create_index_stmt: CREATE SPATIAL_SYM INDEX_SYM ident ON_SYM table_ident '(' key_list_with_expression ')' opt_spatial_index_options
					 * opt_index_lock_and_algorithm
					 */
//  if (yyn == 281)
//    /* "sql_yacc.y":3480  */
//          {
//            yyval= NEW_PTN PT_create_index_stmt((yyloc), YYMEM_ROOT, KEYTYPE_SPATIAL, ((lexer.lex_str)(yystack.valueAt (7))),
//                                             nullptr, ((table)(yystack.valueAt (5))), ((index_column_list)(yystack.valueAt (3))), ((index_options)(yystack.valueAt (1))),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).algo.get_or_default(),
//                                             ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).lock.get_or_default());
//          };
			break;

		case 284: /* server_option: USER TEXT_STRING_sys */
//  if (yyn == 284)
//    /* "sql_yacc.y":3495  */
//          {
//            Lex->server_options.set_username(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 285: /* server_option: HOST_SYM TEXT_STRING_sys */
//  if (yyn == 285)
//    /* "sql_yacc.y":3499  */
//          {
//            Lex->server_options.set_host(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 286: /* server_option: DATABASE TEXT_STRING_sys */
//  if (yyn == 286)
//    /* "sql_yacc.y":3503  */
//          {
//            Lex->server_options.set_db(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 287: /* server_option: OWNER_SYM TEXT_STRING_sys */
//  if (yyn == 287)
//    /* "sql_yacc.y":3507  */
//          {
//            Lex->server_options.set_owner(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 288: /* server_option: PASSWORD TEXT_STRING_sys */
//  if (yyn == 288)
//    /* "sql_yacc.y":3511  */
//          {
//            Lex->server_options.set_password(((lexer.lex_str)(yystack.valueAt (0))));
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 289: /* server_option: SOCKET_SYM TEXT_STRING_sys */
//  if (yyn == 289)
//    /* "sql_yacc.y":3516  */
//          {
//            Lex->server_options.set_socket(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 290: /* server_option: PORT_SYM ulong_num */
//  if (yyn == 290)
//    /* "sql_yacc.y":3520  */
//          {
//            Lex->server_options.set_port(((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 291: /* $@7: %empty */
			if (yyn == 291)
			/* "sql_yacc.y":3527 */
			{
//            THD *thd= YYTHD;
//            LEX *lex=Lex;
//
//            lex->stmt_definition_begin= yystack.locationAt (2).cpp.start;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (1))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//            if (!(lex->event_parse_data= new (thd->mem_root) Event_parse_data()))
//              MYSQL_YYABORT;
//            lex->event_parse_data->identifier= ((spname)(yystack.valueAt (0)));
//            lex->event_parse_data->on_completion=
//                                  Event_parse_data::ON_COMPLETION_DROP;
//
//            lex->sql_command= SQLCOM_CREATE_EVENT;
//            /* We need that for disallowing subqueries */
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_EVENT;
			}
			;
			break;

		case 292: /*
					 * event_tail: EVENT_SYM opt_if_not_exists sp_name $@7 ON_SYM SCHEDULE_SYM ev_schedule_time opt_ev_on_completion opt_ev_status opt_ev_comment DO_SYM ev_sql_stmt
					 */
			if (yyn == 292)
			/* "sql_yacc.y":3548 */
			{
//            /*
//              sql_command is set here because some rules in ev_sql_stmt
//              can overwrite it
//            */
//            Lex->sql_command= SQLCOM_CREATE_EVENT;
//            assert(Lex->m_sql_cmd->sql_cmd_type() == SQL_CMD_DDL);
//            assert(Lex->m_sql_cmd->sql_command_code() == SQLCOM_CREATE_EVENT);
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_EVENT;
			}
			;
			break;

		case 293: /* $@8: %empty */
//  if (yyn == 293)
//    /* "sql_yacc.y":3561  */
//          {
//            ITEMIZE(((item)(yystack.valueAt (1))), &((item)(yystack.valueAt (1))));
//
//            Lex->event_parse_data->item_expression= ((item)(yystack.valueAt (1)));
//            Lex->event_parse_data->interval= ((interval)(yystack.valueAt (0)));
//          };
			break;

		case 295: /* ev_schedule_time: AT_SYM expr */
//  if (yyn == 295)
//    /* "sql_yacc.y":3570  */
//          {
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            Lex->event_parse_data->item_execute_at= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 296: /* opt_ev_status: %empty */
//  if (yyn == 296)
//    /* "sql_yacc.y":3578  */
//                 { yyval= 0; };
			break;

		case 297: /* opt_ev_status: ENABLE_SYM */
//  if (yyn == 297)
//    /* "sql_yacc.y":3580  */
//          {
//            Lex->event_parse_data->status= Event_parse_data::ENABLED;
//            Lex->event_parse_data->status_changed= true;
//            yyval= 1;
//          };
			break;

		case 298: /* opt_ev_status: DISABLE_SYM ON_SYM SLAVE */
//  if (yyn == 298)
//    /* "sql_yacc.y":3586  */
//          {
//            push_deprecated_warn(YYTHD, "<CREATE|ALTER> EVENT ... DISABLE ON SLAVE",
//                                        "<CREATE|ALTER> EVENT ... DISABLE ON REPLICA");
//            Lex->event_parse_data->status= Event_parse_data::REPLICA_SIDE_DISABLED;
//            Lex->event_parse_data->status_changed= true;
//            yyval= 1;
//          };
			break;

		case 299: /* opt_ev_status: DISABLE_SYM ON_SYM REPLICA_SYM */
//  if (yyn == 299)
//    /* "sql_yacc.y":3594  */
//          {
//            Lex->event_parse_data->status= Event_parse_data::REPLICA_SIDE_DISABLED;
//            Lex->event_parse_data->status_changed= true;
//            yyval= 1;
//          };
			break;

		case 300: /* opt_ev_status: DISABLE_SYM */
//  if (yyn == 300)
//    /* "sql_yacc.y":3600  */
//          {
//            Lex->event_parse_data->status= Event_parse_data::DISABLED;
//            Lex->event_parse_data->status_changed= true;
//            yyval= 1;
//          };
			break;

		case 301: /* ev_starts: %empty */
//  if (yyn == 301)
//    /* "sql_yacc.y":3609  */
//          {
//            Item *item= NEW_PTN Item_func_now_local(0);
//            if (item == nullptr)
//              MYSQL_YYABORT;
//            Lex->event_parse_data->item_starts= item;
//          };
			break;

		case 302: /* ev_starts: STARTS_SYM expr */
//  if (yyn == 302)
//    /* "sql_yacc.y":3616  */
//          {
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            Lex->event_parse_data->item_starts= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 304: /* ev_ends: ENDS_SYM expr */
//  if (yyn == 304)
//    /* "sql_yacc.y":3626  */
//          {
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            Lex->event_parse_data->item_ends= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 305: /* opt_ev_on_completion: %empty */
//  if (yyn == 305)
//    /* "sql_yacc.y":3634  */
//                 { yyval= 0; };
			break;

		case 307: /* ev_on_completion: ON_SYM COMPLETION_SYM PRESERVE_SYM */
//  if (yyn == 307)
//    /* "sql_yacc.y":3640  */
//          {
//            Lex->event_parse_data->on_completion=
//                                  Event_parse_data::ON_COMPLETION_PRESERVE;
//            yyval= 1;
//          };
			break;

		case 308: /* ev_on_completion: ON_SYM COMPLETION_SYM NOT_SYM PRESERVE_SYM */
//  if (yyn == 308)
//    /* "sql_yacc.y":3646  */
//          {
//            Lex->event_parse_data->on_completion=
//                                  Event_parse_data::ON_COMPLETION_DROP;
//            yyval= 1;
//          };
			break;

		case 309: /* opt_ev_comment: %empty */
//  if (yyn == 309)
//    /* "sql_yacc.y":3654  */
//                 { yyval= 0; };
			break;

		case 310: /* opt_ev_comment: COMMENT_SYM TEXT_STRING_sys */
//  if (yyn == 310)
//    /* "sql_yacc.y":3656  */
//          {
//            Lex->event_parse_data->comment= ((lexer.lex_str)(yystack.valueAt (0)));
//            yyval= 1;
//          };
			break;

		case 311: /* $@9: %empty */
//  if (yyn == 311)
//    /* "sql_yacc.y":3663  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//
//            /*
//              This stops the following :
//              - CREATE EVENT ... DO CREATE EVENT ...;
//              - ALTER  EVENT ... DO CREATE EVENT ...;
//              - CREATE EVENT ... DO ALTER EVENT DO ....;
//              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
//              This allows:
//              - CREATE EVENT ... DO DROP EVENT yyy;
//              - CREATE EVENT ... DO ALTER EVENT yyy;
//                (the nested ALTER EVENT can have anything but DO clause)
//              - ALTER  EVENT ... DO ALTER EVENT yyy;
//                (the nested ALTER EVENT can have anything but DO clause)
//              - ALTER  EVENT ... DO DROP EVENT yyy;
//              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
//                (the nested ALTER EVENT can have anything but DO clause)
//              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
//            */
//            if (lex->sphead)
//            {
//              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
//              MYSQL_YYABORT;
//            }
//
//            sp_head *sp= sp_start_parsing(thd,
//                                          enum_sp_type::EVENT,
//                                          lex->event_parse_data->identifier);
//
//            if (!sp)
//              MYSQL_YYABORT;
//
//            lex->sphead= sp;
//
//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
//            sp->m_chistics= &lex->sp_chistics;
//
//            // Default language is SQL
//            lex->sp_chistics.language = {"SQL",3};
//
//            /*
//              Set a body start to the end of the last preprocessed token
//              before ev_sql_stmt:
//            */
//            sp->set_body_start(thd, yystack.locationAt (0).cpp.end);
//          };
			break;

		case 312: /* ev_sql_stmt: $@9 ev_sql_stmt_inner */
//  if (yyn == 312)
//    /* "sql_yacc.y":3712  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//
//            sp_finish_parsing(thd);
//
//            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
//            lex->event_parse_data->body_changed= true;
//          };
			break;

		case 326: /* sp_name: ident '.' ident */
//  if (yyn == 326)
//    /* "sql_yacc.y":3741  */
//          {
//            if (!((lexer.lex_str)(yystack.valueAt (2))).str ||
//                (check_and_convert_db_name(&((lexer.lex_str)(yystack.valueAt (2))), false) != Ident_name_check::OK))
//              MYSQL_YYABORT;
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (0)))))
//            {
//              MYSQL_YYABORT;
//            }
//            yyval= new (YYMEM_ROOT) sp_name(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), ((lexer.lex_str)(yystack.valueAt (0))), true);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->init_qname(YYTHD);
//          };
			break;

		case 327: /* sp_name: ident */
//  if (yyn == 327)
//    /* "sql_yacc.y":3755  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            LEX_CSTRING db;
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (0)))))
//            {
//              MYSQL_YYABORT;
//            }
//            if (lex->copy_db_to(&db.str, &db.length))
//              MYSQL_YYABORT;
//            yyval= new (YYMEM_ROOT) sp_name(db, ((lexer.lex_str)(yystack.valueAt (0))), false);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->init_qname(thd);
//          };
			break;

		case 328: /* sp_a_chistics: %empty */
//  if (yyn == 328)
//    /* "sql_yacc.y":3773  */
//                 {};
			break;

		case 329: /* sp_a_chistics: sp_a_chistics sp_chistic */
//  if (yyn == 329)
//    /* "sql_yacc.y":3774  */
//                                   {};
			break;

		case 330: /* sp_c_chistics: %empty */
//  if (yyn == 330)
//    /* "sql_yacc.y":3778  */
//                 {};
			break;

		case 331: /* sp_c_chistics: sp_c_chistics sp_c_chistic */
//  if (yyn == 331)
//    /* "sql_yacc.y":3779  */
//                                     {};
			break;

		case 332: /* sp_chistic: COMMENT_SYM TEXT_STRING_sys */
//  if (yyn == 332)
//    /* "sql_yacc.y":3785  */
//          { Lex->sp_chistics.comment= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 333: /* sp_chistic: LANGUAGE_SYM SQL_SYM */
//  if (yyn == 333)
//    /* "sql_yacc.y":3787  */
//          { Lex->sp_chistics.language= {"SQL",3}; };
			break;

		case 334: /* sp_chistic: LANGUAGE_SYM ident */
//  if (yyn == 334)
//    /* "sql_yacc.y":3789  */
//          { Lex->sp_chistics.language= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 335: /* sp_chistic: NO_SYM SQL_SYM */
//  if (yyn == 335)
//    /* "sql_yacc.y":3791  */
//          { Lex->sp_chistics.daccess= SP_NO_SQL; };
			break;

		case 336: /* sp_chistic: CONTAINS_SYM SQL_SYM */
//  if (yyn == 336)
//    /* "sql_yacc.y":3793  */
//          { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; };
			break;

		case 337: /* sp_chistic: READS_SYM SQL_SYM DATA_SYM */
//  if (yyn == 337)
//    /* "sql_yacc.y":3795  */
//          { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; };
			break;

		case 338: /* sp_chistic: MODIFIES_SYM SQL_SYM DATA_SYM */
//  if (yyn == 338)
//    /* "sql_yacc.y":3797  */
//          { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; };
			break;

		case 339: /* sp_chistic: sp_suid */
//  if (yyn == 339)
//    /* "sql_yacc.y":3799  */
//          {};
			break;

		case 340: /* sp_c_chistic: sp_chistic */
//  if (yyn == 340)
//    /* "sql_yacc.y":3804  */
//                                { };
			break;

		case 341: /* sp_c_chistic: DETERMINISTIC_SYM */
//  if (yyn == 341)
//    /* "sql_yacc.y":3805  */
//                                { Lex->sp_chistics.detistic= true; };
			break;

		case 342: /* sp_c_chistic: not DETERMINISTIC_SYM */
//  if (yyn == 342)
//    /* "sql_yacc.y":3806  */
//                                { Lex->sp_chistics.detistic= false; };
			break;

		case 343: /* sp_suid: SQL_SYM SECURITY_SYM DEFINER_SYM */
//  if (yyn == 343)
//    /* "sql_yacc.y":3811  */
//          {
//            Lex->sp_chistics.suid= SP_IS_SUID;
//          };
			break;

		case 344: /* sp_suid: SQL_SYM SECURITY_SYM INVOKER_SYM */
//  if (yyn == 344)
//    /* "sql_yacc.y":3815  */
//          {
//            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
//          };
			break;

		case 345: /* call_stmt: CALL_SYM sp_name opt_paren_expr_list */
//  if (yyn == 345)
//    /* "sql_yacc.y":3822  */
//          {
//            yyval= NEW_PTN PT_call((yyloc), ((spname)(yystack.valueAt (1))), ((item_list2)(yystack.valueAt (0))));
//          };
			break;

		case 346: /* opt_paren_expr_list: %empty */
//  if (yyn == 346)
//    /* "sql_yacc.y":3828  */
//                   { yyval= nullptr; };
			break;

		case 347: /* opt_paren_expr_list: '(' opt_expr_list ')' */
//  if (yyn == 347)
//    /* "sql_yacc.y":3830  */
//            {
//              yyval= ((item_list2)(yystack.valueAt (1)));
//            };
			break;

		case 352: /* sp_fdparam: ident type opt_collate */
//  if (yyn == 352)
//    /* "sql_yacc.y":3848  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//
//            CONTEXTUALIZE(((type)(yystack.valueAt (1))));
//            enum_field_types field_type= ((type)(yystack.valueAt (1)))->type;
//            const CHARSET_INFO *cs= ((type)(yystack.valueAt (1)))->get_charset();
//            if (merge_sp_var_charset_and_collation(cs, ((lexer.charset)(yystack.valueAt (0))), &cs))
//              MYSQL_YYABORT;
//
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (2)))))
//              MYSQL_YYABORT;
//
//            if (pctx->find_variable(((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (2))).length, true))
//            {
//              my_error(ER_SP_DUP_PARAM, MYF(0), ((lexer.lex_str)(yystack.valueAt (2))).str);
//              MYSQL_YYABORT;
//            }
//
//            sp_variable *spvar= pctx->add_variable(thd,
//                                                   ((lexer.lex_str)(yystack.valueAt (2))),
//                                                   field_type,
//                                                   sp_variable::MODE_IN);
//
//            if (spvar->field_def.init(thd, "", field_type,
//                                      ((type)(yystack.valueAt (1)))->get_length(), ((type)(yystack.valueAt (1)))->get_dec(),
//                                      ((type)(yystack.valueAt (1)))->get_type_flags(),
//                                      nullptr, nullptr, &NULL_CSTR, nullptr,
//                                      ((type)(yystack.valueAt (1)))->get_interval_list(),
//                                      cs ? cs : thd->variables.collation_database,
//                                      ((lexer.charset)(yystack.valueAt (0))) != nullptr, ((type)(yystack.valueAt (1)))->get_uint_geom_type(),
//                                      nullptr, nullptr, {},
//                                      dd::Column::enum_hidden_type::HT_VISIBLE))
//            {
//              MYSQL_YYABORT;
//            }
//
//            if (prepare_sp_create_field(thd,
//                                        &spvar->field_def))
//            {
//              MYSQL_YYABORT;
//            }
//            spvar->field_def.field_name= spvar->name.str;
//            spvar->field_def.is_nullable= true;
//          };
			break;

		case 357: /* sp_pdparam: sp_opt_inout ident type opt_collate */
//  if (yyn == 357)
//    /* "sql_yacc.y":3910  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (2)))))
//              MYSQL_YYABORT;
//
//            if (pctx->find_variable(((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (2))).length, true))
//            {
//              my_error(ER_SP_DUP_PARAM, MYF(0), ((lexer.lex_str)(yystack.valueAt (2))).str);
//              MYSQL_YYABORT;
//            }
//
//            CONTEXTUALIZE(((type)(yystack.valueAt (1))));
//            enum_field_types field_type= ((type)(yystack.valueAt (1)))->type;
//            const CHARSET_INFO *cs= ((type)(yystack.valueAt (1)))->get_charset();
//            if (merge_sp_var_charset_and_collation(cs, ((lexer.charset)(yystack.valueAt (0))), &cs))
//              MYSQL_YYABORT;
//
//            sp_variable *spvar= pctx->add_variable(thd,
//                                                   ((lexer.lex_str)(yystack.valueAt (2))),
//                                                   field_type,
//                                                   (sp_variable::enum_mode) ((num)(yystack.valueAt (3))));
//
//            if (spvar->field_def.init(thd, "", field_type,
//                                      ((type)(yystack.valueAt (1)))->get_length(), ((type)(yystack.valueAt (1)))->get_dec(),
//                                      ((type)(yystack.valueAt (1)))->get_type_flags(),
//                                      nullptr, nullptr, &NULL_CSTR, nullptr,
//                                      ((type)(yystack.valueAt (1)))->get_interval_list(),
//                                      cs ? cs : thd->variables.collation_database,
//                                      ((lexer.charset)(yystack.valueAt (0))) != nullptr, ((type)(yystack.valueAt (1)))->get_uint_geom_type(),
//                                      nullptr, nullptr, {},
//                                      dd::Column::enum_hidden_type::HT_VISIBLE))
//            {
//              MYSQL_YYABORT;
//            }
//
//            if (prepare_sp_create_field(thd,
//                                        &spvar->field_def))
//            {
//              MYSQL_YYABORT;
//            }
//            spvar->field_def.field_name= spvar->name.str;
//            spvar->field_def.is_nullable= true;
//          };
			break;

		case 358: /* sp_opt_inout: %empty */
//  if (yyn == 358)
//    /* "sql_yacc.y":3959  */
//                      { yyval= sp_variable::MODE_IN; };
			break;

		case 359: /* sp_opt_inout: IN_SYM */
//  if (yyn == 359)
//    /* "sql_yacc.y":3960  */
//                      { yyval= sp_variable::MODE_IN; };
			break;

		case 360: /* sp_opt_inout: OUT_SYM */
//  if (yyn == 360)
//    /* "sql_yacc.y":3961  */
//                      { yyval= sp_variable::MODE_OUT; };
			break;

		case 361: /* sp_opt_inout: INOUT_SYM */
//  if (yyn == 361)
//    /* "sql_yacc.y":3962  */
//                      { yyval= sp_variable::MODE_INOUT; };
			break;

		case 362: /* sp_proc_stmts: %empty */
//  if (yyn == 362)
//    /* "sql_yacc.y":3966  */
//                 {};
			break;

		case 364: /* sp_proc_stmts1: sp_proc_stmt ';' */
//  if (yyn == 364)
//    /* "sql_yacc.y":3971  */
//                           {};
			break;

		case 366: /* sp_decls: %empty */
//  if (yyn == 366)
//    /* "sql_yacc.y":3977  */
//          {
//            yyval.vars= yyval.conds= yyval.hndlrs= yyval.curs= 0;
//          };
			break;

		case 367: /* sp_decls: sp_decls sp_decl ';' */
//  if (yyn == 367)
//    /* "sql_yacc.y":3981  */
//          {
//            /* We check for declarations out of (standard) order this way
//              because letting the grammar rules reflect it caused tricky
//               shift/reduce conflicts with the wrong result. (And we get
//               better error handling this way.) */
//            if ((((spblock)(yystack.valueAt (1))).vars || ((spblock)(yystack.valueAt (1))).conds) && (((spblock)(yystack.valueAt (2))).curs || ((spblock)(yystack.valueAt (2))).hndlrs))
//            { /* Variable or condition following cursor or handler */
//              my_error(ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0));
//              MYSQL_YYABORT;
//            }
//            if (((spblock)(yystack.valueAt (1))).curs && ((spblock)(yystack.valueAt (2))).hndlrs)
//            { /* Cursor following handler */
//              my_error(ER_SP_CURSOR_AFTER_HANDLER, MYF(0));
//              MYSQL_YYABORT;
//            }
//            yyval.vars= ((spblock)(yystack.valueAt (2))).vars + ((spblock)(yystack.valueAt (1))).vars;
//            yyval.conds= ((spblock)(yystack.valueAt (2))).conds + ((spblock)(yystack.valueAt (1))).conds;
//            yyval.hndlrs= ((spblock)(yystack.valueAt (2))).hndlrs + ((spblock)(yystack.valueAt (1))).hndlrs;
//            yyval.curs= ((spblock)(yystack.valueAt (2))).curs + ((spblock)(yystack.valueAt (1))).curs;
//          };
			break;

		case 368: /* sp_decl: DECLARE_SYM sp_decl_idents type opt_collate sp_opt_default */
//  if (yyn == 368)
//    /* "sql_yacc.y":4009  */
//          {                     /*$6*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp->reset_lex(thd);
//            lex= thd->lex;
//
//            pctx->declare_var_boundary(((num)(yystack.valueAt (3))));
//
//            CONTEXTUALIZE(((type)(yystack.valueAt (2))));
//            enum enum_field_types var_type= ((type)(yystack.valueAt (2)))->type;
//            const CHARSET_INFO *cs= ((type)(yystack.valueAt (2)))->get_charset();
//            if (merge_sp_var_charset_and_collation(cs, ((lexer.charset)(yystack.valueAt (1))), &cs))
//              MYSQL_YYABORT;
//
//            uint num_vars= pctx->context_var_count();
//            Item *dflt_value_item= ((sp_default)(yystack.valueAt (0))).expr;
//
//            LEX_CSTRING dflt_value_query= EMPTY_CSTR;
//
//            if (dflt_value_item)
//            {
//              ITEMIZE(dflt_value_item, &dflt_value_item);
//              const char *expr_start_ptr= ((sp_default)(yystack.valueAt (0))).expr_start;
//              if (lex->is_metadata_used())
//              {
//                dflt_value_query= make_string(thd, expr_start_ptr,
//                                              yystack.locationAt (0).raw.end);
//                if (!dflt_value_query.str)
//                  MYSQL_YYABORT;
//              }
//            }
//            else
//            {
//              dflt_value_item= NEW_PTN Item_null();
//
//              if (dflt_value_item == nullptr)
//                MYSQL_YYABORT;
//            }
//
//            // We can have several variables in DECLARE statement.
//            // We need to create an sp_instr_set instruction for each variable.
//
//            for (uint i = num_vars-((num)(yystack.valueAt (3))) ; i < num_vars ; i++)
//            {
//              uint var_idx= pctx->var_context2runtime(i);
//              sp_variable *spvar= pctx->find_variable(var_idx);
//
//              if (!spvar)
//                MYSQL_YYABORT;
//
//              spvar->type= var_type;
//              spvar->default_value= dflt_value_item;
//
//              if (spvar->field_def.init(thd, "", var_type,
//                                        ((type)(yystack.valueAt (2)))->get_length(), ((type)(yystack.valueAt (2)))->get_dec(),
//                                        ((type)(yystack.valueAt (2)))->get_type_flags(),
//                                        nullptr, nullptr, &NULL_CSTR, nullptr,
//                                        ((type)(yystack.valueAt (2)))->get_interval_list(),
//                                        cs ? cs : thd->variables.collation_database,
//                                        ((lexer.charset)(yystack.valueAt (1))) != nullptr, ((type)(yystack.valueAt (2)))->get_uint_geom_type(),
//                                        nullptr, nullptr, {},
//                                        dd::Column::enum_hidden_type::HT_VISIBLE))
//              {
//                MYSQL_YYABORT;
//              }
//
//              if (prepare_sp_create_field(thd, &spvar->field_def))
//                MYSQL_YYABORT;
//
//              spvar->field_def.field_name= spvar->name.str;
//              spvar->field_def.is_nullable= true;
//
//              /* The last instruction is responsible for freeing LEX. */
//
//              sp_instr_set *is= NEW_PTN sp_instr_set(sp->instructions(),
//                                                     lex,
//                                                     var_idx,
//                                                     dflt_value_item,
//                                                     dflt_value_query,
//                                                     (i == num_vars - 1));
//
//              if (!is || sp->add_instr(thd, is))
//                MYSQL_YYABORT;
//            }
//
//            pctx->declare_var_boundary(0);
//            if (sp->restore_lex(thd))
//              MYSQL_YYABORT;
//            yyval.vars= ((num)(yystack.valueAt (3)));
//            yyval.conds= yyval.hndlrs= yyval.curs= 0;
//          };
			break;

		case 369: /* sp_decl: DECLARE_SYM ident CONDITION_SYM FOR_SYM sp_cond */
//  if (yyn == 369)
//    /* "sql_yacc.y":4104  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (pctx->find_condition(((lexer.lex_str)(yystack.valueAt (3))), true))
//            {
//              my_error(ER_SP_DUP_COND, MYF(0), ((lexer.lex_str)(yystack.valueAt (3))).str);
//              MYSQL_YYABORT;
//            }
//            if(pctx->add_condition(thd, ((lexer.lex_str)(yystack.valueAt (3))), ((spcondvalue)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            lex->keep_diagnostics= DA_KEEP_DIAGNOSTICS; // DECLARE COND FOR
//            yyval.vars= yyval.hndlrs= yyval.curs= 0;
//            yyval.conds= 1;
//          };
			break;

		case 370: /* $@10: %empty */
//  if (yyn == 370)
//    /* "sql_yacc.y":4121  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_pcontext *handler_pctx=
//              parent_pctx->push_context(thd, sp_pcontext::HANDLER_SCOPE);
//
//            sp_handler *h=
//              parent_pctx->add_handler(thd, (sp_handler::enum_type) ((num)(yystack.valueAt (2))));
//
//            lex->set_sp_current_parsing_ctx(handler_pctx);
//
//            sp_instr_hpush_jump *i=
//              NEW_PTN sp_instr_hpush_jump(sp->instructions(), handler_pctx, h);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//
//            if (((num)(yystack.valueAt (2))) == sp_handler::CONTINUE)
//            {
//              // Mark the end of CONTINUE handler scope.
//
//              if (sp->m_parser_data.add_backpatch_entry(
//                    i, handler_pctx->last_label()))
//              {
//                MYSQL_YYABORT;
//              }
//            }
//
//            if (sp->m_parser_data.add_backpatch_entry(
//                  i, handler_pctx->push_label(thd, EMPTY_CSTR, 0)))
//            {
//              MYSQL_YYABORT;
//            }
//
//            lex->keep_diagnostics= DA_KEEP_DIAGNOSTICS; // DECL HANDLER FOR
//          };
			break;

		case 371: /* sp_decl: DECLARE_SYM sp_handler_type HANDLER_SYM FOR_SYM $@10 sp_hcond_list sp_proc_stmt */
//  if (yyn == 371)
//    /* "sql_yacc.y":4162  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *hlab= pctx->pop_label(); /* After this hdlr */
//
//            if (((num)(yystack.valueAt (5))) == sp_handler::CONTINUE)
//            {
//              sp_instr_hreturn *i=
//                NEW_PTN sp_instr_hreturn(sp->instructions(), pctx);
//
//              if (!i || sp->add_instr(thd, i))
//                MYSQL_YYABORT;
//            }
//            else
//            {  /* EXIT or UNDO handler, just jump to the end of the block */
//              sp_instr_hreturn *i=
//                NEW_PTN sp_instr_hreturn(sp->instructions(), pctx);
//
//              if (i == nullptr ||
//                  sp->add_instr(thd, i) ||
//                  sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()))
//                MYSQL_YYABORT;
//            }
//
//            sp->m_parser_data.do_backpatch(hlab, sp->instructions());
//
//            lex->set_sp_current_parsing_ctx(pctx->pop_context());
//
//            yyval.vars= yyval.conds= yyval.curs= 0;
//            yyval.hndlrs= 1;
//          };
			break;

		case 372: /* $@11: %empty */
//  if (yyn == 372)
//    /* "sql_yacc.y":4199  */
//          {             /*$5*/
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//            sp->m_parser_data.set_current_stmt_start_ptr(yystack.locationAt (0).raw.end);
//          };
			break;

		case 373: /* sp_decl: DECLARE_SYM ident CURSOR_SYM FOR_SYM $@11 select_stmt */
//  if (yyn == 373)
//    /* "sql_yacc.y":4208  */
//          {             /*$7*/
//            MAKE_CMD(((top_level_node)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *cursor_lex= Lex;
//            sp_head *sp= cursor_lex->sphead;
//
//            assert(cursor_lex->sql_command == SQLCOM_SELECT);
//
//            if (cursor_lex->result)
//            {
//              my_error(ER_SP_BAD_CURSOR_SELECT, MYF(0));
//              MYSQL_YYABORT;
//            }
//
//            cursor_lex->m_sql_cmd->set_as_part_of_sp();
//            cursor_lex->sp_lex_in_use= true;
//
//            if (sp->restore_lex(thd))
//              MYSQL_YYABORT;
//
//            LEX *lex= Lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            uint offp;
//
//            if (pctx->find_cursor(((lexer.lex_str)(yystack.valueAt (4))), &offp, true))
//            {
//              my_error(ER_SP_DUP_CURS, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//              delete cursor_lex;
//              MYSQL_YYABORT;
//            }
//
//            LEX_CSTRING cursor_query= EMPTY_CSTR;
//
//            if (cursor_lex->is_metadata_used())
//            {
//              cursor_query=
//                make_string(thd,
//                            sp->m_parser_data.get_current_stmt_start_ptr(),
//                            yystack.locationAt (0).raw.end);
//
//              if (!cursor_query.str)
//                MYSQL_YYABORT;
//            }
//
//            sp_instr_cpush *i=
//              NEW_PTN sp_instr_cpush(sp->instructions(), pctx,
//                                     cursor_lex, cursor_query,
//                                     pctx->current_cursor_count());
//
//            if (i == nullptr ||
//                sp->add_instr(thd, i) ||
//                pctx->add_cursor(((lexer.lex_str)(yystack.valueAt (4)))))
//            {
//              MYSQL_YYABORT;
//            }
//
//            yyval.vars= yyval.conds= yyval.hndlrs= 0;
//            yyval.curs= 1;
//          };
			break;

		case 374: /* sp_handler_type: EXIT_SYM */
//  if (yyn == 374)
//    /* "sql_yacc.y":4272  */
//                        { yyval= sp_handler::EXIT; };
			break;

		case 375: /* sp_handler_type: CONTINUE_SYM */
//  if (yyn == 375)
//    /* "sql_yacc.y":4273  */
//                        { yyval= sp_handler::CONTINUE; };
			break;

		case 376: /* sp_hcond_list: sp_hcond_element */
//  if (yyn == 376)
//    /* "sql_yacc.y":4279  */
//          { yyval= 1; };
			break;

		case 377: /* sp_hcond_list: sp_hcond_list ',' sp_hcond_element */
//  if (yyn == 377)
//    /* "sql_yacc.y":4281  */
//          { yyval+= 1; };
			break;

		case 378: /* sp_hcond_element: sp_hcond */
//  if (yyn == 378)
//    /* "sql_yacc.y":4286  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_pcontext *parent_pctx= pctx->parent_context();
//
//            if (parent_pctx->check_duplicate_handler(((spcondvalue)(yystack.valueAt (0)))))
//            {
//              my_error(ER_SP_DUP_HANDLER, MYF(0));
//              MYSQL_YYABORT;
//            }
//            else
//            {
//              sp_instr_hpush_jump *i=
//                (sp_instr_hpush_jump *)sp->last_instruction();
//
//              i->add_condition(((spcondvalue)(yystack.valueAt (0))));
//            }
//          };
			break;

		case 379: /* sp_cond: ulong_num */
//  if (yyn == 379)
//    /* "sql_yacc.y":4309  */
//          { /* mysql errno */
//            if (((ulong_num)(yystack.valueAt (0))) == 0)
//            {
//              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
//              MYSQL_YYABORT;
//            }
//            yyval= NEW_PTN sp_condition_value(((ulong_num)(yystack.valueAt (0))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 381: /* sqlstate: SQLSTATE_SYM opt_value TEXT_STRING_literal */
//  if (yyn == 381)
//    /* "sql_yacc.y":4324  */
//          { /* SQLSTATE */
//
//            /*
//              An error is triggered:
//                - if the specified string is not a valid SQLSTATE,
//                - or if it represents the completion condition -- it is not
//                  allowed to SIGNAL, or declare a handler for the completion
//                  condition.
//            */
//            if (!is_sqlstate_valid(&((lexer.lex_str)(yystack.valueAt (0)))) || is_sqlstate_completion(((lexer.lex_str)(yystack.valueAt (0))).str))
//            {
//              my_error(ER_SP_BAD_SQLSTATE, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//            yyval= NEW_PTN sp_condition_value(((lexer.lex_str)(yystack.valueAt (0))).str);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 382: /* opt_value: %empty */
//  if (yyn == 382)
//    /* "sql_yacc.y":4345  */
//                 {};
			break;

		case 383: /* opt_value: VALUE_SYM */
//  if (yyn == 383)
//    /* "sql_yacc.y":4346  */
//                       {};
			break;

		case 384: /* sp_hcond: sp_cond */
//  if (yyn == 384)
//    /* "sql_yacc.y":4351  */
//          {
//            yyval= ((spcondvalue)(yystack.valueAt (0)));
//          };
			break;

		case 385: /* sp_hcond: ident */
//  if (yyn == 385)
//    /* "sql_yacc.y":4355  */
//          {
//            LEX *lex= Lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            yyval= pctx->find_condition(((lexer.lex_str)(yystack.valueAt (0))), false);
//
//            if (yyval == nullptr)
//            {
//              my_error(ER_SP_COND_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 386: /* sp_hcond: SQLWARNING_SYM */
//  if (yyn == 386)
//    /* "sql_yacc.y":4368  */
//          {
//            yyval= NEW_PTN sp_condition_value(sp_condition_value::WARNING);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 387: /* sp_hcond: not FOUND_SYM */
//  if (yyn == 387)
//    /* "sql_yacc.y":4374  */
//          {
//            yyval= NEW_PTN sp_condition_value(sp_condition_value::NOT_FOUND);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 388: /* sp_hcond: SQLEXCEPTION_SYM */
//  if (yyn == 388)
//    /* "sql_yacc.y":4380  */
//          {
//            yyval= NEW_PTN sp_condition_value(sp_condition_value::EXCEPTION);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 389: /* signal_stmt: SIGNAL_SYM signal_value opt_set_signal_information */
			if (yyn == 389)
			/* "sql_yacc.y":4389 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//
//            lex->sql_command= SQLCOM_SIGNAL;
//            lex->m_sql_cmd= NEW_PTN Sql_cmd_signal(((spcondvalue)(yystack.valueAt (1))), ((signal_item_list)(yystack.valueAt (0))));
//            if (lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SIGNAL;
			}
			;
			break;

		case 390: /* signal_value: ident */
//  if (yyn == 390)
//    /* "sql_yacc.y":4402  */
//          {
//            LEX *lex= Lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (!pctx)
//            {
//              /* SIGNAL foo cannot be used outside of stored programs */
//              my_error(ER_SP_COND_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            sp_condition_value *cond= pctx->find_condition(((lexer.lex_str)(yystack.valueAt (0))), false);
//
//            if (!cond)
//            {
//              my_error(ER_SP_COND_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//            if (cond->type != sp_condition_value::SQLSTATE)
//            {
//              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
//              MYSQL_YYABORT;
//            }
//            yyval= cond;
//          };
			break;

		case 391: /* signal_value: sqlstate */
//  if (yyn == 391)
//    /* "sql_yacc.y":4428  */
//          { yyval= ((spcondvalue)(yystack.valueAt (0))); };
			break;

		case 392: /* opt_signal_value: %empty */
//  if (yyn == 392)
//    /* "sql_yacc.y":4432  */
//                 { yyval= nullptr; };
			break;

		case 393: /* opt_signal_value: signal_value */
//  if (yyn == 393)
//    /* "sql_yacc.y":4434  */
//          { yyval= ((spcondvalue)(yystack.valueAt (0))); };
			break;

		case 394: /* opt_set_signal_information: %empty */
//  if (yyn == 394)
//    /* "sql_yacc.y":4438  */
//                 { yyval= NEW_PTN Set_signal_information(); };
			break;

		case 395: /* opt_set_signal_information: SET_SYM signal_information_item_list */
//  if (yyn == 395)
//    /* "sql_yacc.y":4440  */
//          { yyval= ((signal_item_list)(yystack.valueAt (0))); };
			break;

		case 396: /* signal_information_item_list: signal_condition_information_item_name EQ signal_allowed_expr */
//  if (yyn == 396)
//    /* "sql_yacc.y":4445  */
//          {
//            yyval= NEW_PTN Set_signal_information();
//            if (yyval->set_item(((da_condition_item_name)(yystack.valueAt (2))), ((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 397: /* signal_information_item_list: signal_information_item_list ',' signal_condition_information_item_name EQ signal_allowed_expr */
//  if (yyn == 397)
//    /* "sql_yacc.y":4452  */
//          {
//            yyval= ((signal_item_list)(yystack.valueAt (4)));
//            if (yyval->set_item(((da_condition_item_name)(yystack.valueAt (2))), ((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 398: /* signal_allowed_expr: literal_or_null */
//  if (yyn == 398)
//    /* "sql_yacc.y":4464  */
//          { ITEMIZE(((item)(yystack.valueAt (0))), &yyval); };
			break;

		case 399: /* signal_allowed_expr: rvalue_system_or_user_variable */
//  if (yyn == 399)
//    /* "sql_yacc.y":4466  */
//          { ITEMIZE(((item)(yystack.valueAt (0))), &yyval); };
			break;

		case 400: /* signal_allowed_expr: simple_ident */
//  if (yyn == 400)
//    /* "sql_yacc.y":4468  */
//          { ITEMIZE(((item)(yystack.valueAt (0))), &yyval); };
			break;

		case 401: /* signal_condition_information_item_name: CLASS_ORIGIN_SYM */
//  if (yyn == 401)
//    /* "sql_yacc.y":4474  */
//          { yyval= CIN_CLASS_ORIGIN; };
			break;

		case 402: /* signal_condition_information_item_name: SUBCLASS_ORIGIN_SYM */
//  if (yyn == 402)
//    /* "sql_yacc.y":4476  */
//          { yyval= CIN_SUBCLASS_ORIGIN; };
			break;

		case 403: /* signal_condition_information_item_name: CONSTRAINT_CATALOG_SYM */
//  if (yyn == 403)
//    /* "sql_yacc.y":4478  */
//          { yyval= CIN_CONSTRAINT_CATALOG; };
			break;

		case 404: /* signal_condition_information_item_name: CONSTRAINT_SCHEMA_SYM */
//  if (yyn == 404)
//    /* "sql_yacc.y":4480  */
//          { yyval= CIN_CONSTRAINT_SCHEMA; };
			break;

		case 405: /* signal_condition_information_item_name: CONSTRAINT_NAME_SYM */
//  if (yyn == 405)
//    /* "sql_yacc.y":4482  */
//          { yyval= CIN_CONSTRAINT_NAME; };
			break;

		case 406: /* signal_condition_information_item_name: CATALOG_NAME_SYM */
//  if (yyn == 406)
//    /* "sql_yacc.y":4484  */
//          { yyval= CIN_CATALOG_NAME; };
			break;

		case 407: /* signal_condition_information_item_name: SCHEMA_NAME_SYM */
//  if (yyn == 407)
//    /* "sql_yacc.y":4486  */
//          { yyval= CIN_SCHEMA_NAME; };
			break;

		case 408: /* signal_condition_information_item_name: TABLE_NAME_SYM */
//  if (yyn == 408)
//    /* "sql_yacc.y":4488  */
//          { yyval= CIN_TABLE_NAME; };
			break;

		case 409: /* signal_condition_information_item_name: COLUMN_NAME_SYM */
//  if (yyn == 409)
//    /* "sql_yacc.y":4490  */
//          { yyval= CIN_COLUMN_NAME; };
			break;

		case 410: /* signal_condition_information_item_name: CURSOR_NAME_SYM */
//  if (yyn == 410)
//    /* "sql_yacc.y":4492  */
//          { yyval= CIN_CURSOR_NAME; };
			break;

		case 411: /* signal_condition_information_item_name: MESSAGE_TEXT_SYM */
//  if (yyn == 411)
//    /* "sql_yacc.y":4494  */
//          { yyval= CIN_MESSAGE_TEXT; };
			break;

		case 412: /* signal_condition_information_item_name: MYSQL_ERRNO_SYM */
//  if (yyn == 412)
//    /* "sql_yacc.y":4496  */
//          { yyval= CIN_MYSQL_ERRNO; };
			break;

		case 413: /* resignal_stmt: RESIGNAL_SYM opt_signal_value opt_set_signal_information */
			if (yyn == 413)
			/* "sql_yacc.y":4501 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//
//            lex->sql_command= SQLCOM_RESIGNAL;
//            lex->keep_diagnostics= DA_KEEP_DIAGNOSTICS; // RESIGNAL doesn't clear diagnostics
//            lex->m_sql_cmd= NEW_PTN Sql_cmd_resignal(((spcondvalue)(yystack.valueAt (1))), ((signal_item_list)(yystack.valueAt (0))));
//            if (lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RESIGNAL;
			}
			;
			break;

		case 414: /* get_diagnostics: GET_SYM which_area DIAGNOSTICS_SYM diagnostics_information */
			if (yyn == 414)
			/* "sql_yacc.y":4515 */
			{
//            Diagnostics_information *info= ((diag_info)(yystack.valueAt (0)));
//
//            info->set_which_da(((diag_area)(yystack.valueAt (2))));
//
//            Lex->keep_diagnostics= DA_KEEP_DIAGNOSTICS; // GET DIAGS doesn't clear them.
//            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_get_diagnostics(info);
//
//            if (Lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_GET_DIAGNOSTICS;
			}
			;
			break;

		case 415: /* which_area: %empty */
//  if (yyn == 415)
//    /* "sql_yacc.y":4531  */
//                  { yyval= Diagnostics_information::CURRENT_AREA; };
			break;

		case 416: /* which_area: CURRENT_SYM */
//  if (yyn == 416)
//    /* "sql_yacc.y":4533  */
//          { yyval= Diagnostics_information::CURRENT_AREA; };
			break;

		case 417: /* which_area: STACKED_SYM */
//  if (yyn == 417)
//    /* "sql_yacc.y":4535  */
//          { yyval= Diagnostics_information::STACKED_AREA; };
			break;

		case 418: /* diagnostics_information: statement_information */
//  if (yyn == 418)
//    /* "sql_yacc.y":4540  */
//          {
//            yyval= NEW_PTN Statement_information(((stmt_info_list)(yystack.valueAt (0))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 419: /* diagnostics_information: CONDITION_SYM condition_number condition_information */
//  if (yyn == 419)
//    /* "sql_yacc.y":4546  */
//          {
//            yyval= NEW_PTN Condition_information(((item)(yystack.valueAt (1))), ((cond_info_list)(yystack.valueAt (0))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 420: /* statement_information: statement_information_item */
//  if (yyn == 420)
//    /* "sql_yacc.y":4555  */
//          {
//            yyval= NEW_PTN List<Statement_information_item>;
//            if (yyval == nullptr || yyval->push_back(((stmt_info_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 421: /* statement_information: statement_information ',' statement_information_item */
//  if (yyn == 421)
//    /* "sql_yacc.y":4561  */
//          {
//            if (((stmt_info_list)(yystack.valueAt (2)))->push_back(((stmt_info_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((stmt_info_list)(yystack.valueAt (2)));
//          };
			break;

		case 422: /* statement_information_item: simple_target_specification EQ statement_information_item_name */
//  if (yyn == 422)
//    /* "sql_yacc.y":4570  */
//          {
//            yyval= NEW_PTN Statement_information_item(((stmt_info_item_name)(yystack.valueAt (0))), ((item)(yystack.valueAt (2))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 423: /* simple_target_specification: ident */
//  if (yyn == 423)
//    /* "sql_yacc.y":4578  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            /*
//              NOTE: lex->sphead is nullptr if we're parsing something like
//              'GET DIAGNOSTICS v' outside a stored program. We should throw
//              ER_SP_UNDECLARED_VAR in such cases.
//            */
//
//            if (!sp)
//            {
//              my_error(ER_SP_UNDECLARED_VAR, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            yyval=
//              create_item_for_sp_var(
//                thd, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))), nullptr,
//                sp->m_parser_data.get_current_stmt_start_ptr(),
//                yystack.locationAt (0).raw.start,
//                yystack.locationAt (0).raw.end);
//
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 424: /* simple_target_specification: '@' ident_or_text */
//  if (yyn == 424)
//    /* "sql_yacc.y":4606  */
//          {
//            yyval= NEW_PTN Item_func_get_user_var((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//            ITEMIZE(yyval, &yyval);
//          };
			break;

		case 425: /* statement_information_item_name: NUMBER_SYM */
//  if (yyn == 425)
//    /* "sql_yacc.y":4614  */
//          { yyval= Statement_information_item::NUMBER; };
			break;

		case 426: /* statement_information_item_name: ROW_COUNT_SYM */
//  if (yyn == 426)
//    /* "sql_yacc.y":4616  */
//          { yyval= Statement_information_item::ROW_COUNT; };
			break;

		case 427: /* condition_number: signal_allowed_expr */
//  if (yyn == 427)
//    /* "sql_yacc.y":4625  */
//          { yyval= ((item)(yystack.valueAt (0))); };
			break;

		case 428: /* condition_information: condition_information_item */
//  if (yyn == 428)
//    /* "sql_yacc.y":4630  */
//          {
//            yyval= NEW_PTN List<Condition_information_item>;
//            if (yyval == nullptr || yyval->push_back(((cond_info_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 429: /* condition_information: condition_information ',' condition_information_item */
//  if (yyn == 429)
//    /* "sql_yacc.y":4636  */
//          {
//            if (((cond_info_list)(yystack.valueAt (2)))->push_back(((cond_info_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((cond_info_list)(yystack.valueAt (2)));
//          };
			break;

		case 430: /* condition_information_item: simple_target_specification EQ condition_information_item_name */
//  if (yyn == 430)
//    /* "sql_yacc.y":4645  */
//          {
//            yyval= NEW_PTN Condition_information_item(((cond_info_item_name)(yystack.valueAt (0))), ((item)(yystack.valueAt (2))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 431: /* condition_information_item_name: CLASS_ORIGIN_SYM */
//  if (yyn == 431)
//    /* "sql_yacc.y":4653  */
//          { yyval= Condition_information_item::CLASS_ORIGIN; };
			break;

		case 432: /* condition_information_item_name: SUBCLASS_ORIGIN_SYM */
//  if (yyn == 432)
//    /* "sql_yacc.y":4655  */
//          { yyval= Condition_information_item::SUBCLASS_ORIGIN; };
			break;

		case 433: /* condition_information_item_name: CONSTRAINT_CATALOG_SYM */
//  if (yyn == 433)
//    /* "sql_yacc.y":4657  */
//          { yyval= Condition_information_item::CONSTRAINT_CATALOG; };
			break;

		case 434: /* condition_information_item_name: CONSTRAINT_SCHEMA_SYM */
//  if (yyn == 434)
//    /* "sql_yacc.y":4659  */
//          { yyval= Condition_information_item::CONSTRAINT_SCHEMA; };
			break;

		case 435: /* condition_information_item_name: CONSTRAINT_NAME_SYM */
//  if (yyn == 435)
//    /* "sql_yacc.y":4661  */
//          { yyval= Condition_information_item::CONSTRAINT_NAME; };
			break;

		case 436: /* condition_information_item_name: CATALOG_NAME_SYM */
//  if (yyn == 436)
//    /* "sql_yacc.y":4663  */
//          { yyval= Condition_information_item::CATALOG_NAME; };
			break;

		case 437: /* condition_information_item_name: SCHEMA_NAME_SYM */
//  if (yyn == 437)
//    /* "sql_yacc.y":4665  */
//          { yyval= Condition_information_item::SCHEMA_NAME; };
			break;

		case 438: /* condition_information_item_name: TABLE_NAME_SYM */
//  if (yyn == 438)
//    /* "sql_yacc.y":4667  */
//          { yyval= Condition_information_item::TABLE_NAME; };
			break;

		case 439: /* condition_information_item_name: COLUMN_NAME_SYM */
//  if (yyn == 439)
//    /* "sql_yacc.y":4669  */
//          { yyval= Condition_information_item::COLUMN_NAME; };
			break;

		case 440: /* condition_information_item_name: CURSOR_NAME_SYM */
//  if (yyn == 440)
//    /* "sql_yacc.y":4671  */
//          { yyval= Condition_information_item::CURSOR_NAME; };
			break;

		case 441: /* condition_information_item_name: MESSAGE_TEXT_SYM */
//  if (yyn == 441)
//    /* "sql_yacc.y":4673  */
//          { yyval= Condition_information_item::MESSAGE_TEXT; };
			break;

		case 442: /* condition_information_item_name: MYSQL_ERRNO_SYM */
//  if (yyn == 442)
//    /* "sql_yacc.y":4675  */
//          { yyval= Condition_information_item::MYSQL_ERRNO; };
			break;

		case 443: /* condition_information_item_name: RETURNED_SQLSTATE_SYM */
//  if (yyn == 443)
//    /* "sql_yacc.y":4677  */
//          { yyval= Condition_information_item::RETURNED_SQLSTATE; };
			break;

		case 444: /* sp_decl_idents: ident */
//  if (yyn == 444)
//    /* "sql_yacc.y":4682  */
//          {
//            /* NOTE: field definition is filled in sp_decl section. */
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (pctx->find_variable(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, true))
//            {
//              my_error(ER_SP_DUP_VAR, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            pctx->add_variable(thd,
//                               ((lexer.lex_str)(yystack.valueAt (0))),
//                               MYSQL_TYPE_DECIMAL,
//                               sp_variable::MODE_IN);
//            yyval= 1;
//          };
			break;

		case 445: /* sp_decl_idents: sp_decl_idents ',' ident */
//  if (yyn == 445)
//    /* "sql_yacc.y":4702  */
//          {
//            /* NOTE: field definition is filled in sp_decl section. */
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            if (pctx->find_variable(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, true))
//            {
//              my_error(ER_SP_DUP_VAR, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            pctx->add_variable(thd,
//                               ((lexer.lex_str)(yystack.valueAt (0))),
//                               MYSQL_TYPE_DECIMAL,
//                               sp_variable::MODE_IN);
//            yyval= ((num)(yystack.valueAt (2))) + 1;
//          };
			break;

		case 446: /* sp_opt_default: %empty */
//  if (yyn == 446)
//    /* "sql_yacc.y":4725  */
//          {
//            yyval.expr_start= nullptr;
//            yyval.expr = nullptr;
//          };
			break;

		case 447: /* sp_opt_default: DEFAULT_SYM expr */
//  if (yyn == 447)
//    /* "sql_yacc.y":4730  */
//          {
//            yyval.expr_start= yystack.locationAt (1).raw.end;
//            yyval.expr= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 461: /* $@12: %empty */
//  if (yyn == 461)
//    /* "sql_yacc.y":4754  */
//          { Lex->sphead->m_parser_data.new_cont_backpatch(); };
			break;

		case 462: /* sp_proc_stmt_if: IF $@12 sp_if END IF */
//  if (yyn == 462)
//    /* "sql_yacc.y":4756  */
//          {
//            sp_head *sp= Lex->sphead;
//
//            sp->m_parser_data.do_cont_backpatch(sp->instructions());
//          };
			break;

		case 463: /* $@13: %empty */
//  if (yyn == 463)
//    /* "sql_yacc.y":4764  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//            sp->m_parser_data.set_current_stmt_start_ptr(yylloc.raw.start);
//          };
			break;

		case 464: /* sp_proc_stmt_statement: $@13 simple_statement */
//  if (yyn == 464)
//    /* "sql_yacc.y":4773  */
//          {
//            if (((top_level_node)(yystack.valueAt (0))) != nullptr)
//              MAKE_CMD(((top_level_node)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->m_flags|= sp_get_flags_for_command(lex);
//
//            // Mark statement as belonging to a stored procedure:
//            if (lex->m_sql_cmd != nullptr)
//              lex->m_sql_cmd->set_as_part_of_sp();
//
//            /*
//              Don't add an instruction for SET statements, since all
//              instructions for them were already added during processing
//              of "set" rule.
//            */
//            assert((lex->sql_command != SQLCOM_SET_OPTION &&
//                         lex->sql_command != SQLCOM_SET_PASSWORD) ||
//                        lex->var_list.is_empty());
//            if (lex->sql_command != SQLCOM_SET_OPTION &&
//                lex->sql_command != SQLCOM_SET_PASSWORD)
//            {
//              /* Extract the query statement from the tokenizer. */
//
//              LEX_CSTRING query=
//                make_string(thd,
//                            sp->m_parser_data.get_current_stmt_start_ptr(),
//                            yystack.locationAt (0).raw.end);
//
//              if (!query.str)
//                MYSQL_YYABORT;
//
//              /* Add instruction. */
//
//              sp_instr_stmt *i=
//                NEW_PTN sp_instr_stmt(sp->instructions(), lex, query);
//
//              if (!i || sp->add_instr(thd, i))
//                MYSQL_YYABORT;
//            }
//
//            if (sp->restore_lex(thd))
//              MYSQL_YYABORT;
//          };
			break;

		case 465: /* $@14: %empty */
//  if (yyn == 465)
//    /* "sql_yacc.y":4824  */
//          {             /*$2*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 466: /* sp_proc_stmt_return: RETURN_SYM $@14 expr */
//  if (yyn == 466)
//    /* "sql_yacc.y":4832  */
//          {             /*$4*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            /* Extract expression string. */
//
//            LEX_CSTRING expr_query= EMPTY_CSTR;
//
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Check that this is a stored function. */
//
//            if (sp->m_type != enum_sp_type::FUNCTION)
//            {
//              my_error(ER_SP_BADRETURN, MYF(0));
//              MYSQL_YYABORT;
//            }
//
//            /* Indicate that we've reached RETURN statement. */
//
//            sp->m_flags|= sp_head::HAS_RETURN;
//
//            /* Add instruction. */
//
//            sp_instr_freturn *i=
//              NEW_PTN sp_instr_freturn(sp->instructions(), lex, ((item)(yystack.valueAt (0))), expr_query,
//                                       sp->m_return_field_def.sql_type);
//
//            if (i == nullptr ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 467: /* $@15: %empty */
//  if (yyn == 467)
//    /* "sql_yacc.y":4880  */
//          { /* Unlabeled controls get a secret label. */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            pctx->push_label(thd,
//                             EMPTY_CSTR,
//                             sp->instructions());
//          };
			break;

		case 468: /* sp_proc_stmt_unlabeled: $@15 sp_unlabeled_control */
//  if (yyn == 468)
//    /* "sql_yacc.y":4891  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp->m_parser_data.do_backpatch(pctx->pop_label(),
//                                           sp->instructions());
//          };
			break;

		case 469: /* sp_proc_stmt_leave: LEAVE_SYM label_ident */
//  if (yyn == 469)
//    /* "sql_yacc.y":4903  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp = lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->find_label(((lex_cstr)(yystack.valueAt (0))));
//
//            if (! lab)
//            {
//              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", ((lex_cstr)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            uint ip= sp->instructions();
//
//            /*
//              When jumping to a BEGIN-END block end, the target jump
//              points to the block hpop/cpop cleanup instructions,
//              so we should exclude the block context here.
//              When jumping to something else (i.e., sp_label::ITERATION),
//              there are no hpop/cpop at the jump destination,
//              so we should include the block context here for cleanup.
//            */
//            bool exclusive= (lab->type == sp_label::BEGIN);
//
//            size_t n= pctx->diff_handlers(lab->ctx, exclusive);
//
//            if (n)
//            {
//              sp_instr_hpop *hpop= NEW_PTN sp_instr_hpop(ip++, pctx);
//
//              if (!hpop || sp->add_instr(thd, hpop))
//                MYSQL_YYABORT;
//            }
//
//            n= pctx->diff_cursors(lab->ctx, exclusive);
//
//            if (n)
//            {
//              sp_instr_cpop *cpop= NEW_PTN sp_instr_cpop(ip++, pctx, n);
//
//              if (!cpop || sp->add_instr(thd, cpop))
//                MYSQL_YYABORT;
//            }
//
//            sp_instr_jump *i= NEW_PTN sp_instr_jump(ip, pctx);
//
//            if (!i ||
//                /* Jumping forward */
//                sp->m_parser_data.add_backpatch_entry(i, lab) ||
//                sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 470: /* sp_proc_stmt_iterate: ITERATE_SYM label_ident */
//  if (yyn == 470)
//    /* "sql_yacc.y":4960  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->find_label(((lex_cstr)(yystack.valueAt (0))));
//
//            if (! lab || lab->type != sp_label::ITERATION)
//            {
//              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", ((lex_cstr)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            uint ip= sp->instructions();
//
//            /* Inclusive the dest. */
//            size_t n= pctx->diff_handlers(lab->ctx, false);
//
//            if (n)
//            {
//              sp_instr_hpop *hpop= NEW_PTN sp_instr_hpop(ip++, pctx);
//
//              if (!hpop || sp->add_instr(thd, hpop))
//                MYSQL_YYABORT;
//            }
//
//            /* Inclusive the dest. */
//            n= pctx->diff_cursors(lab->ctx, false);
//
//            if (n)
//            {
//              sp_instr_cpop *cpop= NEW_PTN sp_instr_cpop(ip++, pctx, n);
//
//              if (!cpop || sp->add_instr(thd, cpop))
//                MYSQL_YYABORT;
//            }
//
//            /* Jump back */
//            sp_instr_jump *i= NEW_PTN sp_instr_jump(ip, pctx, lab->ip);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 471: /* sp_proc_stmt_open: OPEN_SYM ident */
//  if (yyn == 471)
//    /* "sql_yacc.y":5007  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            uint offset;
//
//            if (! pctx->find_cursor(((lexer.lex_str)(yystack.valueAt (0))), &offset, false))
//            {
//              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            sp_instr_copen *i= NEW_PTN sp_instr_copen(sp->instructions(), pctx,
//                                                      offset);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 472: /* $@16: %empty */
//  if (yyn == 472)
//    /* "sql_yacc.y":5030  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            uint offset;
//
//            if (! pctx->find_cursor(((lexer.lex_str)(yystack.valueAt (1))), &offset, false))
//            {
//              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (1))).str);
//              MYSQL_YYABORT;
//            }
//
//            sp_instr_cfetch *i= NEW_PTN sp_instr_cfetch(sp->instructions(),
//                                                        pctx, offset);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 473: /* sp_proc_stmt_fetch: FETCH_SYM sp_opt_fetch_noise ident INTO $@16 sp_fetch_list */
//  if (yyn == 473)
//    /* "sql_yacc.y":5050  */
//          {};
			break;

		case 474: /* sp_proc_stmt_close: CLOSE_SYM ident */
//  if (yyn == 474)
//    /* "sql_yacc.y":5055  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            uint offset;
//
//            if (! pctx->find_cursor(((lexer.lex_str)(yystack.valueAt (0))), &offset, false))
//            {
//              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            sp_instr_cclose *i=
//              NEW_PTN sp_instr_cclose(sp->instructions(), pctx, offset);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 478: /* sp_fetch_list: ident */
//  if (yyn == 478)
//    /* "sql_yacc.y":5084  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_variable *spv;
//
//            if (!pctx || !(spv= pctx->find_variable(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, false)))
//            {
//              my_error(ER_SP_UNDECLARED_VAR, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            /* An SP local variable */
//            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
//
//            i->add_to_varlist(spv);
//          };
			break;

		case 479: /* sp_fetch_list: sp_fetch_list ',' ident */
//  if (yyn == 479)
//    /* "sql_yacc.y":5102  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_variable *spv;
//
//            if (!pctx || !(spv= pctx->find_variable(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, false)))
//            {
//              my_error(ER_SP_UNDECLARED_VAR, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            /* An SP local variable */
//            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
//
//            i->add_to_varlist(spv);
//          };
			break;

		case 480: /* $@17: %empty */
//  if (yyn == 480)
//    /* "sql_yacc.y":5122  */
//          {                     /*$1*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 481: /* $@18: %empty */
//  if (yyn == 481)
//    /* "sql_yacc.y":5130  */
//          {                     /*$3*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            /* Extract expression string. */
//
//            LEX_CSTRING expr_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            sp_instr_jump_if_not *i =
//              NEW_PTN sp_instr_jump_if_not(sp->instructions(), lex,
//                                           ((item)(yystack.valueAt (0))), expr_query);
//
//            /* Add jump instruction. */
//
//            if (i == nullptr ||
//                sp->m_parser_data.add_backpatch_entry(
//                  i, pctx->push_label(thd, EMPTY_CSTR, 0)) ||
//                sp->m_parser_data.add_cont_backpatch_entry(i) ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 482: /* $@19: %empty */
//  if (yyn == 482)
//    /* "sql_yacc.y":5168  */
//          {                     /*$6*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_instr_jump *i = NEW_PTN sp_instr_jump(sp->instructions(), pctx);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//
//            sp->m_parser_data.do_backpatch(pctx->pop_label(),
//                                           sp->instructions());
//
//            sp->m_parser_data.add_backpatch_entry(
//              i, pctx->push_label(thd, EMPTY_CSTR, 0));
//          };
			break;

		case 483: /* sp_if: $@17 expr $@18 THEN_SYM sp_proc_stmts1 $@19 sp_elseifs */
//  if (yyn == 483)
//    /* "sql_yacc.y":5186  */
//          {                     /*$8*/
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp->m_parser_data.do_backpatch(pctx->pop_label(),
//                                           sp->instructions());
//          };
			break;

		case 489: /* $@20: %empty */
//  if (yyn == 489)
//    /* "sql_yacc.y":5209  */
//          {                             /*$2*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            case_stmt_action_case(thd);
//
//            sp->reset_lex(thd); /* For CASE-expr $3 */
//          };
			break;

		case 490: /* $@21: %empty */
//  if (yyn == 490)
//    /* "sql_yacc.y":5219  */
//          {                             /*$4*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//
//            /* Extract CASE-expression string. */
//
//            LEX_CSTRING case_expr_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              case_expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!case_expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Register new CASE-expression and get its id. */
//
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            int case_expr_id= pctx->push_case_expr_id();
//
//            if (case_expr_id < 0)
//              MYSQL_YYABORT;
//
//            /* Add CASE-set instruction. */
//
//            sp_instr_set_case_expr *i=
//              NEW_PTN sp_instr_set_case_expr(sp->instructions(), lex,
//                                             case_expr_id, ((item)(yystack.valueAt (0))), case_expr_query);
//
//            if (i == nullptr ||
//                sp->m_parser_data.add_cont_backpatch_entry(i) ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 491: /* simple_case_stmt: CASE_SYM $@20 expr $@21 simple_when_clause_list else_clause_opt END CASE_SYM */
//  if (yyn == 491)
//    /* "sql_yacc.y":5264  */
//          {                             /*$9*/
//            case_stmt_action_end_case(Lex, true);
//          };
			break;

		case 492: /* $@22: %empty */
//  if (yyn == 492)
//    /* "sql_yacc.y":5271  */
//          {
//            case_stmt_action_case(YYTHD);
//          };
			break;

		case 493: /* searched_case_stmt: CASE_SYM $@22 searched_when_clause_list else_clause_opt END CASE_SYM */
//  if (yyn == 493)
//    /* "sql_yacc.y":5278  */
//          {
//            case_stmt_action_end_case(Lex, false);
//          };
			break;

		case 498: /* $@23: %empty */
//  if (yyn == 498)
//    /* "sql_yacc.y":5295  */
//          {                             /*$2*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 499: /* $@24: %empty */
//  if (yyn == 499)
//    /* "sql_yacc.y":5303  */
//          {                             /*$4*/
//            /* Simple case: <caseval> = <whenval> */
//
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            /* Extract expression string. */
//
//            LEX_CSTRING when_expr_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              when_expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!when_expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Add CASE-when-jump instruction. */
//
//            sp_instr_jump_case_when *i =
//              NEW_PTN sp_instr_jump_case_when(sp->instructions(), lex,
//                                              pctx->get_current_case_expr_id(),
//                                              ((item)(yystack.valueAt (0))), when_expr_query);
//
//            if (i == nullptr ||
//                i->on_after_expr_parsing(thd) ||
//                sp->m_parser_data.add_backpatch_entry(
//                  i, pctx->push_label(thd, EMPTY_CSTR, 0)) ||
//                sp->m_parser_data.add_cont_backpatch_entry(i) ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 500: /* simple_when_clause: WHEN_SYM $@23 expr $@24 THEN_SYM sp_proc_stmts1 */
//  if (yyn == 500)
//    /* "sql_yacc.y":5345  */
//          {                             /*$7*/
//            if (case_stmt_action_then(YYTHD, Lex))
//              MYSQL_YYABORT;
//          };
			break;

		case 501: /* $@25: %empty */
//  if (yyn == 501)
//    /* "sql_yacc.y":5353  */
//          {                             /*$2*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 502: /* $@26: %empty */
//  if (yyn == 502)
//    /* "sql_yacc.y":5361  */
//          {                             /*$4*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            /* Extract expression string. */
//
//            LEX_CSTRING when_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              when_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!when_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Add jump instruction. */
//
//            sp_instr_jump_if_not *i=
//              NEW_PTN sp_instr_jump_if_not(sp->instructions(), lex, ((item)(yystack.valueAt (0))),
//                                           when_query);
//
//            if (i == nullptr ||
//                sp->m_parser_data.add_backpatch_entry(
//                  i, pctx->push_label(thd, EMPTY_CSTR, 0)) ||
//                sp->m_parser_data.add_cont_backpatch_entry(i) ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 503: /* searched_when_clause: WHEN_SYM $@25 expr $@26 THEN_SYM sp_proc_stmts1 */
//  if (yyn == 503)
//    /* "sql_yacc.y":5399  */
//          {                             /*$8*/
//            if (case_stmt_action_then(YYTHD, Lex))
//              MYSQL_YYABORT;
//          };
			break;

		case 504: /* else_clause_opt: %empty */
//  if (yyn == 504)
//    /* "sql_yacc.y":5407  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_instr_error *i=
//              NEW_PTN
//                sp_instr_error(sp->instructions(), pctx, ER_SP_CASE_NOT_FOUND);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 506: /* $@27: %empty */
//  if (yyn == 506)
//    /* "sql_yacc.y":5425  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->find_label(((lex_cstr)(yystack.valueAt (1))));
//
//            if (lab)
//            {
//              my_error(ER_SP_LABEL_REDEFINE, MYF(0), ((lex_cstr)(yystack.valueAt (1))).str);
//              MYSQL_YYABORT;
//            }
//            else
//            {
//              lab= pctx->push_label(YYTHD, ((lex_cstr)(yystack.valueAt (1))), sp->instructions());
//              lab->type= sp_label::ITERATION;
//            }
//          };
			break;

		case 507: /* sp_labeled_control: label_ident ':' $@27 sp_unlabeled_control sp_opt_label */
//  if (yyn == 507)
//    /* "sql_yacc.y":5443  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->pop_label();
//
//            if (((lex_cstr)(yystack.valueAt (0))).str)
//            {
//              if (my_strcasecmp(system_charset_info, ((lex_cstr)(yystack.valueAt (0))).str, lab->name.str) != 0)
//              {
//                my_error(ER_SP_LABEL_MISMATCH, MYF(0), ((lex_cstr)(yystack.valueAt (0))).str);
//                MYSQL_YYABORT;
//              }
//            }
//            sp->m_parser_data.do_backpatch(lab, sp->instructions());
//          };
			break;

		case 508: /* sp_opt_label: %empty */
//  if (yyn == 508)
//    /* "sql_yacc.y":5462  */
//                 { yyval= NULL_CSTR; };
			break;

		case 509: /* sp_opt_label: label_ident */
//  if (yyn == 509)
//    /* "sql_yacc.y":5463  */
//                        { yyval= ((lex_cstr)(yystack.valueAt (0))); };
			break;

		case 510: /* $@28: %empty */
//  if (yyn == 510)
//    /* "sql_yacc.y":5468  */
//          {
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->find_label(((lex_cstr)(yystack.valueAt (1))));
//
//            if (lab)
//            {
//              my_error(ER_SP_LABEL_REDEFINE, MYF(0), ((lex_cstr)(yystack.valueAt (1))).str);
//              MYSQL_YYABORT;
//            }
//
//            lab= pctx->push_label(YYTHD, ((lex_cstr)(yystack.valueAt (1))), sp->instructions());
//            lab->type= sp_label::BEGIN;
//          };
			break;

		case 511: /* sp_labeled_block: label_ident ':' $@28 sp_block_content sp_opt_label */
//  if (yyn == 511)
//    /* "sql_yacc.y":5484  */
//          {
//            LEX *lex= Lex;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            sp_label *lab= pctx->pop_label();
//
//            if (((lex_cstr)(yystack.valueAt (0))).str)
//            {
//              if (my_strcasecmp(system_charset_info, ((lex_cstr)(yystack.valueAt (0))).str, lab->name.str) != 0)
//              {
//                my_error(ER_SP_LABEL_MISMATCH, MYF(0), ((lex_cstr)(yystack.valueAt (0))).str);
//                MYSQL_YYABORT;
//              }
//            }
//          };
			break;

		case 512: /* $@29: %empty */
//  if (yyn == 512)
//    /* "sql_yacc.y":5501  */
//          { /* Unlabeled blocks get a secret label. */
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_label *lab=
//              pctx->push_label(YYTHD, EMPTY_CSTR, sp->instructions());
//
//            lab->type= sp_label::BEGIN;
//          };
			break;

		case 513: /* sp_unlabeled_block: $@29 sp_block_content */
//  if (yyn == 513)
//    /* "sql_yacc.y":5512  */
//          {
//            LEX *lex= Lex;
//            lex->get_sp_current_parsing_ctx()->pop_label();
//          };
			break;

		case 514: /* $@30: %empty */
//  if (yyn == 514)
//    /* "sql_yacc.y":5520  */
//          { /* QQ This is just a dummy for grouping declarations and statements
//              together. No [[NOT] ATOMIC] yet, and we need to figure out how
//              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_pcontext *parent_pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_pcontext *child_pctx=
//              parent_pctx->push_context(thd, sp_pcontext::REGULAR_SCOPE);
//
//            lex->set_sp_current_parsing_ctx(child_pctx);
//          };
			break;

		case 515: /* sp_block_content: BEGIN_SYM $@30 sp_decls sp_proc_stmts END */
//  if (yyn == 515)
//    /* "sql_yacc.y":5535  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            // We always have a label.
//            sp->m_parser_data.do_backpatch(pctx->last_label(),
//                                           sp->instructions());
//
//            if (((spblock)(yystack.valueAt (2))).hndlrs)
//            {
//              sp_instr *i= NEW_PTN sp_instr_hpop(sp->instructions(), pctx);
//
//              if (!i || sp->add_instr(thd, i))
//                MYSQL_YYABORT;
//            }
//
//            if (((spblock)(yystack.valueAt (2))).curs)
//            {
//              sp_instr *i= NEW_PTN sp_instr_cpop(sp->instructions(), pctx,
//                                                 ((spblock)(yystack.valueAt (2))).curs);
//
//              if (!i || sp->add_instr(thd, i))
//                MYSQL_YYABORT;
//            }
//
//            lex->set_sp_current_parsing_ctx(pctx->pop_context());
//          };
			break;

		case 516: /* sp_unlabeled_control: LOOP_SYM sp_proc_stmts1 END LOOP_SYM */
//  if (yyn == 516)
//    /* "sql_yacc.y":5569  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_instr_jump *i= NEW_PTN sp_instr_jump(sp->instructions(), pctx,
//                                                    pctx->last_label()->ip);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//          };
			break;

		case 517: /* $@31: %empty */
//  if (yyn == 517)
//    /* "sql_yacc.y":5582  */
//          {                             /*$2*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 518: /* $@32: %empty */
//  if (yyn == 518)
//    /* "sql_yacc.y":5590  */
//          {                             /*$4*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            /* Extract expression string. */
//
//            LEX_CSTRING expr_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Add jump instruction. */
//
//            sp_instr_jump_if_not *i=
//              NEW_PTN
//                sp_instr_jump_if_not(sp->instructions(), lex, ((item)(yystack.valueAt (0))), expr_query);
//
//            if (i == nullptr ||
//                /* Jumping forward */
//                sp->m_parser_data.add_backpatch_entry(i, pctx->last_label()) ||
//                sp->m_parser_data.new_cont_backpatch() ||
//                sp->m_parser_data.add_cont_backpatch_entry(i) ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 519: /* sp_unlabeled_control: WHILE_SYM $@31 expr $@32 DO_SYM sp_proc_stmts1 END WHILE_SYM */
//  if (yyn == 519)
//    /* "sql_yacc.y":5631  */
//          {                             /*$14*/
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//
//            sp_instr_jump *i= NEW_PTN sp_instr_jump(sp->instructions(), pctx,
//                                                    pctx->last_label()->ip);
//
//            if (!i || sp->add_instr(thd, i))
//              MYSQL_YYABORT;
//
//            sp->m_parser_data.do_cont_backpatch(sp->instructions());
//          };
			break;

		case 520: /* $@33: %empty */
//  if (yyn == 520)
//    /* "sql_yacc.y":5648  */
//          {                             /*$4*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//
//            sp->reset_lex(thd);
//          };
			break;

		case 521: /* $@34: %empty */
//  if (yyn == 521)
//    /* "sql_yacc.y":5656  */
//          {                             /*$6*/
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));
//
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;
//            sp_pcontext *pctx= lex->get_sp_current_parsing_ctx();
//            uint ip= sp->instructions();
//
//            /* Extract expression string. */
//
//            LEX_CSTRING expr_query= EMPTY_CSTR;
//            const char *expr_start_ptr= yystack.locationAt (2).raw.end;
//
//            if (lex->is_metadata_used())
//            {
//              expr_query= make_string(thd, expr_start_ptr, yystack.locationAt (0).raw.end);
//              if (!expr_query.str)
//                MYSQL_YYABORT;
//            }
//
//            /* Add jump instruction. */
//
//            sp_instr_jump_if_not *i=
//              NEW_PTN sp_instr_jump_if_not(ip, lex, ((item)(yystack.valueAt (0))), expr_query,
//                                           pctx->last_label()->ip);
//
//            if (i == nullptr ||
//                sp->add_instr(thd, i) ||
//                sp->restore_lex(thd))
//            {
//              MYSQL_YYABORT;
//            }
//
//            /* We can shortcut the cont_backpatch here */
//            i->set_cont_dest(ip + 1);
//          };
			break;

		case 523: /* trg_action_time: BEFORE_SYM */
//  if (yyn == 523)
//    /* "sql_yacc.y":5699  */
//            { yyval= TRG_ACTION_BEFORE; };
			break;

		case 524: /* trg_action_time: AFTER_SYM */
//  if (yyn == 524)
//    /* "sql_yacc.y":5701  */
//            { yyval= TRG_ACTION_AFTER; };
			break;

		case 525: /* trg_event: INSERT_SYM */
//  if (yyn == 525)
//    /* "sql_yacc.y":5706  */
//            { yyval= TRG_EVENT_INSERT; };
			break;

		case 526: /* trg_event: UPDATE_SYM */
//  if (yyn == 526)
//    /* "sql_yacc.y":5708  */
//            { yyval= TRG_EVENT_UPDATE; };
			break;

		case 527: /* trg_event: DELETE_SYM */
//  if (yyn == 527)
//    /* "sql_yacc.y":5710  */
//            { yyval= TRG_EVENT_DELETE; };
			break;

		case 528: /* opt_ts_datafile_name: %empty */
//  if (yyn == 528)
//    /* "sql_yacc.y":5724  */
//             { yyval= { nullptr, 0}; };
			break;

		case 529: /* opt_ts_datafile_name: ADD ts_datafile */
//  if (yyn == 529)
//    /* "sql_yacc.y":5726  */
//      {
//        yyval = ((lexer.lex_str)(yystack.valueAt (0)));
//      };
			break;

		case 530: /* opt_logfile_group_name: %empty */
//  if (yyn == 530)
//    /* "sql_yacc.y":5732  */
//                 { yyval= { nullptr, 0}; };
			break;

		case 531: /* opt_logfile_group_name: USE_SYM LOGFILE_SYM GROUP_SYM ident */
//  if (yyn == 531)
//    /* "sql_yacc.y":5734  */
//          {
//            yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 532: /* opt_tablespace_options: %empty */
//  if (yyn == 532)
//    /* "sql_yacc.y":5740  */
//                 { yyval= nullptr; };
			break;

		case 534: /* tablespace_option_list: tablespace_option */
//  if (yyn == 534)
//    /* "sql_yacc.y":5746  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 535: /* tablespace_option_list: tablespace_option_list opt_comma tablespace_option */
//  if (yyn == 535)
//    /* "sql_yacc.y":5752  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 547: /* opt_alter_tablespace_options: %empty */
//  if (yyn == 547)
//    /* "sql_yacc.y":5774  */
//                 { yyval= nullptr; };
			break;

		case 549: /* alter_tablespace_option_list: alter_tablespace_option */
//  if (yyn == 549)
//    /* "sql_yacc.y":5780  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 550: /* alter_tablespace_option_list: alter_tablespace_option_list opt_comma alter_tablespace_option */
//  if (yyn == 550)
//    /* "sql_yacc.y":5786  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 558: /* opt_undo_tablespace_options: %empty */
//  if (yyn == 558)
//    /* "sql_yacc.y":5804  */
//                 { yyval= nullptr; };
			break;

		case 560: /* undo_tablespace_option_list: undo_tablespace_option */
//  if (yyn == 560)
//    /* "sql_yacc.y":5810  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 561: /* undo_tablespace_option_list: undo_tablespace_option_list opt_comma undo_tablespace_option */
//  if (yyn == 561)
//    /* "sql_yacc.y":5816  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 563: /* opt_logfile_group_options: %empty */
//  if (yyn == 563)
//    /* "sql_yacc.y":5828  */
//                 { yyval= nullptr; };
			break;

		case 565: /* logfile_group_option_list: logfile_group_option */
//  if (yyn == 565)
//    /* "sql_yacc.y":5834  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 566: /* logfile_group_option_list: logfile_group_option_list opt_comma logfile_group_option */
//  if (yyn == 566)
//    /* "sql_yacc.y":5840  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 574: /* opt_alter_logfile_group_options: %empty */
//  if (yyn == 574)
//    /* "sql_yacc.y":5858  */
//                 { yyval= nullptr; };
			break;

		case 576: /* alter_logfile_group_option_list: alter_logfile_group_option */
//  if (yyn == 576)
//    /* "sql_yacc.y":5864  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 577: /* alter_logfile_group_option_list: alter_logfile_group_option_list opt_comma alter_logfile_group_option */
//  if (yyn == 577)
//    /* "sql_yacc.y":5870  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 581: /* ts_datafile: DATAFILE_SYM TEXT_STRING_sys */
//  if (yyn == 581)
//    /* "sql_yacc.y":5884  */
//                                       { yyval= ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 582: /* undo_tablespace_state: ACTIVE_SYM */
//  if (yyn == 582)
//    /* "sql_yacc.y":5888  */
//                       { yyval= ALTER_UNDO_TABLESPACE_SET_ACTIVE; };
			break;

		case 583: /* undo_tablespace_state: INACTIVE_SYM */
//  if (yyn == 583)
//    /* "sql_yacc.y":5889  */
//                       { yyval= ALTER_UNDO_TABLESPACE_SET_INACTIVE; };
			break;

		case 584: /* lg_undofile: UNDOFILE_SYM TEXT_STRING_sys */
//  if (yyn == 584)
//    /* "sql_yacc.y":5893  */
//                                       { yyval= ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 585: /* ts_option_initial_size: INITIAL_SIZE_SYM opt_equal size_number */
//  if (yyn == 585)
//    /* "sql_yacc.y":5898  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_initial_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 586: /* ts_option_autoextend_size: option_autoextend_size */
//  if (yyn == 586)
//    /* "sql_yacc.y":5905  */
//          {
//            yyval = NEW_PTN PT_alter_tablespace_option_autoextend_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 587: /* option_autoextend_size: AUTOEXTEND_SIZE_SYM opt_equal size_number */
//  if (yyn == 587)
//    /* "sql_yacc.y":5911  */
//                                                    { yyval = ((ulonglong_number)(yystack.valueAt (0))); };
			break;

		case 588: /* ts_option_max_size: MAX_SIZE_SYM opt_equal size_number */
//  if (yyn == 588)
//    /* "sql_yacc.y":5916  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_max_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 589: /* ts_option_extent_size: EXTENT_SIZE_SYM opt_equal size_number */
//  if (yyn == 589)
//    /* "sql_yacc.y":5923  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_extent_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 590: /* ts_option_undo_buffer_size: UNDO_BUFFER_SIZE_SYM opt_equal size_number */
//  if (yyn == 590)
//    /* "sql_yacc.y":5930  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_undo_buffer_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 591: /* ts_option_redo_buffer_size: REDO_BUFFER_SIZE_SYM opt_equal size_number */
//  if (yyn == 591)
//    /* "sql_yacc.y":5937  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_redo_buffer_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 592: /* ts_option_nodegroup: NODEGROUP_SYM opt_equal real_ulong_num */
//  if (yyn == 592)
//    /* "sql_yacc.y":5944  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_nodegroup((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 593: /* ts_option_comment: COMMENT_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 593)
//    /* "sql_yacc.y":5951  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_comment((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 594: /* ts_option_engine: opt_storage ENGINE_SYM opt_equal ident_or_text */
//  if (yyn == 594)
//    /* "sql_yacc.y":5958  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_engine((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 595: /* ts_option_file_block_size: FILE_BLOCK_SIZE_SYM opt_equal size_number */
//  if (yyn == 595)
//    /* "sql_yacc.y":5965  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_file_block_size((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 596: /* ts_option_wait: WAIT_SYM */
//  if (yyn == 596)
//    /* "sql_yacc.y":5972  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_wait_until_completed((yyloc), true);
//          };
			break;

		case 597: /* ts_option_wait: NO_WAIT_SYM */
//  if (yyn == 597)
//    /* "sql_yacc.y":5976  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_wait_until_completed((yyloc), false);
//          };
			break;

		case 598: /* ts_option_encryption: ENCRYPTION_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 598)
//    /* "sql_yacc.y":5983  */
//          {
//            yyval= NEW_PTN PT_alter_tablespace_option_encryption((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 599: /* ts_option_engine_attribute: ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 599)
//    /* "sql_yacc.y":5990  */
//          {
//            yyval = make_tablespace_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 600: /* size_number: real_ulonglong_num */
//  if (yyn == 600)
//    /* "sql_yacc.y":5996  */
//                             { yyval= ((ulonglong_number)(yystack.valueAt (0)));};
			break;

		case 601: /* size_number: IDENT_sys */
//  if (yyn == 601)
//    /* "sql_yacc.y":5998  */
//          {
//            ulonglong number;
//            uint text_shift_number= 0;
//            longlong prefix_number;
//            const char *start_ptr= ((lexer.lex_str)(yystack.valueAt (0))).str;
//            size_t str_len= ((lexer.lex_str)(yystack.valueAt (0))).length;
//            const char *end_ptr= start_ptr + str_len;
//            int error;
//            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
//            if ((start_ptr + str_len - 1) == end_ptr)
//            {
//              switch (end_ptr[0])
//              {
//                case 'g':
//                case 'G':
//                  text_shift_number+=10;
//                  [[fallthrough]];
//                case 'm':
//                case 'M':
//                  text_shift_number+=10;
//                  [[fallthrough]];
//                case 'k':
//                case 'K':
//                  text_shift_number+=10;
//                  break;
//                default:
//                {
//                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
//                  MYSQL_YYABORT;
//                }
//              }
//              if (prefix_number >> 31)
//              {
//                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
//                MYSQL_YYABORT;
//              }
//              number= prefix_number << text_shift_number;
//            }
//            else
//            {
//              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
//              MYSQL_YYABORT;
//            }
//            yyval= number;
//          };
			break;

		case 602: /* opt_create_table_options_etc: create_table_options opt_create_partitioning_etc */
//  if (yyn == 602)
//    /* "sql_yacc.y":6074  */
//          {
//            yyval= ((create_table_tail)(yystack.valueAt (0)));
//            yyval.opt_create_table_options= ((create_table_options)(yystack.valueAt (1)));
//          };
			break;

		case 604: /* opt_create_partitioning_etc: partition_clause opt_duplicate_as_qe */
//  if (yyn == 604)
//    /* "sql_yacc.y":6083  */
//          {
//            yyval= ((create_table_tail)(yystack.valueAt (0)));
//            yyval.opt_partitioning= ((partition_clause)(yystack.valueAt (1)));
//          };
			break;

		case 606: /* opt_duplicate_as_qe: %empty */
//  if (yyn == 606)
//    /* "sql_yacc.y":6092  */
//          {
//            yyval.opt_create_table_options= nullptr;
//            yyval.opt_partitioning= nullptr;
//            yyval.on_duplicate= On_duplicate::ERROR;
//            yyval.opt_query_expression= nullptr;
//          };
			break;

		case 607: /* opt_duplicate_as_qe: duplicate as_create_query_expression */
//  if (yyn == 607)
//    /* "sql_yacc.y":6100  */
//          {
//            yyval.opt_create_table_options= nullptr;
//            yyval.opt_partitioning= nullptr;
//            yyval.on_duplicate= ((on_duplicate)(yystack.valueAt (1)));
//            yyval.opt_query_expression= ((query_expression_body)(yystack.valueAt (0)));
//          };
			break;

		case 608: /* opt_duplicate_as_qe: as_create_query_expression */
//  if (yyn == 608)
//    /* "sql_yacc.y":6107  */
//          {
//            yyval.opt_create_table_options= nullptr;
//            yyval.opt_partitioning= nullptr;
//            yyval.on_duplicate= On_duplicate::ERROR;
//            yyval.opt_query_expression= ((query_expression_body)(yystack.valueAt (0)));
//          };
			break;

		case 609: /* as_create_query_expression: AS query_expression_with_opt_locking_clauses */
//  if (yyn == 609)
//    /* "sql_yacc.y":6116  */
//                                                       { yyval = ((query_expression_body)(yystack.valueAt (0))); };
			break;

		case 610: /* as_create_query_expression: query_expression_with_opt_locking_clauses */
//  if (yyn == 610)
//    /* "sql_yacc.y":6117  */
//                                                       { yyval = ((query_expression_body)(yystack.valueAt (0))); };
			break;

		case 611: /* partition_clause: PARTITION_SYM BY part_type_def opt_num_parts opt_sub_part opt_part_defs */
//  if (yyn == 611)
//    /* "sql_yacc.y":6133  */
//          {
//            yyval= NEW_PTN PT_partition((yyloc), ((part_type_def)(yystack.valueAt (3))), ((ulong_num)(yystack.valueAt (2))), ((opt_sub_part)(yystack.valueAt (1))), yystack.locationAt (0), ((part_def_list)(yystack.valueAt (0))));
//          };
			break;

		case 612: /* part_type_def: opt_linear KEY_SYM opt_key_algo '(' opt_name_list ')' */
//  if (yyn == 612)
//    /* "sql_yacc.y":6140  */
//          {
//            yyval= NEW_PTN PT_part_type_def_key((yyloc), ((is_not_empty)(yystack.valueAt (5))), ((opt_key_algo)(yystack.valueAt (3))), ((name_list)(yystack.valueAt (1))));
//          };
			break;

		case 613: /* part_type_def: opt_linear HASH_SYM '(' bit_expr ')' */
//  if (yyn == 613)
//    /* "sql_yacc.y":6144  */
//          {
//            yyval= NEW_PTN PT_part_type_def_hash((yyloc), ((is_not_empty)(yystack.valueAt (4))), yystack.locationAt (1), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 614: /* part_type_def: RANGE_SYM '(' bit_expr ')' */
//  if (yyn == 614)
//    /* "sql_yacc.y":6148  */
//          {
//            yyval= NEW_PTN PT_part_type_def_range_expr((yyloc), yystack.locationAt (1), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 615: /* part_type_def: RANGE_SYM COLUMNS '(' name_list ')' */
//  if (yyn == 615)
//    /* "sql_yacc.y":6152  */
//          {
//            yyval= NEW_PTN PT_part_type_def_range_columns((yyloc), ((name_list)(yystack.valueAt (1))));
//          };
			break;

		case 616: /* part_type_def: LIST_SYM '(' bit_expr ')' */
//  if (yyn == 616)
//    /* "sql_yacc.y":6156  */
//          {
//            yyval= NEW_PTN PT_part_type_def_list_expr((yyloc), yystack.locationAt (1), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 617: /* part_type_def: LIST_SYM COLUMNS '(' name_list ')' */
//  if (yyn == 617)
//    /* "sql_yacc.y":6160  */
//          {
//            yyval= NEW_PTN PT_part_type_def_list_columns((yyloc), ((name_list)(yystack.valueAt (1))));
//          };
			break;

		case 618: /* opt_linear: %empty */
//  if (yyn == 618)
//    /* "sql_yacc.y":6166  */
//                 { yyval= false; };
			break;

		case 619: /* opt_linear: LINEAR_SYM */
//  if (yyn == 619)
//    /* "sql_yacc.y":6167  */
//                      { yyval= true; };
			break;

		case 620: /* opt_key_algo: %empty */
//  if (yyn == 620)
//    /* "sql_yacc.y":6171  */
//                 { yyval= enum_key_algorithm::KEY_ALGORITHM_NONE; };
			break;

		case 621: /* opt_key_algo: ALGORITHM_SYM EQ real_ulong_num */
//  if (yyn == 621)
//    /* "sql_yacc.y":6173  */
//          {
//            switch (((ulong_num)(yystack.valueAt (0)))) {
//            case 1:
//              yyval= enum_key_algorithm::KEY_ALGORITHM_51;
//              break;
//            case 2:
//              yyval= enum_key_algorithm::KEY_ALGORITHM_55;
//              break;
//            default:
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 622: /* opt_num_parts: %empty */
//  if (yyn == 622)
//    /* "sql_yacc.y":6189  */
//                 { yyval= 0; };
			break;

		case 623: /* opt_num_parts: PARTITIONS_SYM real_ulong_num */
//  if (yyn == 623)
//    /* "sql_yacc.y":6191  */
//          {
//            if (((ulong_num)(yystack.valueAt (0))) == 0)
//            {
//              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
//              MYSQL_YYABORT;
//            }
//            yyval= ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 624: /* opt_sub_part: %empty */
//  if (yyn == 624)
//    /* "sql_yacc.y":6202  */
//                 { yyval= nullptr; };
			break;

		case 625: /* opt_sub_part: SUBPARTITION_SYM BY opt_linear HASH_SYM '(' bit_expr ')' opt_num_subparts */
//  if (yyn == 625)
//    /* "sql_yacc.y":6205  */
//          {
//            yyval= NEW_PTN PT_sub_partition_by_hash((yyloc), ((is_not_empty)(yystack.valueAt (5))), yystack.locationAt (2), ((item)(yystack.valueAt (2))), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 626: /* opt_sub_part: SUBPARTITION_SYM BY opt_linear KEY_SYM opt_key_algo '(' name_list ')' opt_num_subparts */
//  if (yyn == 626)
//    /* "sql_yacc.y":6210  */
//          {
//            yyval= NEW_PTN PT_sub_partition_by_key((yyloc), ((is_not_empty)(yystack.valueAt (6))), ((opt_key_algo)(yystack.valueAt (4))), ((name_list)(yystack.valueAt (2))), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 627: /* opt_name_list: %empty */
//  if (yyn == 627)
//    /* "sql_yacc.y":6217  */
//                 { yyval= nullptr; };
			break;

		case 629: /* name_list: ident */
//  if (yyn == 629)
//    /* "sql_yacc.y":6224  */
//          {
//            yyval= NEW_PTN List<char>;
//            if (yyval == nullptr || yyval->push_back(((lexer.lex_str)(yystack.valueAt (0))).str))
//              MYSQL_YYABORT;
//          };
			break;

		case 630: /* name_list: name_list ',' ident */
//  if (yyn == 630)
//    /* "sql_yacc.y":6230  */
//          {
//            yyval= ((name_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((lexer.lex_str)(yystack.valueAt (0))).str))
//              MYSQL_YYABORT;
//          };
			break;

		case 631: /* opt_num_subparts: %empty */
//  if (yyn == 631)
//    /* "sql_yacc.y":6238  */
//                 { yyval= 0; };
			break;

		case 632: /* opt_num_subparts: SUBPARTITIONS_SYM real_ulong_num */
//  if (yyn == 632)
//    /* "sql_yacc.y":6240  */
//          {
//            if (((ulong_num)(yystack.valueAt (0))) == 0)
//            {
//              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
//              MYSQL_YYABORT;
//            }
//            yyval= ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 633: /* opt_part_defs: %empty */
//  if (yyn == 633)
//    /* "sql_yacc.y":6251  */
//                 { yyval= nullptr; };
			break;

		case 634: /* opt_part_defs: '(' part_def_list ')' */
//  if (yyn == 634)
//    /* "sql_yacc.y":6252  */
//                                { yyval= ((part_def_list)(yystack.valueAt (1))); };
			break;

		case 635: /* part_def_list: part_definition */
//  if (yyn == 635)
//    /* "sql_yacc.y":6257  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_part_definition*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((part_definition)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 636: /* part_def_list: part_def_list ',' part_definition */
//  if (yyn == 636)
//    /* "sql_yacc.y":6263  */
//          {
//            yyval= ((part_def_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((part_definition)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 637: /* part_definition: PARTITION_SYM ident opt_part_values opt_part_options opt_sub_partition */
//  if (yyn == 637)
//    /* "sql_yacc.y":6272  */
//          {
//            yyval= NEW_PTN PT_part_definition((yyloc), yystack.locationAt (5), ((lexer.lex_str)(yystack.valueAt (3))), ((opt_part_values)(yystack.valueAt (2))).type, ((opt_part_values)(yystack.valueAt (2))).values, yystack.locationAt (2),
//                                           ((partition_option_list)(yystack.valueAt (1))), ((sub_part_list)(yystack.valueAt (0))), yystack.locationAt (0));
//          };
			break;

		case 638: /* opt_part_values: %empty */
//  if (yyn == 638)
//    /* "sql_yacc.y":6280  */
//          {
//            yyval.type= partition_type::HASH;
//          };
			break;

		case 639: /* opt_part_values: VALUES LESS_SYM THAN_SYM part_func_max */
//  if (yyn == 639)
//    /* "sql_yacc.y":6284  */
//          {
//            yyval.type= partition_type::RANGE;
//            yyval.values= ((part_value_item_list_paren)(yystack.valueAt (0)));
//          };
			break;

		case 640: /* opt_part_values: VALUES IN_SYM part_values_in */
//  if (yyn == 640)
//    /* "sql_yacc.y":6289  */
//          {
//            yyval.type= partition_type::LIST;
//            yyval.values= ((part_values)(yystack.valueAt (0)));
//          };
			break;

		case 641: /* part_func_max: MAX_VALUE_SYM */
//  if (yyn == 641)
//    /* "sql_yacc.y":6296  */
//                          { yyval= nullptr; };
			break;

		case 643: /* part_values_in: part_value_item_list_paren */
//  if (yyn == 643)
//    /* "sql_yacc.y":6302  */
//          {
//            yyval= NEW_PTN PT_part_values_in_item((yyloc), yystack.locationAt (0), ((part_value_item_list_paren)(yystack.valueAt (0))));
//          };
			break;

		case 644: /* part_values_in: '(' part_value_list ')' */
//  if (yyn == 644)
//    /* "sql_yacc.y":6306  */
//          {
//            yyval= NEW_PTN PT_part_values_in_list((yyloc), yystack.locationAt (0), ((part_value_list)(yystack.valueAt (1))));
//          };
			break;

		case 645: /* part_value_list: part_value_item_list_paren */
//  if (yyn == 645)
//    /* "sql_yacc.y":6313  */
//          {
//            yyval= NEW_PTN
//              Mem_root_array<PT_part_value_item_list_paren *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((part_value_item_list_paren)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 646: /* part_value_list: part_value_list ',' part_value_item_list_paren */
//  if (yyn == 646)
//    /* "sql_yacc.y":6320  */
//          {
//            yyval= ((part_value_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((part_value_item_list_paren)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 647: /* $@35: %empty */
//  if (yyn == 647)
//    /* "sql_yacc.y":6329  */
//          {
//            /*
//              This empty action is required because it resolves 2 reduce/reduce
//              conflicts with an anonymous row expression:
//
//              simple_expr:
//                        ...
//                      | '(' expr ',' expr_list ')'
//            */
//          };
			break;

		case 648: /* part_value_item_list_paren: '(' $@35 part_value_item_list ')' */
//  if (yyn == 648)
//    /* "sql_yacc.y":6340  */
//          {
//            yyval= NEW_PTN PT_part_value_item_list_paren((yyloc), ((part_value_item_list)(yystack.valueAt (1))), yystack.locationAt (0));
//          };
			break;

		case 649: /* part_value_item_list: part_value_item */
//  if (yyn == 649)
//    /* "sql_yacc.y":6347  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_part_value_item *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((part_value_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 650: /* part_value_item_list: part_value_item_list ',' part_value_item */
//  if (yyn == 650)
//    /* "sql_yacc.y":6353  */
//          {
//            yyval= ((part_value_item_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((part_value_item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 651: /* part_value_item: MAX_VALUE_SYM */
//  if (yyn == 651)
//    /* "sql_yacc.y":6361  */
//                        { yyval= NEW_PTN PT_part_value_item_max((yyloc)); };
			break;

		case 652: /* part_value_item: bit_expr */
//  if (yyn == 652)
//    /* "sql_yacc.y":6362  */
//                        { yyval= NEW_PTN PT_part_value_item_expr((yyloc), ((item)(yystack.valueAt (0)))); };
			break;

		case 653: /* opt_sub_partition: %empty */
//  if (yyn == 653)
//    /* "sql_yacc.y":6367  */
//                 { yyval= nullptr; };
			break;

		case 654: /* opt_sub_partition: '(' sub_part_list ')' */
//  if (yyn == 654)
//    /* "sql_yacc.y":6368  */
//                                { yyval= ((sub_part_list)(yystack.valueAt (1))); };
			break;

		case 655: /* sub_part_list: sub_part_definition */
//  if (yyn == 655)
//    /* "sql_yacc.y":6373  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_subpartition *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((sub_part_definition)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 656: /* sub_part_list: sub_part_list ',' sub_part_definition */
//  if (yyn == 656)
//    /* "sql_yacc.y":6379  */
//          {
//            yyval= ((sub_part_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((sub_part_definition)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 657: /* sub_part_definition: SUBPARTITION_SYM ident_or_text opt_part_options */
//  if (yyn == 657)
//    /* "sql_yacc.y":6388  */
//          {
//            yyval= NEW_PTN PT_subpartition((yyloc), yystack.locationAt (2), ((lexer.lex_str)(yystack.valueAt (1))).str, ((partition_option_list)(yystack.valueAt (0))));
//          };
			break;

		case 658: /* opt_part_options: %empty */
//  if (yyn == 658)
//    /* "sql_yacc.y":6394  */
//                { yyval= nullptr; };
			break;

		case 660: /* part_option_list: part_option_list part_option */
//  if (yyn == 660)
//    /* "sql_yacc.y":6400  */
//          {
//            yyval= ((partition_option_list)(yystack.valueAt (1)));
//            if (yyval->push_back(((partition_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 661: /* part_option_list: part_option */
//  if (yyn == 661)
//    /* "sql_yacc.y":6406  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_partition_option *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((partition_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 662: /* part_option: TABLESPACE_SYM opt_equal ident */
//  if (yyn == 662)
//    /* "sql_yacc.y":6415  */
//          { yyval= NEW_PTN PT_partition_tablespace((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str); };
			break;

		case 663: /* part_option: opt_storage ENGINE_SYM opt_equal ident_or_text */
//  if (yyn == 663)
//    /* "sql_yacc.y":6417  */
//          { yyval= NEW_PTN PT_partition_engine((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))); };
			break;

		case 664: /* part_option: NODEGROUP_SYM opt_equal real_ulong_num */
//  if (yyn == 664)
//    /* "sql_yacc.y":6419  */
//          { yyval= NEW_PTN PT_partition_nodegroup((yyloc), ((ulong_num)(yystack.valueAt (0)))); };
			break;

		case 665: /* part_option: MAX_ROWS opt_equal real_ulonglong_num */
//  if (yyn == 665)
//    /* "sql_yacc.y":6421  */
//          { yyval= NEW_PTN PT_partition_max_rows((yyloc), ((ulonglong_number)(yystack.valueAt (0)))); };
			break;

		case 666: /* part_option: MIN_ROWS opt_equal real_ulonglong_num */
//  if (yyn == 666)
//    /* "sql_yacc.y":6423  */
//          { yyval= NEW_PTN PT_partition_min_rows((yyloc), ((ulonglong_number)(yystack.valueAt (0)))); };
			break;

		case 667: /* part_option: DATA_SYM DIRECTORY_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 667)
//    /* "sql_yacc.y":6425  */
//          { yyval= NEW_PTN PT_partition_data_directory((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str); };
			break;

		case 668: /* part_option: INDEX_SYM DIRECTORY_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 668)
//    /* "sql_yacc.y":6427  */
//          { yyval= NEW_PTN PT_partition_index_directory((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str); };
			break;

		case 669: /* part_option: COMMENT_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 669)
//    /* "sql_yacc.y":6429  */
//          { yyval= NEW_PTN PT_partition_comment((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str); };
			break;

		case 673: /* alter_database_option: READ_SYM ONLY_SYM opt_equal ternary_option */
//  if (yyn == 673)
//    /* "sql_yacc.y":6444  */
//          {
//            /*
//              If the statement has set READ ONLY already, and we repeat the
//              READ ONLY option in the statement, the option must be set to
//              the same value as before, otherwise, report an error.
//            */
//            if ((Lex->create_info->used_fields &
//                 HA_CREATE_USED_READ_ONLY) &&
//                (Lex->create_info->schema_read_only !=
//                    (((ternary_option)(yystack.valueAt (0))) == Ternary_option::ON))) {
//              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0), "READ ONLY", "=0",
//                  "READ ONLY", "=1");
//              MYSQL_YYABORT;
//            }
//            Lex->create_info->schema_read_only = (((ternary_option)(yystack.valueAt (0))) == Ternary_option::ON);
//            Lex->create_info->used_fields |= HA_CREATE_USED_READ_ONLY;
//          };
			break;

		case 674: /* opt_create_database_options: %empty */
//  if (yyn == 674)
//    /* "sql_yacc.y":6464  */
//                 {};
			break;

		case 675: /* opt_create_database_options: create_database_options */
//  if (yyn == 675)
//    /* "sql_yacc.y":6465  */
//                                  {};
			break;

		case 676: /* create_database_options: create_database_option */
//  if (yyn == 676)
//    /* "sql_yacc.y":6469  */
//                                 {};
			break;

		case 677: /* create_database_options: create_database_options create_database_option */
//  if (yyn == 677)
//    /* "sql_yacc.y":6470  */
//                                                         {};
			break;

		case 678: /* create_database_option: default_collation */
//  if (yyn == 678)
//    /* "sql_yacc.y":6475  */
//          {
//            if (set_default_collation(Lex->create_info, ((lexer.charset)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 679: /* create_database_option: default_charset */
//  if (yyn == 679)
//    /* "sql_yacc.y":6480  */
//          {
//            if (set_default_charset(Lex->create_info, ((lexer.charset)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 680: /* create_database_option: default_encryption */
//  if (yyn == 680)
//    /* "sql_yacc.y":6485  */
//          {
//            // Validate if we have either 'y|Y' or 'n|N'
//            if (my_strcasecmp(system_charset_info, ((lexer.lex_str)(yystack.valueAt (0))).str, "Y") != 0 &&
//                my_strcasecmp(system_charset_info, ((lexer.lex_str)(yystack.valueAt (0))).str, "N") != 0) {
//              my_error(ER_WRONG_VALUE, MYF(0), "argument (should be Y or N)", ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//
//            Lex->create_info->encrypt_type= ((lexer.lex_str)(yystack.valueAt (0)));
//            Lex->create_info->used_fields |= HA_CREATE_USED_DEFAULT_ENCRYPTION;
//          };
			break;

		case 681: /* opt_if_not_exists: %empty */
//  if (yyn == 681)
//    /* "sql_yacc.y":6499  */
//                 { yyval= false; };
			break;

		case 682: /* opt_if_not_exists: IF not EXISTS */
//  if (yyn == 682)
//    /* "sql_yacc.y":6500  */
//                        { yyval= true; };
			break;

		case 683: /* create_table_options_space_separated: create_table_option */
//  if (yyn == 683)
//    /* "sql_yacc.y":6505  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_ddl_table_option *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((create_table_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 684: /* create_table_options_space_separated: create_table_options_space_separated create_table_option */
//  if (yyn == 684)
//    /* "sql_yacc.y":6511  */
//          {
//            yyval= ((space_separated_alter_table_opts)(yystack.valueAt (1)));
//            if (yyval->push_back(((create_table_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 685: /* create_table_options: create_table_option */
//  if (yyn == 685)
//    /* "sql_yacc.y":6520  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_create_table_option *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((create_table_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 686: /* create_table_options: create_table_options opt_comma create_table_option */
//  if (yyn == 686)
//    /* "sql_yacc.y":6526  */
//          {
//            yyval= ((create_table_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((create_table_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 689: /* create_table_option: ENGINE_SYM opt_equal ident_or_text */
//  if (yyn == 689)
//    /* "sql_yacc.y":6540  */
//          {
//            yyval= NEW_PTN PT_create_table_engine_option((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 690: /* create_table_option: SECONDARY_ENGINE_SYM opt_equal NULL_SYM */
//  if (yyn == 690)
//    /* "sql_yacc.y":6544  */
//          {
//            yyval= NEW_PTN PT_create_table_secondary_engine_option((yyloc));
//          };
			break;

		case 691: /* create_table_option: SECONDARY_ENGINE_SYM opt_equal ident_or_text */
//  if (yyn == 691)
//    /* "sql_yacc.y":6548  */
//          {
//            yyval= NEW_PTN PT_create_table_secondary_engine_option((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 692: /* create_table_option: MAX_ROWS opt_equal ulonglong_num */
//  if (yyn == 692)
//    /* "sql_yacc.y":6552  */
//          {
//            yyval= NEW_PTN PT_create_max_rows_option((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 693: /* create_table_option: MIN_ROWS opt_equal ulonglong_num */
//  if (yyn == 693)
//    /* "sql_yacc.y":6556  */
//          {
//            yyval= NEW_PTN PT_create_min_rows_option((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 694: /* create_table_option: AVG_ROW_LENGTH opt_equal ulonglong_num */
//  if (yyn == 694)
//    /* "sql_yacc.y":6560  */
//          {
//            // The frm-format only allocated 4 bytes for avg_row_length, and
//            // there is code which assumes it can be represented as an uint,
//            // so we constrain it here.
//            if (((ulonglong_number)(yystack.valueAt (0))) > std::numeric_limits<std::uint32_t>::max()) {
//              YYTHD->syntax_error_at(yystack.locationAt (0),
//              "The valid range for avg_row_length is [0,4294967295]. Error"
//              );
//              MYSQL_YYABORT;
//            }
//            yyval= NEW_PTN PT_create_avg_row_length_option((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 695: /* create_table_option: PASSWORD opt_equal TEXT_STRING_sys */
//  if (yyn == 695)
//    /* "sql_yacc.y":6573  */
//          {
//            yyval= NEW_PTN PT_create_password_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 696: /* create_table_option: COMMENT_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 696)
//    /* "sql_yacc.y":6577  */
//          {
//            yyval= NEW_PTN PT_create_commen_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 697: /* create_table_option: COMPRESSION_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 697)
//    /* "sql_yacc.y":6581  */
//          {
//            yyval= NEW_PTN PT_create_compress_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 698: /* create_table_option: ENCRYPTION_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 698)
//    /* "sql_yacc.y":6585  */
//          {
//            yyval= NEW_PTN PT_create_encryption_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 699: /* create_table_option: AUTO_INC opt_equal ulonglong_num */
//  if (yyn == 699)
//    /* "sql_yacc.y":6589  */
//          {
//            yyval= NEW_PTN PT_create_auto_increment_option((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 700: /* create_table_option: PACK_KEYS_SYM opt_equal ternary_option */
//  if (yyn == 700)
//    /* "sql_yacc.y":6593  */
//          {
//            yyval= NEW_PTN PT_create_pack_keys_option((yyloc), ((ternary_option)(yystack.valueAt (0))));
//          };
			break;

		case 701: /* create_table_option: STATS_AUTO_RECALC_SYM opt_equal ternary_option */
//  if (yyn == 701)
//    /* "sql_yacc.y":6597  */
//          {
//            yyval= NEW_PTN PT_create_stats_auto_recalc_option((yyloc), ((ternary_option)(yystack.valueAt (0))));
//          };
			break;

		case 702: /* create_table_option: STATS_PERSISTENT_SYM opt_equal ternary_option */
//  if (yyn == 702)
//    /* "sql_yacc.y":6601  */
//          {
//            yyval= NEW_PTN PT_create_stats_persistent_option((yyloc), ((ternary_option)(yystack.valueAt (0))));
//          };
			break;

		case 703: /* create_table_option: STATS_SAMPLE_PAGES_SYM opt_equal ulong_num */
//  if (yyn == 703)
//    /* "sql_yacc.y":6605  */
//          {
//            /* From user point of view STATS_SAMPLE_PAGES can be specified as
//            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
//            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
//            =default as 0. See create_frm() in sql/table.cc, we use only two
//            bytes for stats_sample_pages and this is why we do not allow
//            larger values. 65535 pages, 16kb each means to sample 1GB, which
//            is impractical. If at some point this needs to be extended, then
//            we can store the higher bits from stats_sample_pages in .frm too. */
//            if (((ulong_num)(yystack.valueAt (0))) == 0 || ((ulong_num)(yystack.valueAt (0))) > 0xffff)
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (0),
//              "The valid range for stats_sample_pages is [1, 65535]. Error");
//              MYSQL_YYABORT;
//            }
//            yyval= NEW_PTN PT_create_stats_stable_pages((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 704: /* create_table_option: STATS_SAMPLE_PAGES_SYM opt_equal DEFAULT_SYM */
//  if (yyn == 704)
//    /* "sql_yacc.y":6623  */
//          {
//            yyval= NEW_PTN PT_create_stats_stable_pages((yyloc));
//          };
			break;

		case 705: /* create_table_option: CHECKSUM_SYM opt_equal ulong_num */
//  if (yyn == 705)
//    /* "sql_yacc.y":6627  */
//          {
//            yyval= NEW_PTN PT_create_checksum_option((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 706: /* create_table_option: TABLE_CHECKSUM_SYM opt_equal ulong_num */
//  if (yyn == 706)
//    /* "sql_yacc.y":6631  */
//          {
//            yyval= NEW_PTN PT_create_checksum_option((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 707: /* create_table_option: DELAY_KEY_WRITE_SYM opt_equal ulong_num */
//  if (yyn == 707)
//    /* "sql_yacc.y":6635  */
//          {
//            yyval= NEW_PTN PT_create_delay_key_write_option((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 708: /* create_table_option: ROW_FORMAT_SYM opt_equal row_types */
//  if (yyn == 708)
//    /* "sql_yacc.y":6639  */
//          {
//            yyval= NEW_PTN PT_create_row_format_option((yyloc), ((row_type)(yystack.valueAt (0))));
//          };
			break;

		case 709: /* create_table_option: UNION_SYM opt_equal '(' opt_table_list ')' */
//  if (yyn == 709)
//    /* "sql_yacc.y":6643  */
//          {
//            yyval= NEW_PTN PT_create_union_option((yyloc), ((table_list)(yystack.valueAt (1))));
//          };
			break;

		case 710: /* create_table_option: default_charset */
//  if (yyn == 710)
//    /* "sql_yacc.y":6647  */
//          {
//            yyval= NEW_PTN PT_create_table_default_charset((yyloc), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 711: /* create_table_option: default_collation */
//  if (yyn == 711)
//    /* "sql_yacc.y":6651  */
//          {
//            yyval= NEW_PTN PT_create_table_default_collation((yyloc), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 712: /* create_table_option: INSERT_METHOD opt_equal merge_insert_types */
//  if (yyn == 712)
//    /* "sql_yacc.y":6655  */
//          {
//            yyval= NEW_PTN PT_create_insert_method_option((yyloc), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 713: /* create_table_option: DATA_SYM DIRECTORY_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 713)
//    /* "sql_yacc.y":6659  */
//          {
//            yyval= NEW_PTN PT_create_data_directory_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 714: /* create_table_option: INDEX_SYM DIRECTORY_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 714)
//    /* "sql_yacc.y":6663  */
//          {
//            yyval= NEW_PTN PT_create_index_directory_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 715: /* create_table_option: TABLESPACE_SYM opt_equal ident */
//  if (yyn == 715)
//    /* "sql_yacc.y":6667  */
//          {
//            yyval= NEW_PTN PT_create_tablespace_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 716: /* create_table_option: STORAGE_SYM DISK_SYM */
//  if (yyn == 716)
//    /* "sql_yacc.y":6671  */
//          {
//            yyval= NEW_PTN PT_create_storage_option((yyloc), HA_SM_DISK);
//          };
			break;

		case 717: /* create_table_option: STORAGE_SYM MEMORY_SYM */
//  if (yyn == 717)
//    /* "sql_yacc.y":6675  */
//          {
//            yyval= NEW_PTN PT_create_storage_option((yyloc), HA_SM_MEMORY);
//          };
			break;

		case 718: /* create_table_option: CONNECTION_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 718)
//    /* "sql_yacc.y":6679  */
//          {
//            yyval= NEW_PTN PT_create_connection_option((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 719: /* create_table_option: KEY_BLOCK_SIZE opt_equal ulonglong_num */
//  if (yyn == 719)
//    /* "sql_yacc.y":6683  */
//          {
//            // The frm-format only allocated 2 bytes for key_block_size,
//            // even if it is represented as std::uint32_t in HA_CREATE_INFO and
//            // elsewhere.
//            if (((ulonglong_number)(yystack.valueAt (0))) > std::numeric_limits<std::uint16_t>::max()) {
//              YYTHD->syntax_error_at(yystack.locationAt (0),
//              "The valid range for key_block_size is [0,65535]. Error");
//              MYSQL_YYABORT;
//            }

//            yyval= NEW_PTN
//            PT_create_key_block_size_option((yyloc), static_cast<std::uint32_t>(((ulonglong_number)(yystack.valueAt (0)))));
//          };
			break;

		case 720: /* create_table_option: START_SYM TRANSACTION_SYM */
//  if (yyn == 720)
//    /* "sql_yacc.y":6697  */
//          {
//            yyval= NEW_PTN PT_create_start_transaction_option((yyloc), true);
//	  };
			break;

		case 721: /* create_table_option: ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 721)
//    /* "sql_yacc.y":6701  */
//          {
//            yyval = make_table_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 722: /* create_table_option: SECONDARY_ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 722)
//    /* "sql_yacc.y":6705  */
//          {
//            yyval = make_table_secondary_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 723: /* create_table_option: option_autoextend_size */
//  if (yyn == 723)
//    /* "sql_yacc.y":6709  */
//          {
//            yyval = NEW_PTN PT_create_ts_autoextend_size_option((yyloc), ((ulonglong_number)(yystack.valueAt (0))));
//          };
			break;

		case 724: /* ternary_option: ulong_num */
//  if (yyn == 724)
//    /* "sql_yacc.y":6716  */
//          {
//            switch(((ulong_num)(yystack.valueAt (0)))) {
//            case 0:
//                yyval= Ternary_option::OFF;
//                break;
//            case 1:
//                yyval= Ternary_option::ON;
//                break;
//            default:
//                YYTHD->syntax_error();
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 725: /* ternary_option: DEFAULT_SYM */
//  if (yyn == 725)
//    /* "sql_yacc.y":6729  */
//                      { yyval= Ternary_option::DEFAULT; };
			break;

		case 726: /* default_charset: opt_default character_set opt_equal charset_name */
//  if (yyn == 726)
//    /* "sql_yacc.y":6733  */
//                                                           { yyval = ((lexer.charset)(yystack.valueAt (0))); };
			break;

		case 727: /* default_collation: opt_default COLLATE_SYM opt_equal collation_name */
//  if (yyn == 727)
//    /* "sql_yacc.y":6737  */
//                                                           { yyval = ((lexer.charset)(yystack.valueAt (0)));};
			break;

		case 728: /* default_encryption: opt_default ENCRYPTION_SYM opt_equal TEXT_STRING_sys */
//  if (yyn == 728)
//    /* "sql_yacc.y":6741  */
//                                                               { yyval = ((lexer.lex_str)(yystack.valueAt (0)));};
			break;

		case 729: /* row_types: DEFAULT_SYM */
//  if (yyn == 729)
//    /* "sql_yacc.y":6745  */
//                         { yyval= ROW_TYPE_DEFAULT; };
			break;

		case 730: /* row_types: FIXED_SYM */
//  if (yyn == 730)
//    /* "sql_yacc.y":6746  */
//                         { yyval= ROW_TYPE_FIXED; };
			break;

		case 731: /* row_types: DYNAMIC_SYM */
//  if (yyn == 731)
//    /* "sql_yacc.y":6747  */
//                         { yyval= ROW_TYPE_DYNAMIC; };
			break;

		case 732: /* row_types: COMPRESSED_SYM */
//  if (yyn == 732)
//    /* "sql_yacc.y":6748  */
//                         { yyval= ROW_TYPE_COMPRESSED; };
			break;

		case 733: /* row_types: REDUNDANT_SYM */
//  if (yyn == 733)
//    /* "sql_yacc.y":6749  */
//                         { yyval= ROW_TYPE_REDUNDANT; };
			break;

		case 734: /* row_types: COMPACT_SYM */
//  if (yyn == 734)
//    /* "sql_yacc.y":6750  */
//                         { yyval= ROW_TYPE_COMPACT; };
			break;

		case 735: /* merge_insert_types: NO_SYM */
//  if (yyn == 735)
//    /* "sql_yacc.y":6754  */
//                         { yyval= MERGE_INSERT_DISABLED; };
			break;

		case 736: /* merge_insert_types: FIRST_SYM */
//  if (yyn == 736)
//    /* "sql_yacc.y":6755  */
//                         { yyval= MERGE_INSERT_TO_FIRST; };
			break;

		case 737: /* merge_insert_types: LAST_SYM */
//  if (yyn == 737)
//    /* "sql_yacc.y":6756  */
//                         { yyval= MERGE_INSERT_TO_LAST; };
			break;

		case 738: /* udf_type: STRING_SYM */
//  if (yyn == 738)
//    /* "sql_yacc.y":6760  */
//                     {yyval = (int) STRING_RESULT; };
			break;

		case 739: /* udf_type: REAL_SYM */
//  if (yyn == 739)
//    /* "sql_yacc.y":6761  */
//                   {yyval = (int) REAL_RESULT; };
			break;

		case 740: /* udf_type: DECIMAL_SYM */
//  if (yyn == 740)
//    /* "sql_yacc.y":6762  */
//                      {yyval = (int) DECIMAL_RESULT; };
			break;

		case 741: /* udf_type: INT_SYM */
//  if (yyn == 741)
//    /* "sql_yacc.y":6763  */
//                  {yyval = (int) INT_RESULT; };
			break;

		case 742: /* table_element_list: table_element */
//  if (yyn == 742)
//    /* "sql_yacc.y":6768  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_table_element *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((table_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 743: /* table_element_list: table_element_list ',' table_element */
//  if (yyn == 743)
//    /* "sql_yacc.y":6774  */
//          {
//            yyval= ((table_element_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((table_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 744: /* table_element: column_def */
//  if (yyn == 744)
//    /* "sql_yacc.y":6782  */
//                                { yyval= ((column_def)(yystack.valueAt (0))); };
			break;

		case 745: /* table_element: table_constraint_def */
//  if (yyn == 745)
//    /* "sql_yacc.y":6783  */
//                                { yyval= ((table_constraint_def)(yystack.valueAt (0))); };
			break;

		case 746: /* column_def: ident field_def opt_references */
//  if (yyn == 746)
//    /* "sql_yacc.y":6788  */
//          {
//            yyval= NEW_PTN PT_column_def((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((field_def)(yystack.valueAt (1))), ((table_constraint_def)(yystack.valueAt (0))));
//          };
			break;

		case 747: /* opt_references: %empty */
//  if (yyn == 747)
//    /* "sql_yacc.y":6794  */
//                  { yyval= nullptr; };
			break;

		case 748: /* opt_references: references */
//  if (yyn == 748)
//    /* "sql_yacc.y":6796  */
//          {
//            /* Currently we ignore FK references here: */
//            yyval= nullptr;
//          };
			break;

		case 749: /* table_constraint_def: key_or_index opt_index_name_and_type '(' key_list_with_expression ')' opt_index_options */
//  if (yyn == 749)
//    /* "sql_yacc.y":6805  */
//          {
//            yyval= NEW_PTN PT_inline_index_definition((yyloc), KEYTYPE_MULTIPLE,
//                                                   ((index_name_and_type)(yystack.valueAt (4))).name, ((index_name_and_type)(yystack.valueAt (4))).type, ((index_column_list)(yystack.valueAt (2))), ((index_options)(yystack.valueAt (0))));
//          };
			break;

		case 750: /* table_constraint_def: FULLTEXT_SYM opt_key_or_index opt_ident '(' key_list_with_expression ')' opt_fulltext_index_options */
//  if (yyn == 750)
//    /* "sql_yacc.y":6811  */
//          {
//            yyval= NEW_PTN PT_inline_index_definition((yyloc), KEYTYPE_FULLTEXT, ((lexer.lex_str)(yystack.valueAt (4))), nullptr,
//                                                   ((index_column_list)(yystack.valueAt (2))), ((index_options)(yystack.valueAt (0))));
//          };
			break;

		case 751: /* table_constraint_def: SPATIAL_SYM opt_key_or_index opt_ident '(' key_list_with_expression ')' opt_spatial_index_options */
//  if (yyn == 751)
//    /* "sql_yacc.y":6817  */
//          {
//            yyval= NEW_PTN PT_inline_index_definition((yyloc), KEYTYPE_SPATIAL, ((lexer.lex_str)(yystack.valueAt (4))), nullptr, ((index_column_list)(yystack.valueAt (2))), ((index_options)(yystack.valueAt (0))));
//          };
			break;

		case 752: /* table_constraint_def: opt_constraint_name constraint_key_type opt_index_name_and_type '(' key_list_with_expression ')' opt_index_options */
//  if (yyn == 752)
//    /* "sql_yacc.y":6822  */
//          {
//            /*
//              Constraint-implementing indexes are named by the constraint type
//              by default.
//            */
//            LEX_STRING name= ((index_name_and_type)(yystack.valueAt (4))).name.str != nullptr ? ((index_name_and_type)(yystack.valueAt (4))).name : ((lexer.lex_str)(yystack.valueAt (6)));
//            yyval= NEW_PTN PT_inline_index_definition((yyloc), ((key_type)(yystack.valueAt (5))), name, ((index_name_and_type)(yystack.valueAt (4))).type, ((index_column_list)(yystack.valueAt (2))), ((index_options)(yystack.valueAt (0))));
//          };
			break;

		case 753: /* table_constraint_def: opt_constraint_name FOREIGN KEY_SYM opt_ident '(' key_list ')' references */
//  if (yyn == 753)
//    /* "sql_yacc.y":6831  */
//          {
//            yyval= NEW_PTN PT_foreign_key_definition((yyloc), ((lexer.lex_str)(yystack.valueAt (7))), ((lexer.lex_str)(yystack.valueAt (4))), ((index_column_list)(yystack.valueAt (2))), ((fk_references)(yystack.valueAt (0))).table_name,
//                                                  ((fk_references)(yystack.valueAt (0))).reference_list,
//                                                  ((fk_references)(yystack.valueAt (0))).fk_match_option,
//                                                  ((fk_references)(yystack.valueAt (0))).fk_update_opt,
//                                                  ((fk_references)(yystack.valueAt (0))).fk_delete_opt);
//          };
			break;

		case 754: /* table_constraint_def: opt_constraint_name check_constraint opt_constraint_enforcement */
//  if (yyn == 754)
//    /* "sql_yacc.y":6839  */
//          {
//            yyval= NEW_PTN PT_check_constraint((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((item)(yystack.valueAt (1))), ((is_not_empty)(yystack.valueAt (0))));
//            if (yyval == nullptr) MYSQL_YYABORT; // OOM
//          };
			break;

		case 755: /* check_constraint: CHECK_SYM '(' expr ')' */
//  if (yyn == 755)
//    /* "sql_yacc.y":6846  */
//                                 { yyval= ((item)(yystack.valueAt (1))); };
			break;

		case 756: /* opt_constraint_name: %empty */
//  if (yyn == 756)
//    /* "sql_yacc.y":6850  */
//                 { yyval= NULL_STR; };
			break;

		case 757: /* opt_constraint_name: CONSTRAINT opt_ident */
//  if (yyn == 757)
//    /* "sql_yacc.y":6851  */
//                               { yyval= ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 758: /* opt_not: %empty */
//  if (yyn == 758)
//    /* "sql_yacc.y":6855  */
//                       { yyval= false; };
			break;

		case 759: /* opt_not: NOT_SYM */
//  if (yyn == 759)
//    /* "sql_yacc.y":6856  */
//                       { yyval= true; };
			break;

		case 760: /* opt_constraint_enforcement: %empty */
//  if (yyn == 760)
//    /* "sql_yacc.y":6860  */
//                 { yyval= true; };
			break;

		case 761: /* opt_constraint_enforcement: constraint_enforcement */
//  if (yyn == 761)
//    /* "sql_yacc.y":6861  */
//                                 { yyval= ((is_not_empty)(yystack.valueAt (0))); };
			break;

		case 762: /* constraint_enforcement: opt_not ENFORCED_SYM */
//  if (yyn == 762)
//    /* "sql_yacc.y":6865  */
//                                { yyval= !(((is_not_empty)(yystack.valueAt (1)))); };
			break;

		case 763: /* field_def: type opt_column_attribute_list */
//  if (yyn == 763)
//    /* "sql_yacc.y":6870  */
//          {
//            yyval= NEW_PTN PT_field_def((yyloc), ((type)(yystack.valueAt (1))), ((col_attr_list)(yystack.valueAt (0))));
//          };
			break;

		case 764: /* field_def: type opt_collate opt_generated_always AS '(' expr ')' opt_stored_attribute opt_column_attribute_list */
//  if (yyn == 764)
//    /* "sql_yacc.y":6876  */
//          {
//            auto *opt_attrs= ((col_attr_list)(yystack.valueAt (0)));
//            if (((lexer.charset)(yystack.valueAt (7))) != nullptr)
//            {
//              if (opt_attrs == nullptr)
//              {
//                opt_attrs= NEW_PTN
//                  Mem_root_array<PT_column_attr_base *>(YYMEM_ROOT);
//              }
//              auto *collation= NEW_PTN PT_collate_column_attr(yystack.locationAt (7), ((lexer.charset)(yystack.valueAt (7))));
//              if (opt_attrs == nullptr || collation == nullptr ||
//                  opt_attrs->push_back(collation))
//                MYSQL_YYABORT; // OOM
//            }
//            yyval= NEW_PTN PT_generated_field_def((yyloc), ((type)(yystack.valueAt (8))), ((item)(yystack.valueAt (3))), ((virtual_or_stored)(yystack.valueAt (1))), opt_attrs);
//          };
			break;

		case 767: /* opt_stored_attribute: %empty */
//  if (yyn == 767)
//    /* "sql_yacc.y":6900  */
//                      { yyval= Virtual_or_stored::VIRTUAL; };
			break;

		case 768: /* opt_stored_attribute: VIRTUAL_SYM */
//  if (yyn == 768)
//    /* "sql_yacc.y":6901  */
//                      { yyval= Virtual_or_stored::VIRTUAL; };
			break;

		case 769: /* opt_stored_attribute: STORED_SYM */
//  if (yyn == 769)
//    /* "sql_yacc.y":6902  */
//                      { yyval= Virtual_or_stored::STORED; };
			break;

		case 770: /* type: int_type opt_field_length field_options */
//  if (yyn == 770)
//    /* "sql_yacc.y":6907  */
//          {
//            yyval= NEW_PTN PT_numeric_type((yyloc), YYTHD, ((int_type)(yystack.valueAt (2))), ((c_str)(yystack.valueAt (1))), ((field_option)(yystack.valueAt (0))));
//          };
			break;

		case 771: /* type: real_type opt_precision field_options */
//  if (yyn == 771)
//    /* "sql_yacc.y":6911  */
//          {
//            yyval= NEW_PTN PT_numeric_type((yyloc), YYTHD, ((numeric_type)(yystack.valueAt (2))), ((precision)(yystack.valueAt (1))).length, ((precision)(yystack.valueAt (1))).dec, ((field_option)(yystack.valueAt (0))));
//          };
			break;

		case 772: /* type: numeric_type float_options field_options */
//  if (yyn == 772)
//    /* "sql_yacc.y":6915  */
//          {
//            yyval= NEW_PTN PT_numeric_type((yyloc), YYTHD, ((numeric_type)(yystack.valueAt (2))), ((precision)(yystack.valueAt (1))).length, ((precision)(yystack.valueAt (1))).dec, ((field_option)(yystack.valueAt (0))));
//          };
			break;

		case 773: /* type: BIT_SYM */
//  if (yyn == 773)
//    /* "sql_yacc.y":6919  */
//          {
//            yyval= NEW_PTN PT_bit_type((yyloc));
//          };
			break;

		case 774: /* type: BIT_SYM field_length */
//  if (yyn == 774)
//    /* "sql_yacc.y":6923  */
//          {
//            yyval= NEW_PTN PT_bit_type((yyloc), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 775: /* type: BOOL_SYM */
//  if (yyn == 775)
//    /* "sql_yacc.y":6927  */
//          {
//            yyval= NEW_PTN PT_boolean_type((yyloc));
//          };
			break;

		case 776: /* type: BOOLEAN_SYM */
//  if (yyn == 776)
//    /* "sql_yacc.y":6931  */
//          {
//            yyval= NEW_PTN PT_boolean_type((yyloc));
//          };
			break;

		case 777: /* type: CHAR_SYM field_length opt_charset_with_opt_binary */
//  if (yyn == 777)
//    /* "sql_yacc.y":6935  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, ((c_str)(yystack.valueAt (1))), ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 778: /* type: CHAR_SYM opt_charset_with_opt_binary */
//  if (yyn == 778)
//    /* "sql_yacc.y":6940  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 779: /* type: nchar field_length opt_bin_mod */
//  if (yyn == 779)
//    /* "sql_yacc.y":6945  */
//          {
//            const CHARSET_INFO *cs= ((is_not_empty)(yystack.valueAt (0))) ?
//              get_bin_collation(national_charset_info) : national_charset_info;
//            if (cs == nullptr)
//              MYSQL_YYABORT;
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, ((c_str)(yystack.valueAt (1))), cs);
//            warn_about_deprecated_national(YYTHD);
//          };
			break;

		case 780: /* type: nchar opt_bin_mod */
//  if (yyn == 780)
//    /* "sql_yacc.y":6954  */
//          {
//            const CHARSET_INFO *cs= ((is_not_empty)(yystack.valueAt (0))) ?
//              get_bin_collation(national_charset_info) : national_charset_info;
//            if (cs == nullptr)
//              MYSQL_YYABORT;
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, cs);
//            warn_about_deprecated_national(YYTHD);
//          };
			break;

		case 781: /* type: BINARY_SYM field_length */
//  if (yyn == 781)
//    /* "sql_yacc.y":6963  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, ((c_str)(yystack.valueAt (0))), &my_charset_bin);
//          };
			break;

		case 782: /* type: BINARY_SYM */
//  if (yyn == 782)
//    /* "sql_yacc.y":6967  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::CHAR, &my_charset_bin);
//          };
			break;

		case 783: /* type: varchar field_length opt_charset_with_opt_binary */
//  if (yyn == 783)
//    /* "sql_yacc.y":6971  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::VARCHAR, ((c_str)(yystack.valueAt (1))), ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 784: /* type: nvarchar field_length opt_bin_mod */
//  if (yyn == 784)
//    /* "sql_yacc.y":6976  */
//          {
//            const CHARSET_INFO *cs= ((is_not_empty)(yystack.valueAt (0))) ?
//              get_bin_collation(national_charset_info) : national_charset_info;
//            if (cs == nullptr)
//              MYSQL_YYABORT;
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::VARCHAR, ((c_str)(yystack.valueAt (1))), cs);
//            warn_about_deprecated_national(YYTHD);
//          };
			break;

		case 785: /* type: VARBINARY_SYM field_length */
//  if (yyn == 785)
//    /* "sql_yacc.y":6985  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::VARCHAR, ((c_str)(yystack.valueAt (0))), &my_charset_bin);
//          };
			break;

		case 786: /* type: YEAR_SYM opt_field_length field_options */
//  if (yyn == 786)
//    /* "sql_yacc.y":6989  */
//          {
//            if (((c_str)(yystack.valueAt (1))))
//            {
//              errno= 0;
//              ulong length= strtoul(((c_str)(yystack.valueAt (1))), nullptr, 10);
//              if (errno != 0 || length != 4)
//              {
//                /* Only support length is 4 */
//                my_error(ER_INVALID_YEAR_COLUMN_LENGTH, MYF(0), "YEAR");
//                MYSQL_YYABORT;
//              }
//              push_deprecated_warn(YYTHD, "YEAR(4)", "YEAR");
//            }
//            if (((field_option)(yystack.valueAt (0))) == UNSIGNED_FLAG)
//            {
//              push_warning(YYTHD, Sql_condition::SL_WARNING,
//                           ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
//                           ER_THD(YYTHD, ER_WARN_DEPRECATED_YEAR_UNSIGNED));
//            }
//            // We can ignore field length and UNSIGNED/ZEROFILL attributes here.
//            yyval= NEW_PTN PT_year_type((yyloc));
//          };
			break;

		case 787: /* type: DATE_SYM */
//  if (yyn == 787)
//    /* "sql_yacc.y":7012  */
//          {
//            yyval= NEW_PTN PT_date_type((yyloc));
//          };
			break;

		case 788: /* type: TIME_SYM type_datetime_precision */
//  if (yyn == 788)
//    /* "sql_yacc.y":7016  */
//          {
//            yyval= NEW_PTN PT_time_type((yyloc), Time_type::TIME, ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 789: /* type: TIMESTAMP_SYM type_datetime_precision */
//  if (yyn == 789)
//    /* "sql_yacc.y":7020  */
//          {
//            yyval= NEW_PTN PT_timestamp_type((yyloc), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 790: /* type: DATETIME_SYM type_datetime_precision */
//  if (yyn == 790)
//    /* "sql_yacc.y":7024  */
//          {
//            yyval= NEW_PTN PT_time_type((yyloc), Time_type::DATETIME, ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 791: /* type: TINYBLOB_SYM */
//  if (yyn == 791)
//    /* "sql_yacc.y":7028  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::TINY, &my_charset_bin);
//          };
			break;

		case 792: /* type: BLOB_SYM opt_field_length */
//  if (yyn == 792)
//    /* "sql_yacc.y":7032  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 794: /* type: MEDIUMBLOB_SYM */
//  if (yyn == 794)
//    /* "sql_yacc.y":7037  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::MEDIUM, &my_charset_bin);
//          };
			break;

		case 795: /* type: LONGBLOB_SYM */
//  if (yyn == 795)
//    /* "sql_yacc.y":7041  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::LONG, &my_charset_bin);
//          };
			break;

		case 796: /* type: LONG_SYM VARBINARY_SYM */
//  if (yyn == 796)
//    /* "sql_yacc.y":7045  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::MEDIUM, &my_charset_bin);
//          };
			break;

		case 797: /* type: LONG_SYM varchar opt_charset_with_opt_binary */
//  if (yyn == 797)
//    /* "sql_yacc.y":7049  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::MEDIUM, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 798: /* type: TINYTEXT_SYN opt_charset_with_opt_binary */
//  if (yyn == 798)
//    /* "sql_yacc.y":7054  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::TINY, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 799: /* type: TEXT_SYM opt_field_length opt_charset_with_opt_binary */
//  if (yyn == 799)
//    /* "sql_yacc.y":7059  */
//          {
//            yyval= NEW_PTN PT_char_type((yyloc), Char_type::TEXT, ((c_str)(yystack.valueAt (1))), ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 800: /* type: MEDIUMTEXT_SYM opt_charset_with_opt_binary */
//  if (yyn == 800)
//    /* "sql_yacc.y":7064  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::MEDIUM, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 801: /* type: LONGTEXT_SYM opt_charset_with_opt_binary */
//  if (yyn == 801)
//    /* "sql_yacc.y":7069  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::LONG, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 802: /* type: ENUM_SYM '(' string_list ')' opt_charset_with_opt_binary */
//  if (yyn == 802)
//    /* "sql_yacc.y":7074  */
//          {
//            yyval= NEW_PTN PT_enum_type((yyloc), ((string_list)(yystack.valueAt (2))), ((charset_with_opt_binary)(yystack.valueAt (0))).charset, ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 803: /* type: SET_SYM '(' string_list ')' opt_charset_with_opt_binary */
//  if (yyn == 803)
//    /* "sql_yacc.y":7078  */
//          {
//            yyval= NEW_PTN PT_set_type((yyloc), ((string_list)(yystack.valueAt (2))), ((charset_with_opt_binary)(yystack.valueAt (0))).charset, ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 804: /* type: LONG_SYM opt_charset_with_opt_binary */
//  if (yyn == 804)
//    /* "sql_yacc.y":7082  */
//          {
//            yyval= NEW_PTN PT_blob_type((yyloc), Blob_type::MEDIUM, ((charset_with_opt_binary)(yystack.valueAt (0))).charset,
//                                     ((charset_with_opt_binary)(yystack.valueAt (0))).force_binary);
//          };
			break;

		case 805: /* type: SERIAL_SYM */
//  if (yyn == 805)
//    /* "sql_yacc.y":7087  */
//          {
//            yyval= NEW_PTN PT_serial_type((yyloc));
//          };
			break;

		case 806: /* type: JSON_SYM */
//  if (yyn == 806)
//    /* "sql_yacc.y":7091  */
//          {
//            yyval= NEW_PTN PT_json_type((yyloc));
//          };
			break;

		case 807: /* spatial_type: GEOMETRY_SYM */
//  if (yyn == 807)
//    /* "sql_yacc.y":7098  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_GEOMETRY); };
			break;

		case 808: /* spatial_type: GEOMETRYCOLLECTION_SYM */
//  if (yyn == 808)
//    /* "sql_yacc.y":7100  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_GEOMETRYCOLLECTION); };
			break;

		case 809: /* spatial_type: POINT_SYM */
//  if (yyn == 809)
//    /* "sql_yacc.y":7102  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_POINT); };
			break;

		case 810: /* spatial_type: MULTIPOINT_SYM */
//  if (yyn == 810)
//    /* "sql_yacc.y":7104  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_MULTIPOINT); };
			break;

		case 811: /* spatial_type: LINESTRING_SYM */
//  if (yyn == 811)
//    /* "sql_yacc.y":7106  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_LINESTRING); };
			break;

		case 812: /* spatial_type: MULTILINESTRING_SYM */
//  if (yyn == 812)
//    /* "sql_yacc.y":7108  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_MULTILINESTRING); };
			break;

		case 813: /* spatial_type: POLYGON_SYM */
//  if (yyn == 813)
//    /* "sql_yacc.y":7110  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_POLYGON); };
			break;

		case 814: /* spatial_type: MULTIPOLYGON_SYM */
//  if (yyn == 814)
//    /* "sql_yacc.y":7112  */
//          { yyval= NEW_PTN PT_spacial_type((yyloc), Field::GEOM_MULTIPOLYGON); };
			break;

		case 815: /* nchar: NCHAR_SYM */
//  if (yyn == 815)
//    /* "sql_yacc.y":7116  */
//                    {};
			break;

		case 816: /* nchar: NATIONAL_SYM CHAR_SYM */
//  if (yyn == 816)
//    /* "sql_yacc.y":7117  */
//                                {};
			break;

		case 817: /* varchar: CHAR_SYM VARYING */
//  if (yyn == 817)
//    /* "sql_yacc.y":7121  */
//                           {};
			break;

		case 818: /* varchar: VARCHAR_SYM */
//  if (yyn == 818)
//    /* "sql_yacc.y":7122  */
//                      {};
			break;

		case 819: /* nvarchar: NATIONAL_SYM VARCHAR_SYM */
//  if (yyn == 819)
//    /* "sql_yacc.y":7126  */
//                                   {};
			break;

		case 820: /* nvarchar: NVARCHAR_SYM */
//  if (yyn == 820)
//    /* "sql_yacc.y":7127  */
//                       {};
			break;

		case 821: /* nvarchar: NCHAR_SYM VARCHAR_SYM */
//  if (yyn == 821)
//    /* "sql_yacc.y":7128  */
//                                {};
			break;

		case 822: /* nvarchar: NATIONAL_SYM CHAR_SYM VARYING */
//  if (yyn == 822)
//    /* "sql_yacc.y":7129  */
//                                        {};
			break;

		case 823: /* nvarchar: NCHAR_SYM VARYING */
//  if (yyn == 823)
//    /* "sql_yacc.y":7130  */
//                            {};
			break;

		case 824: /* int_type: INT_SYM */
//  if (yyn == 824)
//    /* "sql_yacc.y":7134  */
//                        { yyval=Int_type::INT; };
			break;

		case 825: /* int_type: TINYINT_SYM */
//  if (yyn == 825)
//    /* "sql_yacc.y":7135  */
//                        { yyval=Int_type::TINYINT; };
			break;

		case 826: /* int_type: SMALLINT_SYM */
//  if (yyn == 826)
//    /* "sql_yacc.y":7136  */
//                        { yyval=Int_type::SMALLINT; };
			break;

		case 827: /* int_type: MEDIUMINT_SYM */
//  if (yyn == 827)
//    /* "sql_yacc.y":7137  */
//                        { yyval=Int_type::MEDIUMINT; };
			break;

		case 828: /* int_type: BIGINT_SYM */
//  if (yyn == 828)
//    /* "sql_yacc.y":7138  */
//                        { yyval=Int_type::BIGINT; };
			break;

		case 829: /* real_type: REAL_SYM */
//  if (yyn == 829)
//    /* "sql_yacc.y":7143  */
//          {
//            yyval= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
//              Numeric_type::FLOAT : Numeric_type::DOUBLE;
//          };
			break;

		case 830: /* real_type: DOUBLE_SYM opt_PRECISION */
//  if (yyn == 830)
//    /* "sql_yacc.y":7148  */
//          { yyval= Numeric_type::DOUBLE; };
			break;

		case 833: /* numeric_type: FLOAT_SYM */
//  if (yyn == 833)
//    /* "sql_yacc.y":7157  */
//                      { yyval= Numeric_type::FLOAT; };
			break;

		case 834: /* numeric_type: DECIMAL_SYM */
//  if (yyn == 834)
//    /* "sql_yacc.y":7158  */
//                      { yyval= Numeric_type::DECIMAL; };
			break;

		case 835: /* numeric_type: NUMERIC_SYM */
//  if (yyn == 835)
//    /* "sql_yacc.y":7159  */
//                      { yyval= Numeric_type::DECIMAL; };
			break;

		case 836: /* numeric_type: FIXED_SYM */
//  if (yyn == 836)
//    /* "sql_yacc.y":7160  */
//                      { yyval= Numeric_type::DECIMAL; };
			break;

		case 837: /* standard_float_options: %empty */
//  if (yyn == 837)
//    /* "sql_yacc.y":7165  */
//          {
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 838: /* standard_float_options: field_length */
//  if (yyn == 838)
//    /* "sql_yacc.y":7170  */
//          {
//            yyval.length = ((c_str)(yystack.valueAt (0)));
//            yyval.dec = nullptr;
//          };
			break;

		case 839: /* float_options: %empty */
//  if (yyn == 839)
//    /* "sql_yacc.y":7178  */
//          {
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 840: /* float_options: field_length */
//  if (yyn == 840)
//    /* "sql_yacc.y":7183  */
//          {
//            yyval.length= ((c_str)(yystack.valueAt (0)));
//            yyval.dec= nullptr;
//          };
			break;

		case 842: /* precision: '(' NUM ',' NUM ')' */
//  if (yyn == 842)
//    /* "sql_yacc.y":7192  */
//          {
//            yyval.length= ((lexer.lex_str)(yystack.valueAt (3))).str;
//            yyval.dec= ((lexer.lex_str)(yystack.valueAt (1))).str;
//          };
			break;

		case 843: /* type_datetime_precision: %empty */
//  if (yyn == 843)
//    /* "sql_yacc.y":7200  */
//                 { yyval= nullptr; };
			break;

		case 844: /* type_datetime_precision: '(' NUM ')' */
//  if (yyn == 844)
//    /* "sql_yacc.y":7201  */
//                                     { yyval= ((lexer.lex_str)(yystack.valueAt (1))).str; };
			break;

		case 845: /* func_datetime_precision: %empty */
//  if (yyn == 845)
//    /* "sql_yacc.y":7205  */
//                 { yyval= 0; };
			break;

		case 846: /* func_datetime_precision: '(' ')' */
//  if (yyn == 846)
//    /* "sql_yacc.y":7206  */
//                                     { yyval= 0; };
			break;

		case 847: /* func_datetime_precision: '(' NUM ')' */
//  if (yyn == 847)
//    /* "sql_yacc.y":7208  */
//           {
//             int error;
//             yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (1))).str, nullptr, &error);
//           };
			break;

		case 848: /* field_options: %empty */
//  if (yyn == 848)
//    /* "sql_yacc.y":7215  */
//                 { yyval = 0; };
			break;

		case 850: /* field_opt_list: field_opt_list field_option */
//  if (yyn == 850)
//    /* "sql_yacc.y":7221  */
//          {
//            yyval = ((field_option)(yystack.valueAt (1))) | ((field_option)(yystack.valueAt (0)));
//          };
			break;

		case 852: /* field_option: SIGNED_SYM */
//  if (yyn == 852)
//    /* "sql_yacc.y":7228  */
//                       { yyval = 0; };
			break;

		case 853: /* field_option: UNSIGNED_SYM */
//  if (yyn == 853)
//    /* "sql_yacc.y":7229  */
//                       { yyval = UNSIGNED_FLAG; };
			break;

		case 854: /* field_option: ZEROFILL_SYM */
//  if (yyn == 854)
//    /* "sql_yacc.y":7230  */
//                       {
//            yyval = ZEROFILL_FLAG;
//            push_warning(YYTHD, Sql_condition::SL_WARNING,
//                         ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
//                         ER_THD(YYTHD, ER_WARN_DEPRECATED_ZEROFILL));
//          };
			break;

		case 855: /* field_length: '(' LONG_NUM ')' */
//  if (yyn == 855)
//    /* "sql_yacc.y":7239  */
//                                { yyval= ((lexer.lex_str)(yystack.valueAt (1))).str; };
			break;

		case 856: /* field_length: '(' ULONGLONG_NUM ')' */
//  if (yyn == 856)
//    /* "sql_yacc.y":7240  */
//                                { yyval= ((lexer.lex_str)(yystack.valueAt (1))).str; };
			break;

		case 857: /* field_length: '(' DECIMAL_NUM ')' */
//  if (yyn == 857)
//    /* "sql_yacc.y":7241  */
//                                { yyval= ((lexer.lex_str)(yystack.valueAt (1))).str; };
			break;

		case 858: /* field_length: '(' NUM ')' */
//  if (yyn == 858)
//    /* "sql_yacc.y":7242  */
//                                { yyval= ((lexer.lex_str)(yystack.valueAt (1))).str; };
			break;

		case 859: /* opt_field_length: %empty */
//  if (yyn == 859)
//    /* "sql_yacc.y":7245  */
//                                          { yyval= nullptr; /* use default length */ };
			break;

		case 861: /* opt_precision: %empty */
//  if (yyn == 861)
//    /* "sql_yacc.y":7251  */
//          {
//            yyval.length= nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 863: /* opt_column_attribute_list: %empty */
//  if (yyn == 863)
//    /* "sql_yacc.y":7259  */
//                 { yyval= nullptr; };
			break;

		case 865: /* column_attribute_list: column_attribute_list column_attribute */
//  if (yyn == 865)
//    /* "sql_yacc.y":7265  */
//          {
//            yyval= ((col_attr_list)(yystack.valueAt (1)));
//            if (((col_attr)(yystack.valueAt (0))) == nullptr)
//              MYSQL_YYABORT; // OOM

//            if (((col_attr)(yystack.valueAt (0)))->has_constraint_enforcement()) {
//              // $2 is `[NOT] ENFORCED`
//              if (((col_attr_list)(yystack.valueAt (1)))->back()->set_constraint_enforcement(
//                      ((col_attr)(yystack.valueAt (0)))->is_constraint_enforced())) {
//                // $1 is not `CHECK(...)`
//                YYTHD->syntax_error_at(yystack.locationAt (0));
//                MYSQL_YYABORT;
//              }
//            } else {
//              if (yyval->push_back(((col_attr)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; // OOM
//            }
//          };
			break;

		case 866: /* column_attribute_list: column_attribute */
//  if (yyn == 866)
//    /* "sql_yacc.y":7284  */
//          {
//            if (((col_attr)(yystack.valueAt (0))) == nullptr)
//              MYSQL_YYABORT; // OOM

//            if (((col_attr)(yystack.valueAt (0)))->has_constraint_enforcement()) {
//              // [NOT] ENFORCED doesn't follow the CHECK clause
//              YYTHD->syntax_error_at(yystack.locationAt (0));
//              MYSQL_YYABORT;
//            }

//            yyval=
//              NEW_PTN Mem_root_array<PT_column_attr_base *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((col_attr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 867: /* column_attribute: NULL_SYM */
//  if (yyn == 867)
//    /* "sql_yacc.y":7303  */
//          {
//            yyval= NEW_PTN PT_null_column_attr((yyloc));
//          };
			break;

		case 868: /* column_attribute: not NULL_SYM */
//  if (yyn == 868)
//    /* "sql_yacc.y":7307  */
//          {
//            yyval= NEW_PTN PT_not_null_column_attr((yyloc));
//          };
			break;

		case 869: /* column_attribute: not SECONDARY_SYM */
//  if (yyn == 869)
//    /* "sql_yacc.y":7311  */
//          {
//            yyval= NEW_PTN PT_secondary_column_attr((yyloc));
//          };
			break;

		case 870: /* column_attribute: DEFAULT_SYM now_or_signed_literal */
//  if (yyn == 870)
//    /* "sql_yacc.y":7315  */
//          {
//            yyval= NEW_PTN PT_default_column_attr((yyloc), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 871: /* column_attribute: DEFAULT_SYM '(' expr ')' */
//  if (yyn == 871)
//    /* "sql_yacc.y":7319  */
//          {
//            yyval= NEW_PTN PT_generated_default_val_column_attr((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 872: /* column_attribute: ON_SYM UPDATE_SYM now */
//  if (yyn == 872)
//    /* "sql_yacc.y":7323  */
//          {
//            yyval= NEW_PTN PT_on_update_column_attr((yyloc), static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 873: /* column_attribute: AUTO_INC */
//  if (yyn == 873)
//    /* "sql_yacc.y":7327  */
//          {
//            yyval= NEW_PTN PT_auto_increment_column_attr((yyloc));
//          };
			break;

		case 874: /* column_attribute: SERIAL_SYM DEFAULT_SYM VALUE_SYM */
//  if (yyn == 874)
//    /* "sql_yacc.y":7331  */
//          {
//            yyval= NEW_PTN PT_serial_default_value_column_attr((yyloc));
//          };
			break;

		case 875: /* column_attribute: opt_primary KEY_SYM */
//  if (yyn == 875)
//    /* "sql_yacc.y":7335  */
//          {
//            yyval= NEW_PTN PT_primary_key_column_attr((yyloc));
//          };
			break;

		case 876: /* column_attribute: UNIQUE_SYM */
//  if (yyn == 876)
//    /* "sql_yacc.y":7339  */
//          {
//            yyval= NEW_PTN PT_unique_key_column_attr((yyloc));
//          };
			break;

		case 877: /* column_attribute: UNIQUE_SYM KEY_SYM */
//  if (yyn == 877)
//    /* "sql_yacc.y":7343  */
//          {
//            yyval= NEW_PTN PT_unique_key_column_attr((yyloc));
//          };
			break;

		case 878: /* column_attribute: COMMENT_SYM TEXT_STRING_sys */
//  if (yyn == 878)
//    /* "sql_yacc.y":7347  */
//          {
//            yyval= NEW_PTN PT_comment_column_attr((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 879: /* column_attribute: COLLATE_SYM collation_name */
//  if (yyn == 879)
//    /* "sql_yacc.y":7351  */
//          {
//            yyval= NEW_PTN PT_collate_column_attr((yyloc), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 880: /* column_attribute: COLUMN_FORMAT_SYM column_format */
//  if (yyn == 880)
//    /* "sql_yacc.y":7355  */
//          {
//            yyval= NEW_PTN PT_column_format_column_attr((yyloc), ((column_format)(yystack.valueAt (0))));
//          };
			break;

		case 881: /* column_attribute: STORAGE_SYM storage_media */
//  if (yyn == 881)
//    /* "sql_yacc.y":7359  */
//          {
//            yyval= NEW_PTN PT_storage_media_column_attr((yyloc), ((storage_media)(yystack.valueAt (0))));
//          };
			break;

		case 882: /* column_attribute: SRID_SYM real_ulonglong_num */
//  if (yyn == 882)
//    /* "sql_yacc.y":7363  */
//          {
//            if (((ulonglong_number)(yystack.valueAt (0))) > std::numeric_limits<gis::srid_t>::max())
//            {
//              my_error(ER_DATA_OUT_OF_RANGE, MYF(0), "SRID", "SRID");
//              MYSQL_YYABORT;
//            }
//            yyval= NEW_PTN PT_srid_column_attr((yyloc), static_cast<gis::srid_t>(((ulonglong_number)(yystack.valueAt (0)))));
//          };
			break;

		case 883: /* column_attribute: opt_constraint_name check_constraint */
//  if (yyn == 883)
//    /* "sql_yacc.y":7373  */
//          {
//            yyval= NEW_PTN PT_check_constraint_column_attr((yyloc), ((lexer.lex_str)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 884: /* column_attribute: constraint_enforcement */
//  if (yyn == 884)
//    /* "sql_yacc.y":7386  */
//          {
//            yyval = NEW_PTN PT_constraint_enforcement_attr((yyloc), ((is_not_empty)(yystack.valueAt (0))));
//          };
			break;

		case 885: /* column_attribute: ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 885)
//    /* "sql_yacc.y":7390  */
//          {
//            yyval = make_column_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 886: /* column_attribute: SECONDARY_ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 886)
//    /* "sql_yacc.y":7394  */
//          {
//            yyval = make_column_secondary_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 887: /* column_attribute: visibility */
//  if (yyn == 887)
//    /* "sql_yacc.y":7398  */
//          {
//            yyval = NEW_PTN PT_column_visibility_attr((yyloc), ((visibility)(yystack.valueAt (0))));
//          };
			break;

		case 888: /* column_format: DEFAULT_SYM */
//  if (yyn == 888)
//    /* "sql_yacc.y":7404  */
//                      { yyval= COLUMN_FORMAT_TYPE_DEFAULT; };
			break;

		case 889: /* column_format: FIXED_SYM */
//  if (yyn == 889)
//    /* "sql_yacc.y":7405  */
//                      { yyval= COLUMN_FORMAT_TYPE_FIXED; };
			break;

		case 890: /* column_format: DYNAMIC_SYM */
//  if (yyn == 890)
//    /* "sql_yacc.y":7406  */
//                      { yyval= COLUMN_FORMAT_TYPE_DYNAMIC; };
			break;

		case 891: /* storage_media: DEFAULT_SYM */
//  if (yyn == 891)
//    /* "sql_yacc.y":7410  */
//                      { yyval= HA_SM_DEFAULT; };
			break;

		case 892: /* storage_media: DISK_SYM */
//  if (yyn == 892)
//    /* "sql_yacc.y":7411  */
//                      { yyval= HA_SM_DISK; };
			break;

		case 893: /* storage_media: MEMORY_SYM */
//  if (yyn == 893)
//    /* "sql_yacc.y":7412  */
//                      { yyval= HA_SM_MEMORY; };
			break;

		case 894: /* now: NOW_SYM func_datetime_precision */
//  if (yyn == 894)
//    /* "sql_yacc.y":7417  */
//          {
//            yyval= ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 895: /* now_or_signed_literal: now */
//  if (yyn == 895)
//    /* "sql_yacc.y":7423  */
//          {
//            yyval= NEW_PTN Item_func_now_local((yyloc), static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 899: /* charset_name: ident_or_text */
//  if (yyn == 899)
//    /* "sql_yacc.y":7436  */
//          {
//            if (!(yyval=get_charset_by_csname(((lexer.lex_str)(yystack.valueAt (0))).str,MY_CS_PRIMARY,MYF(0))))
//            {
//              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//            YYLIP->warn_on_deprecated_charset(yyval, ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 900: /* charset_name: BINARY_SYM */
//  if (yyn == 900)
//    /* "sql_yacc.y":7444  */
//                     { yyval= &my_charset_bin; };
			break;

		case 901: /* opt_load_data_charset: %empty */
//  if (yyn == 901)
//    /* "sql_yacc.y":7448  */
//                 { yyval= nullptr; };
			break;

		case 902: /* opt_load_data_charset: character_set charset_name */
//  if (yyn == 902)
//    /* "sql_yacc.y":7449  */
//                                     { yyval = ((lexer.charset)(yystack.valueAt (0))); };
			break;

		case 903: /* old_or_new_charset_name: ident_or_text */
//  if (yyn == 903)
//    /* "sql_yacc.y":7454  */
//          {
//            if (!(yyval=get_charset_by_csname(((lexer.lex_str)(yystack.valueAt (0))).str,MY_CS_PRIMARY,MYF(0))) &&
//                !(yyval=get_old_charset_by_name(((lexer.lex_str)(yystack.valueAt (0))).str)))
//            {
//              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 904: /* old_or_new_charset_name: BINARY_SYM */
//  if (yyn == 904)
//    /* "sql_yacc.y":7462  */
//                     { yyval= &my_charset_bin; };
			break;

		case 905: /* old_or_new_charset_name_or_default: old_or_new_charset_name */
//  if (yyn == 905)
//    /* "sql_yacc.y":7466  */
//                                  { yyval=((lexer.charset)(yystack.valueAt (0)));   };
			break;

		case 906: /* old_or_new_charset_name_or_default: DEFAULT_SYM */
//  if (yyn == 906)
//    /* "sql_yacc.y":7467  */
//                         { yyval=nullptr; };
			break;

		case 907: /* collation_name: ident_or_text */
//  if (yyn == 907)
//    /* "sql_yacc.y":7472  */
//          {
//            if (!(yyval= mysqld_collation_get_by_name(((lexer.lex_str)(yystack.valueAt (0))).str)))
//              MYSQL_YYABORT;
//            YYLIP->warn_on_deprecated_collation(yyval);
//          };
			break;

		case 908: /* collation_name: BINARY_SYM */
//  if (yyn == 908)
//    /* "sql_yacc.y":7477  */
//                     { yyval= &my_charset_bin; };
			break;

		case 909: /* opt_collate: %empty */
//  if (yyn == 909)
//    /* "sql_yacc.y":7481  */
//                 { yyval = nullptr; };
			break;

		case 910: /* opt_collate: COLLATE_SYM collation_name */
//  if (yyn == 910)
//    /* "sql_yacc.y":7482  */
//                                     { yyval = ((lexer.charset)(yystack.valueAt (0))); };
			break;

		case 911: /* opt_default: %empty */
//  if (yyn == 911)
//    /* "sql_yacc.y":7486  */
//                 {};
			break;

		case 912: /* opt_default: DEFAULT_SYM */
//  if (yyn == 912)
//    /* "sql_yacc.y":7487  */
//                      {};
			break;

		case 913: /* ascii: ASCII_SYM */
//  if (yyn == 913)
//    /* "sql_yacc.y":7492  */
//                           {
//          push_deprecated_warn(YYTHD, "ASCII", "CHARACTER SET charset_name");
//          yyval= &my_charset_latin1;
//        };
			break;

		case 914: /* ascii: BINARY_SYM ASCII_SYM */
//  if (yyn == 914)
//    /* "sql_yacc.y":7496  */
//                               {
//            warn_about_deprecated_binary(YYTHD);
//            push_deprecated_warn(YYTHD, "ASCII", "CHARACTER SET charset_name");
//            yyval= &my_charset_latin1_bin;
//        };
			break;

		case 915: /* ascii: ASCII_SYM BINARY_SYM */
//  if (yyn == 915)
//    /* "sql_yacc.y":7501  */
//                               {
//            push_deprecated_warn(YYTHD, "ASCII", "CHARACTER SET charset_name");
//            warn_about_deprecated_binary(YYTHD);
//            yyval= &my_charset_latin1_bin;
//        };
			break;

		case 916: /* unicode: UNICODE_SYM */
//  if (yyn == 916)
//    /* "sql_yacc.y":7510  */
//          {
//            push_deprecated_warn(YYTHD, "UNICODE", "CHARACTER SET charset_name");
//            if (!(yyval= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
//            {
//              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 917: /* unicode: UNICODE_SYM BINARY_SYM */
//  if (yyn == 917)
//    /* "sql_yacc.y":7519  */
//          {
//            push_deprecated_warn(YYTHD, "UNICODE", "CHARACTER SET charset_name");
//            warn_about_deprecated_binary(YYTHD);
//            if (!(yyval= mysqld_collation_get_by_name("ucs2_bin")))
//              MYSQL_YYABORT;
//          };
			break;

		case 918: /* unicode: BINARY_SYM UNICODE_SYM */
//  if (yyn == 918)
//    /* "sql_yacc.y":7526  */
//          {
//            warn_about_deprecated_binary(YYTHD);
//            push_deprecated_warn(YYTHD, "UNICODE", "CHARACTER SET charset_name");
//            if (!(yyval= mysqld_collation_get_by_name("ucs2_bin")))
//              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
//          };
			break;

		case 919: /* opt_charset_with_opt_binary: %empty */
//  if (yyn == 919)
//    /* "sql_yacc.y":7536  */
//          {
//            yyval.charset= nullptr;
//            yyval.force_binary= false;
//          };
			break;

		case 920: /* opt_charset_with_opt_binary: ascii */
//  if (yyn == 920)
//    /* "sql_yacc.y":7541  */
//          {
//            yyval.charset= ((lexer.charset)(yystack.valueAt (0)));
//            yyval.force_binary= false;
//          };
			break;

		case 921: /* opt_charset_with_opt_binary: unicode */
//  if (yyn == 921)
//    /* "sql_yacc.y":7546  */
//          {
//            yyval.charset= ((lexer.charset)(yystack.valueAt (0)));
//            yyval.force_binary= false;
//          };
			break;

		case 922: /* opt_charset_with_opt_binary: BYTE_SYM */
//  if (yyn == 922)
//    /* "sql_yacc.y":7551  */
//          {
//            yyval.charset= &my_charset_bin;
//            yyval.force_binary= false;
//          };
			break;

		case 923: /* opt_charset_with_opt_binary: character_set charset_name opt_bin_mod */
//  if (yyn == 923)
//    /* "sql_yacc.y":7556  */
//          {
//            yyval.charset= ((is_not_empty)(yystack.valueAt (0))) ? get_bin_collation(((lexer.charset)(yystack.valueAt (1)))) : ((lexer.charset)(yystack.valueAt (1)));
//            if (yyval.charset == nullptr)
//              MYSQL_YYABORT;
//            yyval.force_binary= false;
//          };
			break;

		case 924: /* opt_charset_with_opt_binary: BINARY_SYM */
//  if (yyn == 924)
//    /* "sql_yacc.y":7563  */
//          {
//            warn_about_deprecated_binary(YYTHD);
//            yyval.charset= nullptr;
//            yyval.force_binary= true;
//          };
			break;

		case 925: /* opt_charset_with_opt_binary: BINARY_SYM character_set charset_name */
//  if (yyn == 925)
//    /* "sql_yacc.y":7569  */
//          {
//            warn_about_deprecated_binary(YYTHD);
//            yyval.charset= get_bin_collation(((lexer.charset)(yystack.valueAt (0))));
//            if (yyval.charset == nullptr)
//              MYSQL_YYABORT;
//            yyval.force_binary= false;
//          };
			break;

		case 926: /* opt_bin_mod: %empty */
//  if (yyn == 926)
//    /* "sql_yacc.y":7579  */
//                 { yyval= false; };
			break;

		case 927: /* opt_bin_mod: BINARY_SYM */
//  if (yyn == 927)
//    /* "sql_yacc.y":7580  */
//                     {
//            warn_about_deprecated_binary(YYTHD);
//            yyval= true;
//          };
			break;

		case 928: /* $@36: %empty */
//  if (yyn == 928)
//    /* "sql_yacc.y":7588  */
//        {
//          if (((ulong_num)(yystack.valueAt (0))) == 0)
//          {
//            YYTHD->syntax_error();
//            MYSQL_YYABORT;
//          }
//        };
			break;

		case 929: /* ws_num_codepoints: '(' real_ulong_num $@36 ')' */
//  if (yyn == 929)
//    /* "sql_yacc.y":7596  */
//        { yyval= ((ulong_num)(yystack.valueAt (2))); };
			break;

		case 932: /* references: REFERENCES table_ident opt_ref_list opt_match_clause opt_on_update_delete */
//  if (yyn == 932)
//    /* "sql_yacc.y":7610  */
//          {
//            yyval.table_name= ((table)(yystack.valueAt (3)));
//            yyval.reference_list= ((reference_list)(yystack.valueAt (2)));
//            yyval.fk_match_option= ((opt_match_clause)(yystack.valueAt (1)));
//            yyval.fk_update_opt= ((fk_options)(yystack.valueAt (0))).fk_update_opt;
//            yyval.fk_delete_opt= ((fk_options)(yystack.valueAt (0))).fk_delete_opt;
//          };
			break;

		case 933: /* opt_ref_list: %empty */
//  if (yyn == 933)
//    /* "sql_yacc.y":7620  */
//                 { yyval= nullptr; };
			break;

		case 934: /* opt_ref_list: '(' reference_list ')' */
//  if (yyn == 934)
//    /* "sql_yacc.y":7621  */
//                                 { yyval= ((reference_list)(yystack.valueAt (1))); };
			break;

		case 935: /* reference_list: reference_list ',' ident */
//  if (yyn == 935)
//    /* "sql_yacc.y":7626  */
//          {
//            yyval= ((reference_list)(yystack.valueAt (2)));
//            auto key= NEW_PTN Key_part_spec(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))), 0, ORDER_ASC);
//            if (key == nullptr || yyval->push_back(key))
//              MYSQL_YYABORT;
//          };
			break;

		case 936: /* reference_list: ident */
//  if (yyn == 936)
//    /* "sql_yacc.y":7633  */
//          {
//            yyval= NEW_PTN List<Key_part_spec>;
//            auto key= NEW_PTN Key_part_spec(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))), 0, ORDER_ASC);
//            if (yyval == nullptr || key == nullptr || yyval->push_back(key))
//              MYSQL_YYABORT;
//          };
			break;

		case 937: /* opt_match_clause: %empty */
//  if (yyn == 937)
//    /* "sql_yacc.y":7642  */
//                 { yyval= FK_MATCH_UNDEF; };
			break;

		case 938: /* opt_match_clause: MATCH FULL */
//  if (yyn == 938)
//    /* "sql_yacc.y":7643  */
//                           { yyval= FK_MATCH_FULL; };
			break;

		case 939: /* opt_match_clause: MATCH PARTIAL */
//  if (yyn == 939)
//    /* "sql_yacc.y":7644  */
//                           { yyval= FK_MATCH_PARTIAL; };
			break;

		case 940: /* opt_match_clause: MATCH SIMPLE_SYM */
//  if (yyn == 940)
//    /* "sql_yacc.y":7645  */
//                           { yyval= FK_MATCH_SIMPLE; };
			break;

		case 941: /* opt_on_update_delete: %empty */
//  if (yyn == 941)
//    /* "sql_yacc.y":7650  */
//          {
//            yyval.fk_update_opt= FK_OPTION_UNDEF;
//            yyval.fk_delete_opt= FK_OPTION_UNDEF;
//          };
			break;

		case 942: /* opt_on_update_delete: ON_SYM UPDATE_SYM delete_option */
//  if (yyn == 942)
//    /* "sql_yacc.y":7655  */
//          {
//            yyval.fk_update_opt= ((m_fk_option)(yystack.valueAt (0)));
//            yyval.fk_delete_opt= FK_OPTION_UNDEF;
//          };
			break;

		case 943: /* opt_on_update_delete: ON_SYM DELETE_SYM delete_option */
//  if (yyn == 943)
//    /* "sql_yacc.y":7660  */
//          {
//            yyval.fk_update_opt= FK_OPTION_UNDEF;
//            yyval.fk_delete_opt= ((m_fk_option)(yystack.valueAt (0)));
//          };
			break;

		case 944: /* opt_on_update_delete: ON_SYM UPDATE_SYM delete_option ON_SYM DELETE_SYM delete_option */
//  if (yyn == 944)
//    /* "sql_yacc.y":7666  */
//          {
//            yyval.fk_update_opt= ((m_fk_option)(yystack.valueAt (3)));
//            yyval.fk_delete_opt= ((m_fk_option)(yystack.valueAt (0)));
//          };
			break;

		case 945: /* opt_on_update_delete: ON_SYM DELETE_SYM delete_option ON_SYM UPDATE_SYM delete_option */
//  if (yyn == 945)
//    /* "sql_yacc.y":7672  */
//          {
//            yyval.fk_update_opt= ((m_fk_option)(yystack.valueAt (0)));
//            yyval.fk_delete_opt= ((m_fk_option)(yystack.valueAt (3)));
//          };
			break;

		case 946: /* delete_option: RESTRICT */
//  if (yyn == 946)
//    /* "sql_yacc.y":7679  */
//                        { yyval= FK_OPTION_RESTRICT; };
			break;

		case 947: /* delete_option: CASCADE */
//  if (yyn == 947)
//    /* "sql_yacc.y":7680  */
//                        { yyval= FK_OPTION_CASCADE; };
			break;

		case 948: /* delete_option: SET_SYM NULL_SYM */
//  if (yyn == 948)
//    /* "sql_yacc.y":7681  */
//                            { yyval= FK_OPTION_SET_NULL; };
			break;

		case 949: /* delete_option: NO_SYM ACTION */
//  if (yyn == 949)
//    /* "sql_yacc.y":7682  */
//                        { yyval= FK_OPTION_NO_ACTION; };
			break;

		case 950: /* delete_option: SET_SYM DEFAULT_SYM */
//  if (yyn == 950)
//    /* "sql_yacc.y":7683  */
//                              { yyval= FK_OPTION_DEFAULT;  };
			break;

		case 951: /* constraint_key_type: PRIMARY_SYM KEY_SYM */
//  if (yyn == 951)
//    /* "sql_yacc.y":7687  */
//                              { yyval= KEYTYPE_PRIMARY; };
			break;

		case 952: /* constraint_key_type: UNIQUE_SYM opt_key_or_index */
//  if (yyn == 952)
//    /* "sql_yacc.y":7688  */
//                                      { yyval= KEYTYPE_UNIQUE; };
			break;

		case 953: /* key_or_index: KEY_SYM */
//  if (yyn == 953)
//    /* "sql_yacc.y":7692  */
//                  {};
			break;

		case 954: /* key_or_index: INDEX_SYM */
//  if (yyn == 954)
//    /* "sql_yacc.y":7693  */
//                    {};
			break;

		case 955: /* opt_key_or_index: %empty */
//  if (yyn == 955)
//    /* "sql_yacc.y":7697  */
//                 {};
			break;

		case 957: /* keys_or_index: KEYS */
//  if (yyn == 957)
//    /* "sql_yacc.y":7702  */
//               {};
			break;

		case 958: /* keys_or_index: INDEX_SYM */
//  if (yyn == 958)
//    /* "sql_yacc.y":7703  */
//                    {};
			break;

		case 959: /* keys_or_index: INDEXES */
//  if (yyn == 959)
//    /* "sql_yacc.y":7704  */
//                  {};
			break;

		case 960: /* opt_unique: %empty */
//  if (yyn == 960)
//    /* "sql_yacc.y":7708  */
//                 { yyval= KEYTYPE_MULTIPLE; };
			break;

		case 961: /* opt_unique: UNIQUE_SYM */
//  if (yyn == 961)
//    /* "sql_yacc.y":7709  */
//                       { yyval= KEYTYPE_UNIQUE; };
			break;

		case 962: /* opt_fulltext_index_options: %empty */
//  if (yyn == 962)
//    /* "sql_yacc.y":7713  */
//                 { yyval.init(YYMEM_ROOT); };
			break;

		case 964: /* fulltext_index_options: fulltext_index_option */
//  if (yyn == 964)
//    /* "sql_yacc.y":7719  */
//          {
//            yyval.init(YYMEM_ROOT);
//            if (yyval.push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 965: /* fulltext_index_options: fulltext_index_options fulltext_index_option */
//  if (yyn == 965)
//    /* "sql_yacc.y":7725  */
//          {
//            if (((index_options)(yystack.valueAt (1))).push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval= ((index_options)(yystack.valueAt (1)));
//          };
			break;

		case 967: /* fulltext_index_option: WITH PARSER_SYM IDENT_sys */
//  if (yyn == 967)
//    /* "sql_yacc.y":7735  */
//          {
//            LEX_CSTRING plugin_name= {((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length};
//            if (!plugin_is_ready(plugin_name, MYSQL_FTPARSER_PLUGIN))
//            {
//              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//            else
//              yyval= NEW_PTN PT_fulltext_index_parser_name((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 968: /* opt_spatial_index_options: %empty */
//  if (yyn == 968)
//    /* "sql_yacc.y":7748  */
//                 { yyval.init(YYMEM_ROOT); };
			break;

		case 970: /* spatial_index_options: spatial_index_option */
//  if (yyn == 970)
//    /* "sql_yacc.y":7754  */
//          {
//            yyval.init(YYMEM_ROOT);
//            if (yyval.push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 971: /* spatial_index_options: spatial_index_options spatial_index_option */
//  if (yyn == 971)
//    /* "sql_yacc.y":7760  */
//          {
//            if (((index_options)(yystack.valueAt (1))).push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval= ((index_options)(yystack.valueAt (1)));
//          };
			break;

		case 973: /* opt_index_options: %empty */
//  if (yyn == 973)
//    /* "sql_yacc.y":7772  */
//                 { yyval.init(YYMEM_ROOT); };
			break;

		case 975: /* index_options: index_option */
//  if (yyn == 975)
//    /* "sql_yacc.y":7778  */
//          {
//            yyval.init(YYMEM_ROOT);
//            if (yyval.push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 976: /* index_options: index_options index_option */
//  if (yyn == 976)
//    /* "sql_yacc.y":7784  */
//          {
//            if (((index_options)(yystack.valueAt (1))).push_back(((index_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval= ((index_options)(yystack.valueAt (1)));
//          };
			break;

		case 977: /* index_option: common_index_option */
//  if (yyn == 977)
//    /* "sql_yacc.y":7792  */
//                              { yyval= ((index_option)(yystack.valueAt (0))); };
			break;

		case 978: /* index_option: index_type_clause */
//  if (yyn == 978)
//    /* "sql_yacc.y":7793  */
//                            { yyval= ((index_option)(yystack.valueAt (0))); };
			break;

		case 979: /* common_index_option: KEY_BLOCK_SIZE opt_equal ulong_num */
//  if (yyn == 979)
//    /* "sql_yacc.y":7798  */
//                                             { yyval= NEW_PTN PT_block_size((yyloc), ((ulong_num)(yystack.valueAt (0)))); };
			break;

		case 980: /* common_index_option: COMMENT_SYM TEXT_STRING_sys */
//  if (yyn == 980)
//    /* "sql_yacc.y":7800  */
//          {
//            yyval= NEW_PTN PT_index_comment((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 981: /* common_index_option: visibility */
//  if (yyn == 981)
//    /* "sql_yacc.y":7804  */
//          {
//            yyval= NEW_PTN PT_index_visibility((yyloc), ((visibility)(yystack.valueAt (0))));
//          };
			break;

		case 982: /* common_index_option: ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 982)
//    /* "sql_yacc.y":7808  */
//          {
//            yyval = make_index_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 983: /* common_index_option: SECONDARY_ENGINE_ATTRIBUTE_SYM opt_equal json_attribute */
//  if (yyn == 983)
//    /* "sql_yacc.y":7812  */
//          {
//            yyval = make_index_secondary_engine_attribute(YYMEM_ROOT, ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 984: /* opt_index_name_and_type: opt_ident */
//  if (yyn == 984)
//    /* "sql_yacc.y":7835  */
//                                     { yyval= {((lexer.lex_str)(yystack.valueAt (0))), nullptr}; };
			break;

		case 985: /* opt_index_name_and_type: opt_ident USING index_type */
//  if (yyn == 985)
//    /* "sql_yacc.y":7836  */
//                                     { yyval= {((lexer.lex_str)(yystack.valueAt (2))), NEW_PTN PT_index_type((yyloc), ((key_alg)(yystack.valueAt (0))))}; };
			break;

		case 986: /* opt_index_name_and_type: ident TYPE_SYM index_type */
//  if (yyn == 986)
//    /* "sql_yacc.y":7837  */
//                                     { yyval= {((lexer.lex_str)(yystack.valueAt (2))), NEW_PTN PT_index_type((yyloc), ((key_alg)(yystack.valueAt (0))))}; };
			break;

		case 987: /* opt_index_type_clause: %empty */
//  if (yyn == 987)
//    /* "sql_yacc.y":7841  */
//                 { yyval = nullptr; };
			break;

		case 989: /* index_type_clause: USING index_type */
//  if (yyn == 989)
//    /* "sql_yacc.y":7846  */
//                              { yyval= NEW_PTN PT_index_type((yyloc), ((key_alg)(yystack.valueAt (0)))); };
			break;

		case 990: /* index_type_clause: TYPE_SYM index_type */
//  if (yyn == 990)
//    /* "sql_yacc.y":7847  */
//                              { yyval= NEW_PTN PT_index_type((yyloc), ((key_alg)(yystack.valueAt (0)))); };
			break;

		case 991: /* visibility: VISIBLE_SYM */
//  if (yyn == 991)
//    /* "sql_yacc.y":7851  */
//                      { yyval= true; };
			break;

		case 992: /* visibility: INVISIBLE_SYM */
//  if (yyn == 992)
//    /* "sql_yacc.y":7852  */
//                        { yyval= false; };
			break;

		case 993: /* index_type: BTREE_SYM */
//  if (yyn == 993)
//    /* "sql_yacc.y":7856  */
//                    { yyval= HA_KEY_ALG_BTREE; };
			break;

		case 994: /* index_type: RTREE_SYM */
//  if (yyn == 994)
//    /* "sql_yacc.y":7857  */
//                    { yyval= HA_KEY_ALG_RTREE; };
			break;

		case 995: /* index_type: HASH_SYM */
//  if (yyn == 995)
//    /* "sql_yacc.y":7858  */
//                    { yyval= HA_KEY_ALG_HASH; };
			break;

		case 996: /* key_list: key_list ',' key_part */
//  if (yyn == 996)
//    /* "sql_yacc.y":7863  */
//          {
//            if (((index_column_list)(yystack.valueAt (2)))->push_back(((key_part)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval= ((index_column_list)(yystack.valueAt (2)));
//          };
			break;

		case 997: /* key_list: key_part */
//  if (yyn == 997)
//    /* "sql_yacc.y":7869  */
//          {
//            // The order is ignored.
//            yyval= NEW_PTN List<PT_key_part_specification>;
//            if (yyval == nullptr || yyval->push_back(((key_part)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 998: /* key_part: ident opt_ordering_direction */
//  if (yyn == 998)
//    /* "sql_yacc.y":7879  */
//          {
//            yyval= NEW_PTN PT_key_part_specification((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1)))), ((order_direction)(yystack.valueAt (0))), 0);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 999: /* key_part: ident '(' NUM ')' opt_ordering_direction */
//  if (yyn == 999)
//    /* "sql_yacc.y":7885  */
//          {
//            int key_part_length= atoi(((lexer.lex_str)(yystack.valueAt (2))).str);
//            if (!key_part_length)
//            {
//              my_error(ER_KEY_PART_0, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//            }
//            yyval= NEW_PTN PT_key_part_specification((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (4)))), ((order_direction)(yystack.valueAt (0))),
//                                                  key_part_length);
//            if (yyval == nullptr)
//              MYSQL_YYABORT; /* purecov: deadcode */
//          };
			break;

		case 1000: /* key_list_with_expression: key_list_with_expression ',' key_part_with_expression */
//  if (yyn == 1000)
//    /* "sql_yacc.y":7900  */
//          {
//            if (((index_column_list)(yystack.valueAt (2)))->push_back(((key_part)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: deadcode */
//            yyval= ((index_column_list)(yystack.valueAt (2)));
//          };
			break;

		case 1001: /* key_list_with_expression: key_part_with_expression */
//  if (yyn == 1001)
//    /* "sql_yacc.y":7906  */
//          {
//            // The order is ignored.
//            yyval= NEW_PTN List<PT_key_part_specification>;
//            if (yyval == nullptr || yyval->push_back(((key_part)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: deadcode */
//          };
			break;

		case 1003: /* key_part_with_expression: '(' expr ')' opt_ordering_direction */
//  if (yyn == 1003)
//    /* "sql_yacc.y":7917  */
//          {
//            yyval= NEW_PTN PT_key_part_specification((yyloc), ((item)(yystack.valueAt (2))), ((order_direction)(yystack.valueAt (0))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1004: /* opt_ident: %empty */
//  if (yyn == 1004)
//    /* "sql_yacc.y":7925  */
//                 { yyval= NULL_STR; };
			break;

		case 1006: /* string_list: text_string */
//  if (yyn == 1006)
//    /* "sql_yacc.y":7931  */
//          {
//            yyval= NEW_PTN List<String>;
//            if (yyval == nullptr || yyval->push_back(((string)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1007: /* string_list: string_list ',' text_string */
//  if (yyn == 1007)
//    /* "sql_yacc.y":7937  */
//          {
//            if (yyval->push_back(((string)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1008: /* alter_table_stmt: ALTER TABLE_SYM table_ident opt_alter_table_actions */
//  if (yyn == 1008)
//    /* "sql_yacc.y":7949  */
//          {
//            yyval= NEW_PTN PT_alter_table_stmt(
//                  (yyloc),
//                  YYMEM_ROOT,
//                  ((table)(yystack.valueAt (1))),
//                  ((alter_list)(yystack.valueAt (0))).actions,
//                  ((alter_list)(yystack.valueAt (0))).flags.algo.get_or_default(),
//                  ((alter_list)(yystack.valueAt (0))).flags.lock.get_or_default(),
//                  ((alter_list)(yystack.valueAt (0))).flags.validation.get_or_default());
//          };
			break;

		case 1009: /* alter_table_stmt: ALTER TABLE_SYM table_ident standalone_alter_table_action */
//  if (yyn == 1009)
//    /* "sql_yacc.y":7960  */
//          {
//            yyval= NEW_PTN PT_alter_table_standalone_stmt(
//                  (yyloc),
//                  YYMEM_ROOT,
//                  ((table)(yystack.valueAt (1))),
//                  ((standalone_alter_table_action)(yystack.valueAt (0))).action,
//                  ((standalone_alter_table_action)(yystack.valueAt (0))).flags.algo.get_or_default(),
//                  ((standalone_alter_table_action)(yystack.valueAt (0))).flags.lock.get_or_default(),
//                  ((standalone_alter_table_action)(yystack.valueAt (0))).flags.validation.get_or_default());
//          };
			break;

		case 1010: /* $@37: %empty */
//  if (yyn == 1010)
//    /* "sql_yacc.y":7974  */
//          {
//            Lex->create_info= YYTHD->alloc_typed<HA_CREATE_INFO>();
//            if (Lex->create_info == nullptr)
//              MYSQL_YYABORT; // OOM
//            Lex->create_info->default_table_charset= nullptr;
//            Lex->create_info->used_fields= 0;
//          };
			break;

		case 1011: /* alter_database_stmt: ALTER DATABASE ident_or_empty $@37 alter_database_options */
			if (yyn == 1011)
			/* "sql_yacc.y":7982 */
			{
//            LEX *lex=Lex;
//            lex->sql_command=SQLCOM_ALTER_DB;
//            lex->name= ((lexer.lex_str)(yystack.valueAt (2)));
//            if (lex->name.str == nullptr &&
//                lex->copy_db_to(&lex->name.str, &lex->name.length))
//              MYSQL_YYABORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_DB;
			}
			;
			break;

		case 1012: /* $@38: %empty */
//  if (yyn == 1012)
//    /* "sql_yacc.y":7994  */
//          {
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
//              MYSQL_YYABORT;
//            }
//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
//          };
			break;

		case 1013: /* alter_procedure_stmt: ALTER PROCEDURE_SYM sp_name $@38 sp_a_chistics */
			if (yyn == 1013)
			/* "sql_yacc.y":8005 */
			{
//            LEX *lex=Lex;

//            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
//            lex->spname= ((spname)(yystack.valueAt (2)));
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_PROCEDURE;
			}
			;
			break;

		case 1014: /* $@39: %empty */
//  if (yyn == 1014)
//    /* "sql_yacc.y":8016  */
//          {
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
//              MYSQL_YYABORT;
//            }
//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
//          };
			break;

		case 1015: /* alter_function_stmt: ALTER FUNCTION_SYM sp_name $@39 sp_a_chistics */
			if (yyn == 1015)
			/* "sql_yacc.y":8027 */
			{
//            LEX *lex=Lex;

//            lex->sql_command= SQLCOM_ALTER_FUNCTION;
//            lex->spname= ((spname)(yystack.valueAt (2)));
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_FUNCTION;
			}
			;
			break;

		case 1016: /* $@40: %empty */
//  if (yyn == 1016)
//    /* "sql_yacc.y":8038  */
//          {
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
//              MYSQL_YYABORT;
//            }
//            lex->create_view_mode= enum_view_create_mode::VIEW_ALTER;
//          };
			break;

		case 1017: /* alter_view_stmt: ALTER view_algorithm definer_opt $@40 view_tail */
//  if (yyn == 1017)
//    /* "sql_yacc.y":8049  */
//          {
//            MAKE_CMD_DDL_DUMMY();
//          };
			break;

		case 1018: /* $@41: %empty */
//  if (yyn == 1018)
//    /* "sql_yacc.y":8058  */
//          {
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
//              MYSQL_YYABORT;
//            }
//            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
//            lex->create_view_mode= enum_view_create_mode::VIEW_ALTER;
//          };
			break;

		case 1019: /* alter_view_stmt: ALTER definer_opt $@41 view_tail */
//  if (yyn == 1019)
//    /* "sql_yacc.y":8070  */
//          {
//            MAKE_CMD_DDL_DUMMY();
//          };
			break;

		case 1020: /* $@42: %empty */
			if (yyn == 1020)
			/* "sql_yacc.y":8077 */
			{
//            /*
//              It is safe to use Lex->spname because
//              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
//              is not allowed. Lex->spname is used in the case of RENAME TO
//              If it had to be supported spname had to be added to
//              Event_parse_data.
//            */

//            if (!(Lex->event_parse_data= new (YYTHD->mem_root) Event_parse_data()))
//              MYSQL_YYABORT;
//            Lex->event_parse_data->identifier= ((spname)(yystack.valueAt (0)));

//            Lex->sql_command= SQLCOM_ALTER_EVENT;
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_EVENT;
			}
			;
			break;

		case 1021: /* alter_event_stmt: ALTER definer_opt EVENT_SYM sp_name $@42 ev_alter_on_schedule_completion opt_ev_rename_to opt_ev_status opt_ev_comment opt_ev_sql_stmt */
			if (yyn == 1021)
			/* "sql_yacc.y":8098 */
			{
//            if (!(((num)(yystack.valueAt (4))) || ((num)(yystack.valueAt (3))) || ((num)(yystack.valueAt (2))) || ((num)(yystack.valueAt (1))) || ((num)(yystack.valueAt (0)))))
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            /*
//              sql_command is set here because some rules in ev_sql_stmt
//              can overwrite it
//            */
//            Lex->sql_command= SQLCOM_ALTER_EVENT;

//            /*
//              assert that even if sql_command was overwritten,
//              m_sql_cmd was not changed to a different command-type.
//            */
//            assert(Lex->m_sql_cmd->sql_cmd_type() == SQL_CMD_DDL);
//            assert(Lex->m_sql_cmd->sql_command_code() == SQLCOM_ALTER_EVENT);
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_EVENT;
			}
			;
			break;

		case 1022: /* alter_logfile_stmt: ALTER LOGFILE_SYM GROUP_SYM ident ADD lg_undofile opt_alter_logfile_group_options */
			if (yyn == 1022)
			/* "sql_yacc.y":8122 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }

//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_logfile_group{ALTER_LOGFILE_GROUP,
//                                                          ((lexer.lex_str)(yystack.valueAt (3))), pc, ((lexer.lex_str)(yystack.valueAt (1)))};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ //OOM

//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1023: /* alter_tablespace_stmt: ALTER TABLESPACE_SYM ident ADD ts_datafile opt_alter_tablespace_options */
			if (yyn == 1023)
			/* "sql_yacc.y":8144 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }

//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_alter_tablespace_add_datafile{((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1024: /* alter_tablespace_stmt: ALTER TABLESPACE_SYM ident DROP ts_datafile opt_alter_tablespace_options */
			if (yyn == 1024)
			/* "sql_yacc.y":8163 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }

//            Lex->m_sql_cmd=
//              NEW_PTN Sql_cmd_alter_tablespace_drop_datafile{((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1025: /* alter_tablespace_stmt: ALTER TABLESPACE_SYM ident RENAME TO_SYM ident */
			if (yyn == 1025)
			/* "sql_yacc.y":8182 */
			{
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_alter_tablespace_rename{((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (0)))};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; // OOM

//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1026: /* alter_tablespace_stmt: ALTER TABLESPACE_SYM ident alter_tablespace_option_list */
			if (yyn == 1026)
			/* "sql_yacc.y":8190 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT;
//            }

//            Lex->m_sql_cmd=
//              NEW_PTN Sql_cmd_alter_tablespace{((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; // OOM

//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1027: /* alter_undo_tablespace_stmt: ALTER UNDO_SYM TABLESPACE_SYM ident SET_SYM undo_tablespace_state opt_undo_tablespace_options */
			if (yyn == 1027)
			/* "sql_yacc.y":8213 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT;
//            }

//            auto cmd= NEW_PTN Sql_cmd_alter_undo_tablespace{
//              ALTER_UNDO_TABLESPACE, ((lexer.lex_str)(yystack.valueAt (3))),
//              {nullptr, 0}, pc, ((alter_tablespace_type)(yystack.valueAt (1)))};
//            if (!cmd)
//              MYSQL_YYABORT; //OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1028: /* alter_server_stmt: ALTER SERVER_SYM ident_or_text OPTIONS_SYM '(' server_options_list ')' */
			if (yyn == 1028)
			/* "sql_yacc.y":8236 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_ALTER_SERVER;
//            lex->server_options.m_server_name= ((lexer.lex_str)(yystack.valueAt (4)));
//            lex->m_sql_cmd=
//              NEW_PTN Sql_cmd_alter_server(&Lex->server_options);
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_SERVER;
			}
			;
			break;

		case 1030: /* alter_user_stmt: alter_user_command user_func identified_by_random_password opt_replace_password opt_retain_current_password */
//  if (yyn == 1030)
//    /* "sql_yacc.y":8251  */
//          {
//            ((lex_user)(yystack.valueAt (3)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (2)));

//            if (((lex_cstr)(yystack.valueAt (1))).str != nullptr) {
//              ((lex_user)(yystack.valueAt (3)))->current_auth = ((lex_cstr)(yystack.valueAt (1)));
//              ((lex_user)(yystack.valueAt (3)))->uses_replace_clause = true;
//            }
//            ((lex_user)(yystack.valueAt (3)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (3)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 1031: /* alter_user_stmt: alter_user_command user_func identified_by_password opt_replace_password opt_retain_current_password */
//  if (yyn == 1031)
//    /* "sql_yacc.y":8263  */
//          {
//            ((lex_user)(yystack.valueAt (3)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (2)));

//            if (((lex_cstr)(yystack.valueAt (1))).str != nullptr) {
//              ((lex_user)(yystack.valueAt (3)))->current_auth = ((lex_cstr)(yystack.valueAt (1)));
//              ((lex_user)(yystack.valueAt (3)))->uses_replace_clause = true;
//            }
//            ((lex_user)(yystack.valueAt (3)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (3)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 1032: /* alter_user_stmt: alter_user_command user_func DISCARD_SYM OLD_SYM PASSWORD */
//  if (yyn == 1032)
//    /* "sql_yacc.y":8274  */
//          {
//            ((lex_user)(yystack.valueAt (3)))->discard_old_password = true;
//            ((lex_user)(yystack.valueAt (3)))->retain_current_password = false;
//          };
			break;

		case 1033: /* alter_user_stmt: alter_user_command user DEFAULT_SYM ROLE_SYM ALL */
//  if (yyn == 1033)
//    /* "sql_yacc.y":8279  */
//          {
//            List<LEX_USER> *users= new (YYMEM_ROOT) List<LEX_USER>;
//            if (users == nullptr || users->push_back(((lex_user)(yystack.valueAt (3)))))
//              MYSQL_YYABORT;
//            List<LEX_USER> *role_list= new (YYMEM_ROOT) List<LEX_USER>;
//            auto *tmp=
//                NEW_PTN PT_alter_user_default_role((yyloc), Lex->drop_if_exists,
//                                                   users, role_list,
//                                                   role_enum::ROLE_ALL);
//              MAKE_CMD(tmp);
//          };
			break;

		case 1034: /* alter_user_stmt: alter_user_command user DEFAULT_SYM ROLE_SYM NONE_SYM */
//  if (yyn == 1034)
//    /* "sql_yacc.y":8291  */
//          {
//            List<LEX_USER> *users= new (YYMEM_ROOT) List<LEX_USER>;
//            if (users == nullptr || users->push_back(((lex_user)(yystack.valueAt (3)))))
//              MYSQL_YYABORT;
//            List<LEX_USER> *role_list= new (YYMEM_ROOT) List<LEX_USER>;
//            auto *tmp=
//                NEW_PTN PT_alter_user_default_role((yyloc), Lex->drop_if_exists,
//                                                   users, role_list,
//                                                   role_enum::ROLE_NONE);
//              MAKE_CMD(tmp);
//          };
			break;

		case 1035: /* alter_user_stmt: alter_user_command user DEFAULT_SYM ROLE_SYM role_list */
//  if (yyn == 1035)
//    /* "sql_yacc.y":8303  */
//          {
//            List<LEX_USER> *users= new (YYMEM_ROOT) List<LEX_USER>;
//            if (users == nullptr || users->push_back(((lex_user)(yystack.valueAt (3)))))
//              MYSQL_YYABORT;
//            auto *tmp=
//              NEW_PTN PT_alter_user_default_role((yyloc), Lex->drop_if_exists,
//                                                 users, ((user_list)(yystack.valueAt (0))),
//                                                 role_enum::ROLE_NAME);
//            MAKE_CMD(tmp);
//          };
			break;

		case 1036: /* alter_user_stmt: alter_user_command user opt_user_registration */
//  if (yyn == 1036)
//    /* "sql_yacc.y":8314  */
//          {
//            if (((lex_user)(yystack.valueAt (1)))->mfa_list.push_back(((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//            LEX *lex=Lex;
//            lex->users_list.push_front (((lex_user)(yystack.valueAt (1))));
//          };
			break;

		case 1037: /* alter_user_stmt: alter_user_command user_func opt_user_registration */
//  if (yyn == 1037)
//    /* "sql_yacc.y":8321  */
//          {
//            if (((lex_user)(yystack.valueAt (1)))->mfa_list.push_back(((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 1038: /* opt_replace_password: %empty */
//  if (yyn == 1038)
//    /* "sql_yacc.y":8328  */
//                 { yyval = LEX_CSTRING{nullptr, 0}; };
			break;

		case 1039: /* opt_replace_password: REPLACE_SYM TEXT_STRING_password */
//  if (yyn == 1039)
//    /* "sql_yacc.y":8329  */
//                                            { yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 1040: /*
					 * alter_resource_group_stmt: ALTER RESOURCE_SYM GROUP_SYM ident opt_resource_group_vcpu_list opt_resource_group_priority opt_resource_group_enable_disable
					 * opt_force
					 */
//  if (yyn == 1040)
//    /* "sql_yacc.y":8336  */
//          {
//            yyval= NEW_PTN PT_alter_resource_group((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (4)))),
//                                                ((resource_group_vcpu_list_type)(yystack.valueAt (3))), ((resource_group_priority_type)(yystack.valueAt (2))), ((resource_group_state_type)(yystack.valueAt (1))), ((resource_group_flag_type)(yystack.valueAt (0))));
//          };
			break;

		case 1041: /* alter_user_command: ALTER USER if_exists */
			if (yyn == 1041)
			/* "sql_yacc.y":8344 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_ALTER_USER;
//            lex->drop_if_exists= ((num)(yystack.valueAt (0)));
//            MAKE_CMD_DCL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_USER;
			}
			;
			break;

		case 1042: /* opt_user_attribute: %empty */
//  if (yyn == 1042)
//    /* "sql_yacc.y":8354  */
//          {
//            LEX *lex= Lex;
//            lex->alter_user_attribute =
//              enum_alter_user_attribute::ALTER_USER_COMMENT_NOT_USED;
//          };
			break;

		case 1043: /* opt_user_attribute: ATTRIBUTE_SYM TEXT_STRING_literal */
//  if (yyn == 1043)
//    /* "sql_yacc.y":8360  */
//          {
//            LEX *lex= Lex;
//            lex->alter_user_attribute =
//              enum_alter_user_attribute::ALTER_USER_ATTRIBUTE;
//            lex->alter_user_comment_text = ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 1044: /* opt_user_attribute: COMMENT_SYM TEXT_STRING_literal */
//  if (yyn == 1044)
//    /* "sql_yacc.y":8367  */
//          {
//            LEX *lex= Lex;
//            lex->alter_user_attribute =
//              enum_alter_user_attribute::ALTER_USER_COMMENT;
//            lex->alter_user_comment_text = ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 1045: /* opt_account_lock_password_expire_options: %empty */
//  if (yyn == 1045)
//    /* "sql_yacc.y":8375  */
//                 {};
			break;

		case 1049: /* opt_account_lock_password_expire_option: ACCOUNT_SYM UNLOCK_SYM */
//  if (yyn == 1049)
//    /* "sql_yacc.y":8386  */
//          {
//            LEX *lex=Lex;
//            lex->alter_password.update_account_locked_column= true;
//            lex->alter_password.account_locked= false;
//          };
			break;

		case 1050: /* opt_account_lock_password_expire_option: ACCOUNT_SYM LOCK_SYM */
//  if (yyn == 1050)
//    /* "sql_yacc.y":8392  */
//          {
//            LEX *lex=Lex;
//            lex->alter_password.update_account_locked_column= true;
//            lex->alter_password.account_locked= true;
//          };
			break;

		case 1051: /* opt_account_lock_password_expire_option: PASSWORD EXPIRE_SYM */
//  if (yyn == 1051)
//    /* "sql_yacc.y":8398  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.expire_after_days= 0;
//            lex->alter_password.update_password_expired_column= true;
//            lex->alter_password.update_password_expired_fields= true;
//            lex->alter_password.use_default_password_lifetime= true;
//          };
			break;

		case 1052: /* opt_account_lock_password_expire_option: PASSWORD EXPIRE_SYM INTERVAL_SYM real_ulong_num DAY_SYM */
//  if (yyn == 1052)
//    /* "sql_yacc.y":8406  */
//          {
//            LEX *lex= Lex;
//            if (((ulong_num)(yystack.valueAt (1))) == 0 || ((ulong_num)(yystack.valueAt (1))) > UINT_MAX16)
//            {
//              char buf[MAX_BIGINT_WIDTH + 1];
//              snprintf(buf, sizeof(buf), "%lu", ((ulong_num)(yystack.valueAt (1))));
//              my_error(ER_WRONG_VALUE, MYF(0), "DAY", buf);
//              MYSQL_YYABORT;
//            }
//            lex->alter_password.expire_after_days= ((ulong_num)(yystack.valueAt (1)));
//            lex->alter_password.update_password_expired_column= false;
//            lex->alter_password.update_password_expired_fields= true;
//            lex->alter_password.use_default_password_lifetime= false;
//          };
			break;

		case 1053: /* opt_account_lock_password_expire_option: PASSWORD EXPIRE_SYM NEVER_SYM */
//  if (yyn == 1053)
//    /* "sql_yacc.y":8421  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.expire_after_days= 0;
//            lex->alter_password.update_password_expired_column= false;
//            lex->alter_password.update_password_expired_fields= true;
//            lex->alter_password.use_default_password_lifetime= false;
//          };
			break;

		case 1054: /* opt_account_lock_password_expire_option: PASSWORD EXPIRE_SYM DEFAULT_SYM */
//  if (yyn == 1054)
//    /* "sql_yacc.y":8429  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.expire_after_days= 0;
//            lex->alter_password.update_password_expired_column= false;
//            Lex->alter_password.update_password_expired_fields= true;
//            lex->alter_password.use_default_password_lifetime= true;
//          };
			break;

		case 1055: /* opt_account_lock_password_expire_option: PASSWORD HISTORY_SYM real_ulong_num */
//  if (yyn == 1055)
//    /* "sql_yacc.y":8437  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.password_history_length= ((ulong_num)(yystack.valueAt (0)));
//            lex->alter_password.update_password_history= true;
//            lex->alter_password.use_default_password_history= false;
//          };
			break;

		case 1056: /* opt_account_lock_password_expire_option: PASSWORD HISTORY_SYM DEFAULT_SYM */
//  if (yyn == 1056)
//    /* "sql_yacc.y":8444  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.password_history_length= 0;
//            lex->alter_password.update_password_history= true;
//            lex->alter_password.use_default_password_history= true;
//          };
			break;

		case 1057: /* opt_account_lock_password_expire_option: PASSWORD REUSE_SYM INTERVAL_SYM real_ulong_num DAY_SYM */
//  if (yyn == 1057)
//    /* "sql_yacc.y":8451  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.password_reuse_interval= ((ulong_num)(yystack.valueAt (1)));
//            lex->alter_password.update_password_reuse_interval= true;
//            lex->alter_password.use_default_password_reuse_interval= false;
//          };
			break;

		case 1058: /* opt_account_lock_password_expire_option: PASSWORD REUSE_SYM INTERVAL_SYM DEFAULT_SYM */
//  if (yyn == 1058)
//    /* "sql_yacc.y":8458  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.password_reuse_interval= 0;
//            lex->alter_password.update_password_reuse_interval= true;
//            lex->alter_password.use_default_password_reuse_interval= true;
//          };
			break;

		case 1059: /* opt_account_lock_password_expire_option: PASSWORD REQUIRE_SYM CURRENT_SYM */
//  if (yyn == 1059)
//    /* "sql_yacc.y":8465  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.update_password_require_current=
//                Lex_acl_attrib_udyn::YES;
//          };
			break;

		case 1060: /* opt_account_lock_password_expire_option: PASSWORD REQUIRE_SYM CURRENT_SYM DEFAULT_SYM */
//  if (yyn == 1060)
//    /* "sql_yacc.y":8471  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.update_password_require_current=
//                Lex_acl_attrib_udyn::DEFAULT;
//          };
			break;

		case 1061: /* opt_account_lock_password_expire_option: PASSWORD REQUIRE_SYM CURRENT_SYM OPTIONAL_SYM */
//  if (yyn == 1061)
//    /* "sql_yacc.y":8477  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.update_password_require_current=
//                Lex_acl_attrib_udyn::NO;
//          };
			break;

		case 1062: /* opt_account_lock_password_expire_option: FAILED_LOGIN_ATTEMPTS_SYM real_ulong_num */
//  if (yyn == 1062)
//    /* "sql_yacc.y":8483  */
//          {
//            LEX *lex= Lex;
//            if (((ulong_num)(yystack.valueAt (0))) > INT_MAX16) {
//              char buf[MAX_BIGINT_WIDTH + 1];
//              snprintf(buf, sizeof(buf), "%lu", ((ulong_num)(yystack.valueAt (0))));
//              my_error(ER_WRONG_VALUE, MYF(0), "FAILED_LOGIN_ATTEMPTS", buf);
//              MYSQL_YYABORT;
//            }
//            lex->alter_password.update_failed_login_attempts= true;
//            lex->alter_password.failed_login_attempts= ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 1063: /* opt_account_lock_password_expire_option: PASSWORD_LOCK_TIME_SYM real_ulong_num */
//  if (yyn == 1063)
//    /* "sql_yacc.y":8495  */
//          {
//            LEX *lex= Lex;
//            if (((ulong_num)(yystack.valueAt (0))) > INT_MAX16) {
//              char buf[MAX_BIGINT_WIDTH + 1];
//              snprintf(buf, sizeof(buf), "%lu", ((ulong_num)(yystack.valueAt (0))));
//              my_error(ER_WRONG_VALUE, MYF(0), "PASSWORD_LOCK_TIME", buf);
//              MYSQL_YYABORT;
//            }
//            lex->alter_password.update_password_lock_time= true;
//            lex->alter_password.password_lock_time= ((ulong_num)(yystack.valueAt (0)));
//          };
			break;

		case 1064: /* opt_account_lock_password_expire_option: PASSWORD_LOCK_TIME_SYM UNBOUNDED_SYM */
//  if (yyn == 1064)
//    /* "sql_yacc.y":8507  */
//          {
//            LEX *lex= Lex;
//            lex->alter_password.update_password_lock_time= true;
//            lex->alter_password.password_lock_time= -1;
//          };
			break;

		case 1065: /* connect_options: %empty */
//  if (yyn == 1065)
//    /* "sql_yacc.y":8515  */
//                 {};
			break;

		case 1067: /* connect_option_list: connect_option_list connect_option */
//  if (yyn == 1067)
//    /* "sql_yacc.y":8520  */
//                                             {};
			break;

		case 1068: /* connect_option_list: connect_option */
//  if (yyn == 1068)
//    /* "sql_yacc.y":8521  */
//                         {};
			break;

		case 1069: /* connect_option: MAX_QUERIES_PER_HOUR ulong_num */
//  if (yyn == 1069)
//    /* "sql_yacc.y":8526  */
//          {
//            LEX *lex=Lex;
//            lex->mqh.questions=((ulong_num)(yystack.valueAt (0)));
//            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
//          };
			break;

		case 1070: /* connect_option: MAX_UPDATES_PER_HOUR ulong_num */
//  if (yyn == 1070)
//    /* "sql_yacc.y":8532  */
//          {
//            LEX *lex=Lex;
//            lex->mqh.updates=((ulong_num)(yystack.valueAt (0)));
//            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
//          };
			break;

		case 1071: /* connect_option: MAX_CONNECTIONS_PER_HOUR ulong_num */
//  if (yyn == 1071)
//    /* "sql_yacc.y":8538  */
//          {
//            LEX *lex=Lex;
//            lex->mqh.conn_per_hour= ((ulong_num)(yystack.valueAt (0)));
//            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
//          };
			break;

		case 1072: /* connect_option: MAX_USER_CONNECTIONS_SYM ulong_num */
//  if (yyn == 1072)
//    /* "sql_yacc.y":8544  */
//          {
//            LEX *lex=Lex;
//            lex->mqh.user_conn= ((ulong_num)(yystack.valueAt (0)));
//            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
//          };
			break;

		case 1073: /* user_func: USER '(' ')' */
//  if (yyn == 1073)
//    /* "sql_yacc.y":8553  */
//          {
//            /* empty LEX_USER means current_user */
//            LEX_USER *curr_user;
//            if (!(curr_user= LEX_USER::alloc(YYTHD)))
//              MYSQL_YYABORT;

//            Lex->users_list.push_back(curr_user);
//            yyval= curr_user;
//          };
			break;

		case 1074: /* ev_alter_on_schedule_completion: %empty */
//  if (yyn == 1074)
//    /* "sql_yacc.y":8565  */
//                 { yyval= 0;};
			break;

		case 1075: /* ev_alter_on_schedule_completion: ON_SYM SCHEDULE_SYM ev_schedule_time */
//  if (yyn == 1075)
//    /* "sql_yacc.y":8566  */
//                                               { yyval= 1; };
			break;

		case 1076: /* ev_alter_on_schedule_completion: ev_on_completion */
//  if (yyn == 1076)
//    /* "sql_yacc.y":8567  */
//                           { yyval= 1; };
			break;

		case 1077: /* ev_alter_on_schedule_completion: ON_SYM SCHEDULE_SYM ev_schedule_time ev_on_completion */
//  if (yyn == 1077)
//    /* "sql_yacc.y":8568  */
//                                                                { yyval= 1; };
			break;

		case 1078: /* opt_ev_rename_to: %empty */
//  if (yyn == 1078)
//    /* "sql_yacc.y":8572  */
//                 { yyval= 0;};
			break;

		case 1079: /* opt_ev_rename_to: RENAME TO_SYM sp_name */
//  if (yyn == 1079)
//    /* "sql_yacc.y":8574  */
//          {
//            /*
//              Use lex's spname to hold the new name.
//              The original name is in the Event_parse_data object
//            */
//            Lex->spname= ((spname)(yystack.valueAt (0)));
//            yyval= 1;
//          };
			break;

		case 1080: /* opt_ev_sql_stmt: %empty */
//  if (yyn == 1080)
//    /* "sql_yacc.y":8585  */
//                 { yyval= 0;};
			break;

		case 1081: /* opt_ev_sql_stmt: DO_SYM ev_sql_stmt */
//  if (yyn == 1081)
//    /* "sql_yacc.y":8586  */
//                             { yyval= 1; };
			break;

		case 1082: /* ident_or_empty: %empty */
//  if (yyn == 1082)
//    /* "sql_yacc.y":8590  */
//                 { yyval.str= nullptr; yyval.length= 0; };
			break;

		case 1083: /* ident_or_empty: ident */
//  if (yyn == 1083)
//    /* "sql_yacc.y":8591  */
//                { yyval= ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 1085: /* opt_alter_table_actions: opt_alter_command_list alter_table_partition_options */
//  if (yyn == 1085)
//    /* "sql_yacc.y":8597  */
//          {
//            yyval= ((alter_list)(yystack.valueAt (1)));
//            if (yyval.actions == nullptr)
//            {
//              yyval.actions= NEW_PTN Mem_root_array<PT_ddl_table_option *>(YYMEM_ROOT);
//              if (yyval.actions == nullptr)
//                MYSQL_YYABORT; // OOM
//            }
//            if (yyval.actions->push_back(((alter_table_action)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1086: /* standalone_alter_table_action: standalone_alter_commands */
//  if (yyn == 1086)
//    /* "sql_yacc.y":8612  */
//          {
//            yyval.flags.init();
//            yyval.action= ((alter_table_standalone_action)(yystack.valueAt (0)));
//          };
			break;

		case 1087: /* standalone_alter_table_action: alter_commands_modifier_list ',' standalone_alter_commands */
//  if (yyn == 1087)
//    /* "sql_yacc.y":8617  */
//          {
//            yyval.flags= ((algo_and_lock_and_validation)(yystack.valueAt (2)));
//            yyval.action= ((alter_table_standalone_action)(yystack.valueAt (0)));
//          };
			break;

		case 1088: /* alter_table_partition_options: partition_clause */
//  if (yyn == 1088)
//    /* "sql_yacc.y":8625  */
//          {
//            yyval= NEW_PTN PT_alter_table_partition_by((yyloc), ((partition_clause)(yystack.valueAt (0))));
//          };
			break;

		case 1089: /* alter_table_partition_options: REMOVE_SYM PARTITIONING_SYM */
//  if (yyn == 1089)
//    /* "sql_yacc.y":8629  */
//          {
//            yyval= NEW_PTN PT_alter_table_remove_partitioning((yyloc));
//          };
			break;

		case 1090: /* opt_alter_command_list: %empty */
//  if (yyn == 1090)
//    /* "sql_yacc.y":8636  */
//          {
//            yyval.flags.init();
//            yyval.actions= nullptr;
//          };
			break;

		case 1091: /* opt_alter_command_list: alter_commands_modifier_list */
//  if (yyn == 1091)
//    /* "sql_yacc.y":8641  */
//          {
//            yyval.flags= ((algo_and_lock_and_validation)(yystack.valueAt (0)));
//            yyval.actions= nullptr;
//          };
			break;

		case 1093: /* opt_alter_command_list: alter_commands_modifier_list ',' alter_list */
//  if (yyn == 1093)
//    /* "sql_yacc.y":8647  */
//          {
//            yyval.flags= ((algo_and_lock_and_validation)(yystack.valueAt (2)));
//            yyval.flags.merge(((alter_list)(yystack.valueAt (0))).flags);
//            yyval.actions= ((alter_list)(yystack.valueAt (0))).actions;
//          };
			break;

		case 1094: /* standalone_alter_commands: DISCARD_SYM TABLESPACE_SYM */
//  if (yyn == 1094)
//    /* "sql_yacc.y":8656  */
//          {
//            yyval= NEW_PTN PT_alter_table_discard_tablespace((yyloc));
//          };
			break;

		case 1095: /* standalone_alter_commands: IMPORT TABLESPACE_SYM */
//  if (yyn == 1095)
//    /* "sql_yacc.y":8660  */
//          {
//            yyval= NEW_PTN PT_alter_table_import_tablespace((yyloc));
//          };
			break;

		case 1096: /* standalone_alter_commands: ADD PARTITION_SYM opt_no_write_to_binlog */
//  if (yyn == 1096)
//    /* "sql_yacc.y":8671  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_partition((yyloc), ((num)(yystack.valueAt (0))));
//          };
			break;

		case 1097: /* standalone_alter_commands: ADD PARTITION_SYM opt_no_write_to_binlog '(' part_def_list ')' */
//  if (yyn == 1097)
//    /* "sql_yacc.y":8675  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_partition_def_list((yyloc), ((num)(yystack.valueAt (3))), ((part_def_list)(yystack.valueAt (1))));
//          };
			break;

		case 1098: /* standalone_alter_commands: ADD PARTITION_SYM opt_no_write_to_binlog PARTITIONS_SYM real_ulong_num */
//  if (yyn == 1098)
//    /* "sql_yacc.y":8679  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_partition_num((yyloc), ((num)(yystack.valueAt (2))), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 1099: /* standalone_alter_commands: DROP PARTITION_SYM ident_string_list */
//  if (yyn == 1099)
//    /* "sql_yacc.y":8683  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_partition((yyloc), *((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1100: /* standalone_alter_commands: REBUILD_SYM PARTITION_SYM opt_no_write_to_binlog all_or_alt_part_name_list */
//  if (yyn == 1100)
//    /* "sql_yacc.y":8688  */
//          {
//            yyval= NEW_PTN PT_alter_table_rebuild_partition((yyloc), ((num)(yystack.valueAt (1))), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1101: /* standalone_alter_commands: OPTIMIZE PARTITION_SYM opt_no_write_to_binlog all_or_alt_part_name_list */
//  if (yyn == 1101)
//    /* "sql_yacc.y":8693  */
//          {
//            yyval= NEW_PTN PT_alter_table_optimize_partition((yyloc), ((num)(yystack.valueAt (1))), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1102: /* standalone_alter_commands: ANALYZE_SYM PARTITION_SYM opt_no_write_to_binlog all_or_alt_part_name_list */
//  if (yyn == 1102)
//    /* "sql_yacc.y":8698  */
//          {
//            yyval= NEW_PTN PT_alter_table_analyze_partition((yyloc), ((num)(yystack.valueAt (1))), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1103: /* standalone_alter_commands: CHECK_SYM PARTITION_SYM all_or_alt_part_name_list opt_mi_check_types */
//  if (yyn == 1103)
//    /* "sql_yacc.y":8702  */
//          {
//            yyval= NEW_PTN PT_alter_table_check_partition((yyloc), ((string_list)(yystack.valueAt (1))),
//                                                       ((mi_type)(yystack.valueAt (0))).flags, ((mi_type)(yystack.valueAt (0))).sql_flags);
//          };
			break;

		case 1104: /* standalone_alter_commands: REPAIR PARTITION_SYM opt_no_write_to_binlog all_or_alt_part_name_list opt_mi_repair_types */
//  if (yyn == 1104)
//    /* "sql_yacc.y":8709  */
//          {
//            yyval= NEW_PTN PT_alter_table_repair_partition((yyloc), ((num)(yystack.valueAt (2))), ((string_list)(yystack.valueAt (1))),
//                                                        ((mi_type)(yystack.valueAt (0))).flags, ((mi_type)(yystack.valueAt (0))).sql_flags);
//          };
			break;

		case 1105: /* standalone_alter_commands: COALESCE PARTITION_SYM opt_no_write_to_binlog real_ulong_num */
//  if (yyn == 1105)
//    /* "sql_yacc.y":8714  */
//          {
//            yyval= NEW_PTN PT_alter_table_coalesce_partition((yyloc), ((num)(yystack.valueAt (1))), ((ulong_num)(yystack.valueAt (0))));
//          };
			break;

		case 1106: /* standalone_alter_commands: TRUNCATE_SYM PARTITION_SYM all_or_alt_part_name_list */
//  if (yyn == 1106)
//    /* "sql_yacc.y":8718  */
//          {
//            yyval= NEW_PTN PT_alter_table_truncate_partition((yyloc), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1107: /* standalone_alter_commands: REORGANIZE_SYM PARTITION_SYM opt_no_write_to_binlog */
//  if (yyn == 1107)
//    /* "sql_yacc.y":8722  */
//          {
//            yyval= NEW_PTN PT_alter_table_reorganize_partition((yyloc), ((num)(yystack.valueAt (0))));
//          };
			break;

		case 1108: /* standalone_alter_commands: REORGANIZE_SYM PARTITION_SYM opt_no_write_to_binlog ident_string_list INTO '(' part_def_list ')' */
//  if (yyn == 1108)
//    /* "sql_yacc.y":8727  */
//          {
//            yyval= NEW_PTN PT_alter_table_reorganize_partition_into((yyloc), ((num)(yystack.valueAt (5))), *((string_list)(yystack.valueAt (4))), ((part_def_list)(yystack.valueAt (1))));
//          };
			break;

		case 1109: /* standalone_alter_commands: EXCHANGE_SYM PARTITION_SYM ident WITH TABLE_SYM table_ident opt_with_validation */
//  if (yyn == 1109)
//    /* "sql_yacc.y":8732  */
//          {
//            yyval= NEW_PTN PT_alter_table_exchange_partition((yyloc), ((lexer.lex_str)(yystack.valueAt (4))), ((table)(yystack.valueAt (1))), ((with_validation)(yystack.valueAt (0))));
//          };
			break;

		case 1110: /* standalone_alter_commands: DISCARD_SYM PARTITION_SYM all_or_alt_part_name_list TABLESPACE_SYM */
//  if (yyn == 1110)
//    /* "sql_yacc.y":8737  */
//          {
//            yyval= NEW_PTN PT_alter_table_discard_partition_tablespace((yyloc), ((string_list)(yystack.valueAt (1))));
//          };
			break;

		case 1111: /* standalone_alter_commands: IMPORT PARTITION_SYM all_or_alt_part_name_list TABLESPACE_SYM */
//  if (yyn == 1111)
//    /* "sql_yacc.y":8742  */
//          {
//            yyval= NEW_PTN PT_alter_table_import_partition_tablespace((yyloc), ((string_list)(yystack.valueAt (1))));
//          };
			break;

		case 1112: /* standalone_alter_commands: SECONDARY_LOAD_SYM opt_use_partition */
//  if (yyn == 1112)
//    /* "sql_yacc.y":8746  */
//          {
//            yyval= NEW_PTN PT_alter_table_secondary_load((yyloc), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1113: /* standalone_alter_commands: SECONDARY_UNLOAD_SYM opt_use_partition */
//  if (yyn == 1113)
//    /* "sql_yacc.y":8750  */
//          {
//            yyval= NEW_PTN PT_alter_table_secondary_unload((yyloc), ((string_list)(yystack.valueAt (0))));
//          };
			break;

		case 1114: /* opt_with_validation: %empty */
//  if (yyn == 1114)
//    /* "sql_yacc.y":8756  */
//                 { yyval= Alter_info::ALTER_VALIDATION_DEFAULT; };
			break;

		case 1116: /* with_validation: WITH VALIDATION_SYM */
//  if (yyn == 1116)
//    /* "sql_yacc.y":8762  */
//          {
//            yyval= Alter_info::ALTER_WITH_VALIDATION;
//          };
			break;

		case 1117: /* with_validation: WITHOUT_SYM VALIDATION_SYM */
//  if (yyn == 1117)
//    /* "sql_yacc.y":8766  */
//          {
//            yyval= Alter_info::ALTER_WITHOUT_VALIDATION;
//          };
			break;

		case 1118: /* all_or_alt_part_name_list: ALL */
//  if (yyn == 1118)
//    /* "sql_yacc.y":8772  */
//                                { yyval= nullptr; };
			break;

		case 1120: /* alter_list: alter_list_item */
//  if (yyn == 1120)
//    /* "sql_yacc.y":8782  */
//          {
//            yyval.flags.init();
//            yyval.actions= NEW_PTN Mem_root_array<PT_ddl_table_option *>(YYMEM_ROOT);
//            if (yyval.actions == nullptr || yyval.actions->push_back(((alter_table_action)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1121: /* alter_list: alter_list ',' alter_list_item */
//  if (yyn == 1121)
//    /* "sql_yacc.y":8789  */
//          {
//            if (yyval.actions->push_back(((alter_table_action)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1122: /* alter_list: alter_list ',' alter_commands_modifier */
//  if (yyn == 1122)
//    /* "sql_yacc.y":8794  */
//          {
//            yyval.flags.merge(((algo_and_lock_and_validation)(yystack.valueAt (0))));
//          };
			break;

		case 1123: /* alter_list: create_table_options_space_separated */
//  if (yyn == 1123)
//    /* "sql_yacc.y":8798  */
//          {
//            yyval.flags.init();
//            yyval.actions= ((space_separated_alter_table_opts)(yystack.valueAt (0)));
//          };
			break;

		case 1124: /* alter_list: alter_list ',' create_table_options_space_separated */
//  if (yyn == 1124)
//    /* "sql_yacc.y":8803  */
//          {
//            for (auto *option : *((space_separated_alter_table_opts)(yystack.valueAt (0))))
//            {
//              if (((alter_list)(yystack.valueAt (2))).actions->push_back(option))
//                MYSQL_YYABORT; // OOM
//            }
//          };
			break;

		case 1126: /* alter_commands_modifier_list: alter_commands_modifier_list ',' alter_commands_modifier */
//  if (yyn == 1126)
//    /* "sql_yacc.y":8815  */
//          {
//            yyval= ((algo_and_lock_and_validation)(yystack.valueAt (2)));
//            yyval.merge(((algo_and_lock_and_validation)(yystack.valueAt (0))));
//          };
			break;

		case 1127: /* alter_list_item: ADD opt_column ident field_def opt_references opt_place */
//  if (yyn == 1127)
//    /* "sql_yacc.y":8823  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_column((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), ((field_def)(yystack.valueAt (2))), ((table_constraint_def)(yystack.valueAt (1))), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 1128: /* alter_list_item: ADD opt_column '(' table_element_list ')' */
//  if (yyn == 1128)
//    /* "sql_yacc.y":8827  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_columns((yyloc), ((table_element_list)(yystack.valueAt (1))));
//          };
			break;

		case 1129: /* alter_list_item: ADD table_constraint_def */
//  if (yyn == 1129)
//    /* "sql_yacc.y":8831  */
//          {
//            yyval= NEW_PTN PT_alter_table_add_constraint((yyloc), ((table_constraint_def)(yystack.valueAt (0))));
//          };
			break;

		case 1130: /* alter_list_item: CHANGE opt_column ident ident field_def opt_place */
//  if (yyn == 1130)
//    /* "sql_yacc.y":8835  */
//          {
//            yyval= NEW_PTN PT_alter_table_change_column((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), ((lexer.lex_str)(yystack.valueAt (2))), ((field_def)(yystack.valueAt (1))), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 1131: /* alter_list_item: MODIFY_SYM opt_column ident field_def opt_place */
//  if (yyn == 1131)
//    /* "sql_yacc.y":8839  */
//          {
//            yyval= NEW_PTN PT_alter_table_change_column((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((field_def)(yystack.valueAt (1))), ((c_str)(yystack.valueAt (0))));
//          };
			break;

		case 1132: /* alter_list_item: DROP opt_column ident opt_restrict */
//  if (yyn == 1132)
//    /* "sql_yacc.y":8843  */
//          {
//            // Note: opt_restrict ($4) is ignored!
//            yyval= NEW_PTN PT_alter_table_drop_column((yyloc), ((lexer.lex_str)(yystack.valueAt (1))).str);
//          };
			break;

		case 1133: /* alter_list_item: DROP FOREIGN KEY_SYM ident */
//  if (yyn == 1133)
//    /* "sql_yacc.y":8848  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_foreign_key((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1134: /* alter_list_item: DROP PRIMARY_SYM KEY_SYM */
//  if (yyn == 1134)
//    /* "sql_yacc.y":8852  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_key((yyloc), primary_key_name);
//          };
			break;

		case 1135: /* alter_list_item: DROP key_or_index ident */
//  if (yyn == 1135)
//    /* "sql_yacc.y":8856  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_key((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1136: /* alter_list_item: DROP CHECK_SYM ident */
//  if (yyn == 1136)
//    /* "sql_yacc.y":8860  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_check_constraint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1137: /* alter_list_item: DROP CONSTRAINT ident */
//  if (yyn == 1137)
//    /* "sql_yacc.y":8864  */
//          {
//            yyval= NEW_PTN PT_alter_table_drop_constraint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1138: /* alter_list_item: DISABLE_SYM KEYS */
//  if (yyn == 1138)
//    /* "sql_yacc.y":8868  */
//          {
//            yyval= NEW_PTN PT_alter_table_enable_keys((yyloc), false);
//          };
			break;

		case 1139: /* alter_list_item: ENABLE_SYM KEYS */
//  if (yyn == 1139)
//    /* "sql_yacc.y":8872  */
//          {
//            yyval= NEW_PTN PT_alter_table_enable_keys((yyloc), true);
//          };
			break;

		case 1140: /* alter_list_item: ALTER opt_column ident SET_SYM DEFAULT_SYM signed_literal_or_null */
//  if (yyn == 1140)
//    /* "sql_yacc.y":8876  */
//          {
//            yyval= NEW_PTN PT_alter_table_set_default((yyloc), ((lexer.lex_str)(yystack.valueAt (3))).str, ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1141: /* alter_list_item: ALTER opt_column ident SET_SYM DEFAULT_SYM '(' expr ')' */
//  if (yyn == 1141)
//    /* "sql_yacc.y":8880  */
//          {
//            yyval= NEW_PTN PT_alter_table_set_default((yyloc), ((lexer.lex_str)(yystack.valueAt (5))).str, ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1142: /* alter_list_item: ALTER opt_column ident DROP DEFAULT_SYM */
//  if (yyn == 1142)
//    /* "sql_yacc.y":8884  */
//          {
//            yyval= NEW_PTN PT_alter_table_set_default((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, nullptr);
//          };
			break;

		case 1143: /* alter_list_item: ALTER opt_column ident SET_SYM visibility */
//  if (yyn == 1143)
//    /* "sql_yacc.y":8889  */
//          {
//            yyval= NEW_PTN PT_alter_table_column_visibility((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, ((visibility)(yystack.valueAt (0))));
//          };
			break;

		case 1144: /* alter_list_item: ALTER INDEX_SYM ident visibility */
//  if (yyn == 1144)
//    /* "sql_yacc.y":8893  */
//          {
//            yyval= NEW_PTN PT_alter_table_index_visible((yyloc), ((lexer.lex_str)(yystack.valueAt (1))).str, ((visibility)(yystack.valueAt (0))));
//          };
			break;

		case 1145: /* alter_list_item: ALTER CHECK_SYM ident constraint_enforcement */
//  if (yyn == 1145)
//    /* "sql_yacc.y":8897  */
//          {
//            yyval = NEW_PTN PT_alter_table_enforce_check_constraint((yyloc), ((lexer.lex_str)(yystack.valueAt (1))).str, ((is_not_empty)(yystack.valueAt (0))));
//          };
			break;

		case 1146: /* alter_list_item: ALTER CONSTRAINT ident constraint_enforcement */
//  if (yyn == 1146)
//    /* "sql_yacc.y":8901  */
//          {
//            yyval = NEW_PTN PT_alter_table_enforce_constraint((yyloc), ((lexer.lex_str)(yystack.valueAt (1))).str, ((is_not_empty)(yystack.valueAt (0))));
//          };
			break;

		case 1147: /* alter_list_item: RENAME opt_to table_ident */
//  if (yyn == 1147)
//    /* "sql_yacc.y":8905  */
//          {
//            yyval= NEW_PTN PT_alter_table_rename((yyloc), ((table)(yystack.valueAt (0))));
//          };
			break;

		case 1148: /* alter_list_item: RENAME key_or_index ident TO_SYM ident */
//  if (yyn == 1148)
//    /* "sql_yacc.y":8909  */
//          {
//            yyval= NEW_PTN PT_alter_table_rename_key((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1149: /* alter_list_item: RENAME COLUMN_SYM ident TO_SYM ident */
//  if (yyn == 1149)
//    /* "sql_yacc.y":8913  */
//          {
//            yyval= NEW_PTN PT_alter_table_rename_column((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 1150: /* alter_list_item: CONVERT_SYM TO_SYM character_set charset_name opt_collate */
//  if (yyn == 1150)
//    /* "sql_yacc.y":8917  */
//          {
//            yyval= NEW_PTN PT_alter_table_convert_to_charset((yyloc), ((lexer.charset)(yystack.valueAt (1))), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 1151: /* alter_list_item: CONVERT_SYM TO_SYM character_set DEFAULT_SYM opt_collate */
//  if (yyn == 1151)
//    /* "sql_yacc.y":8921  */
//          {
//            yyval = NEW_PTN PT_alter_table_convert_to_charset(
//                (yyloc),
//                YYTHD->variables.collation_database,
//                ((lexer.charset)(yystack.valueAt (0))) ? ((lexer.charset)(yystack.valueAt (0))) : YYTHD->variables.collation_database);
//          };
			break;

		case 1152: /* alter_list_item: FORCE_SYM */
//  if (yyn == 1152)
//    /* "sql_yacc.y":8928  */
//          {
//            yyval= NEW_PTN PT_alter_table_force((yyloc));
//          };
			break;

		case 1153: /* alter_list_item: ORDER_SYM BY alter_order_list */
//  if (yyn == 1153)
//    /* "sql_yacc.y":8932  */
//          {
//            yyval= NEW_PTN PT_alter_table_order((yyloc), ((order_list)(yystack.valueAt (0))));
//          };
			break;

		case 1154: /* alter_commands_modifier: alter_algorithm_option */
//  if (yyn == 1154)
//    /* "sql_yacc.y":8939  */
//          {
//            yyval.init();
//            yyval.algo.set(((alter_table_algorithm)(yystack.valueAt (0))));
//          };
			break;

		case 1155: /* alter_commands_modifier: alter_lock_option */
//  if (yyn == 1155)
//    /* "sql_yacc.y":8944  */
//          {
//            yyval.init();
//            yyval.lock.set(((alter_table_lock)(yystack.valueAt (0))));
//          };
			break;

		case 1156: /* alter_commands_modifier: with_validation */
//  if (yyn == 1156)
//    /* "sql_yacc.y":8949  */
//          {
//            yyval.init();
//            yyval.validation.set(((with_validation)(yystack.valueAt (0))));
//          };
			break;

		case 1157: /* opt_index_lock_and_algorithm: %empty */
//  if (yyn == 1157)
//    /* "sql_yacc.y":8956  */
//                 { yyval.init(); };
			break;

		case 1158: /* opt_index_lock_and_algorithm: alter_lock_option */
//  if (yyn == 1158)
//    /* "sql_yacc.y":8958  */
//          {
//            yyval.init();
//            yyval.lock.set(((alter_table_lock)(yystack.valueAt (0))));
//          };
			break;

		case 1159: /* opt_index_lock_and_algorithm: alter_algorithm_option */
//  if (yyn == 1159)
//    /* "sql_yacc.y":8963  */
//          {
//            yyval.init();
//            yyval.algo.set(((alter_table_algorithm)(yystack.valueAt (0))));
//          };
			break;

		case 1160: /* opt_index_lock_and_algorithm: alter_lock_option alter_algorithm_option */
//  if (yyn == 1160)
//    /* "sql_yacc.y":8968  */
//          {
//            yyval.init();
//            yyval.lock.set(((alter_table_lock)(yystack.valueAt (1))));
//            yyval.algo.set(((alter_table_algorithm)(yystack.valueAt (0))));
//          };
			break;

		case 1161: /* opt_index_lock_and_algorithm: alter_algorithm_option alter_lock_option */
//  if (yyn == 1161)
//    /* "sql_yacc.y":8974  */
//          {
//            yyval.init();
//            yyval.algo.set(((alter_table_algorithm)(yystack.valueAt (1))));
//            yyval.lock.set(((alter_table_lock)(yystack.valueAt (0))));
//          };
			break;

		case 1162: /* alter_algorithm_option: ALGORITHM_SYM opt_equal alter_algorithm_option_value */
//  if (yyn == 1162)
//    /* "sql_yacc.y":8982  */
//                                                               { yyval= ((alter_table_algorithm)(yystack.valueAt (0))); };
			break;

		case 1163: /* alter_algorithm_option_value: DEFAULT_SYM */
//  if (yyn == 1163)
//    /* "sql_yacc.y":8987  */
//          {
//            yyval= Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
//          };
			break;

		case 1164: /* alter_algorithm_option_value: ident */
//  if (yyn == 1164)
//    /* "sql_yacc.y":8991  */
//          {
//            if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "INPLACE"))
//              yyval= Alter_info::ALTER_TABLE_ALGORITHM_INPLACE;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "INSTANT"))
//              yyval= Alter_info::ALTER_TABLE_ALGORITHM_INSTANT;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "COPY"))
//              yyval= Alter_info::ALTER_TABLE_ALGORITHM_COPY;
//            else
//            {
//              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 1165: /* alter_lock_option: LOCK_SYM opt_equal alter_lock_option_value */
//  if (yyn == 1165)
//    /* "sql_yacc.y":9007  */
//                                                     { yyval= ((alter_table_lock)(yystack.valueAt (0))); };
			break;

		case 1166: /* alter_lock_option_value: DEFAULT_SYM */
//  if (yyn == 1166)
//    /* "sql_yacc.y":9012  */
//          {
//            yyval= Alter_info::ALTER_TABLE_LOCK_DEFAULT;
//          };
			break;

		case 1167: /* alter_lock_option_value: ident */
//  if (yyn == 1167)
//    /* "sql_yacc.y":9016  */
//          {
//            if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "NONE"))
//              yyval= Alter_info::ALTER_TABLE_LOCK_NONE;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "SHARED"))
//              yyval= Alter_info::ALTER_TABLE_LOCK_SHARED;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "EXCLUSIVE"))
//              yyval= Alter_info::ALTER_TABLE_LOCK_EXCLUSIVE;
//            else
//            {
//              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 1170: /* opt_ignore: %empty */
//  if (yyn == 1170)
//    /* "sql_yacc.y":9037  */
//                      { yyval= false; };
			break;

		case 1171: /* opt_ignore: IGNORE_SYM */
//  if (yyn == 1171)
//    /* "sql_yacc.y":9038  */
//                      { yyval= true; };
			break;

		case 1172: /* opt_restrict: %empty */
//  if (yyn == 1172)
//    /* "sql_yacc.y":9042  */
//                      { yyval= DROP_DEFAULT; };
			break;

		case 1173: /* opt_restrict: RESTRICT */
//  if (yyn == 1173)
//    /* "sql_yacc.y":9043  */
//                      { yyval= DROP_RESTRICT; };
			break;

		case 1174: /* opt_restrict: CASCADE */
//  if (yyn == 1174)
//    /* "sql_yacc.y":9044  */
//                      { yyval= DROP_CASCADE; };
			break;

		case 1175: /* opt_place: %empty */
//  if (yyn == 1175)
//    /* "sql_yacc.y":9048  */
//                                { yyval= nullptr; };
			break;

		case 1176: /* opt_place: AFTER_SYM ident */
//  if (yyn == 1176)
//    /* "sql_yacc.y":9049  */
//                                { yyval= ((lexer.lex_str)(yystack.valueAt (0))).str; };
			break;

		case 1177: /* opt_place: FIRST_SYM */
//  if (yyn == 1177)
//    /* "sql_yacc.y":9050  */
//                                { yyval= first_keyword; };
			break;

		case 1178: /* opt_to: %empty */
//  if (yyn == 1178)
//    /* "sql_yacc.y":9054  */
//                 {};
			break;

		case 1179: /* opt_to: TO_SYM */
//  if (yyn == 1179)
//    /* "sql_yacc.y":9055  */
//                 {};
			break;

		case 1180: /* opt_to: EQ */
//  if (yyn == 1180)
//    /* "sql_yacc.y":9056  */
//             {};
			break;

		case 1181: /* opt_to: AS */
//  if (yyn == 1181)
//    /* "sql_yacc.y":9057  */
//             {};
			break;

		case 1183: /* group_replication: STOP_SYM GROUP_REPLICATION */
			if (yyn == 1183)
			/* "sql_yacc.y":9063 */
			{
//            LEX *lex = Lex;
//            lex->sql_command = SQLCOM_STOP_GROUP_REPLICATION;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_STOP_GROUP_REPLICATION;
			}
			;
			break;

		case 1184: /* group_replication_start: START_SYM GROUP_REPLICATION */
			if (yyn == 1184)
			/* "sql_yacc.y":9071 */
			{
//            LEX *lex = Lex;
//            lex->replica_connection.reset();
//            lex->sql_command = SQLCOM_START_GROUP_REPLICATION;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_START_GROUP_REPLICATION;
			}
			;
			break;

		case 1192: /* group_replication_user: USER EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 1192)
//    /* "sql_yacc.y":9096  */
//          {
//            Lex->replica_connection.user = ((lexer.lex_str)(yystack.valueAt (0))).str;
//            if (((lexer.lex_str)(yystack.valueAt (0))).length == 0)
//            {
//              my_error(ER_GROUP_REPLICATION_USER_EMPTY_MSG, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 1193: /* group_replication_password: PASSWORD EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 1193)
//    /* "sql_yacc.y":9108  */
//          {
//            Lex->replica_connection.password = ((lexer.lex_str)(yystack.valueAt (0))).str;
//            Lex->contains_plaintext_password = true;
//            if (((lexer.lex_str)(yystack.valueAt (0))).length > 32)
//            {
//              my_error(ER_GROUP_REPLICATION_PASSWORD_LENGTH, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 1194: /* group_replication_plugin_auth: DEFAULT_AUTH_SYM EQ TEXT_STRING_sys_nonewline */
//  if (yyn == 1194)
//    /* "sql_yacc.y":9121  */
//          {
//            Lex->replica_connection.plugin_auth= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 1195: /* stop_replica_stmt: STOP_SYM REPLICA_SYM opt_replica_thread_option_list opt_channel */
			if (yyn == 1195)
			/* "sql_yacc.y":9127 */
			{
//            LEX *lex=Lex;
//            lex->sql_command = SQLCOM_REPLICA_STOP;
//            lex->type = 0;
//            lex->replica_thd_opt= ((num)(yystack.valueAt (1)));
//            if (lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
				thd.lex.sqlCommand = SQLCommand.SQLCOM_REPLICA_STOP;
			}
			;
			break;

		case 1196: /* $@43: %empty */
			if (yyn == 1196)
			/* "sql_yacc.y":9139 */
			{
//            LEX *lex=Lex;
//            /* Clean previous replica connection values */
//            lex->replica_connection.reset();
//            lex->sql_command = SQLCOM_REPLICA_START;
//            lex->type = 0;
//            /* We'll use mi structure for UNTIL options */
//            lex->mi.set_unspecified();
//            lex->replica_thd_opt= ((num)(yystack.valueAt (0)));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_REPLICA_START;
			}
			;
			break;

		case 1197: /* $@44: %empty */
//  if (yyn == 1197)
//    /* "sql_yacc.y":9152  */
//          {
//            /*
//              It is not possible to set user's information when
//              one is trying to start the SQL Thread.
//            */
//            if ((Lex->replica_thd_opt & REPLICA_SQL) == REPLICA_SQL &&
//                (Lex->replica_thd_opt & REPLICA_IO) != REPLICA_IO &&
//                (Lex->replica_connection.user ||
//                 Lex->replica_connection.password ||
//                 Lex->replica_connection.plugin_auth ||
//                 Lex->replica_connection.plugin_dir))
//            {
//              my_error(ER_SQLTHREAD_WITH_SECURE_REPLICA, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 1198: /*
					 * start_replica_stmt: START_SYM REPLICA_SYM opt_replica_thread_option_list $@43 opt_replica_until opt_user_option opt_password_option opt_default_auth_option
					 * opt_plugin_dir_option $@44 opt_channel
					 */
//  if (yyn == 1198)
//    /* "sql_yacc.y":9169  */
//          {
//            if (Lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 1199: /* start: START_SYM TRANSACTION_SYM opt_start_transaction_option_list */
			if (yyn == 1199)
			/* "sql_yacc.y":9177 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_BEGIN;
//            /* READ ONLY and READ WRITE are mutually exclusive. */
//            if ((((num)(yystack.valueAt (0))) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
//                (((num)(yystack.valueAt (0))) & MYSQL_START_TRANS_OPT_READ_ONLY))
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            lex->start_transaction_opt= ((num)(yystack.valueAt (0)));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_BEGIN;
			}
			;
			break;

		case 1200: /* opt_start_transaction_option_list: %empty */
//  if (yyn == 1200)
//    /* "sql_yacc.y":9193  */
//          {
//            yyval= 0;
//          };
			break;

		case 1201: /* opt_start_transaction_option_list: start_transaction_option_list */
//  if (yyn == 1201)
//    /* "sql_yacc.y":9197  */
//          {
//            yyval= ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1202: /* start_transaction_option_list: start_transaction_option */
//  if (yyn == 1202)
//    /* "sql_yacc.y":9204  */
//          {
//            yyval= ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1203: /* start_transaction_option_list: start_transaction_option_list ',' start_transaction_option */
//  if (yyn == 1203)
//    /* "sql_yacc.y":9208  */
//          {
//            yyval= ((num)(yystack.valueAt (2))) | ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1204: /* start_transaction_option: WITH CONSISTENT_SYM SNAPSHOT_SYM */
//  if (yyn == 1204)
//    /* "sql_yacc.y":9215  */
//          {
//            yyval= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
//          };
			break;

		case 1205: /* start_transaction_option: READ_SYM ONLY_SYM */
//  if (yyn == 1205)
//    /* "sql_yacc.y":9219  */
//          {
//            yyval= MYSQL_START_TRANS_OPT_READ_ONLY;
//          };
			break;

		case 1206: /* start_transaction_option: READ_SYM WRITE_SYM */
//  if (yyn == 1206)
//    /* "sql_yacc.y":9223  */
//          {
//            yyval= MYSQL_START_TRANS_OPT_READ_WRITE;
//          };
			break;

		case 1207: /* opt_user_option: %empty */
//  if (yyn == 1207)
//    /* "sql_yacc.y":9229  */
//                 {};
			break;

		case 1208: /* opt_user_option: USER EQ TEXT_STRING_sys */
//  if (yyn == 1208)
//    /* "sql_yacc.y":9231  */
//          {
//            Lex->replica_connection.user= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 1209: /* opt_password_option: %empty */
//  if (yyn == 1209)
//    /* "sql_yacc.y":9237  */
//                 {};
			break;

		case 1210: /* opt_password_option: PASSWORD EQ TEXT_STRING_sys */
//  if (yyn == 1210)
//    /* "sql_yacc.y":9239  */
//          {
//            Lex->replica_connection.password= ((lexer.lex_str)(yystack.valueAt (0))).str;
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 1211: /* opt_default_auth_option: %empty */
//  if (yyn == 1211)
//    /* "sql_yacc.y":9245  */
//                 {};
			break;

		case 1212: /* opt_default_auth_option: DEFAULT_AUTH_SYM EQ TEXT_STRING_sys */
//  if (yyn == 1212)
//    /* "sql_yacc.y":9247  */
//          {
//            Lex->replica_connection.plugin_auth= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 1213: /* opt_plugin_dir_option: %empty */
//  if (yyn == 1213)
//    /* "sql_yacc.y":9253  */
//                 {};
			break;

		case 1214: /* opt_plugin_dir_option: PLUGIN_DIR_SYM EQ TEXT_STRING_sys */
//  if (yyn == 1214)
//    /* "sql_yacc.y":9255  */
//          {
//            Lex->replica_connection.plugin_dir= ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 1215: /* opt_replica_thread_option_list: %empty */
//  if (yyn == 1215)
//    /* "sql_yacc.y":9262  */
//          {
//            yyval= 0;
//          };
			break;

		case 1216: /* opt_replica_thread_option_list: replica_thread_option_list */
//  if (yyn == 1216)
//    /* "sql_yacc.y":9266  */
//          {
//            yyval= ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1217: /* replica_thread_option_list: replica_thread_option */
//  if (yyn == 1217)
//    /* "sql_yacc.y":9273  */
//          {
//            yyval= ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1218: /* replica_thread_option_list: replica_thread_option_list ',' replica_thread_option */
//  if (yyn == 1218)
//    /* "sql_yacc.y":9277  */
//          {
//            yyval= ((num)(yystack.valueAt (2))) | ((num)(yystack.valueAt (0)));
//          };
			break;

		case 1219: /* replica_thread_option: SQL_THREAD */
//  if (yyn == 1219)
//    /* "sql_yacc.y":9284  */
//          {
//            yyval= REPLICA_SQL;
//          };
			break;

		case 1220: /* replica_thread_option: RELAY_THREAD */
//  if (yyn == 1220)
//    /* "sql_yacc.y":9288  */
//          {
//            yyval= REPLICA_IO;
//          };
			break;

		case 1221: /* opt_replica_until: %empty */
//  if (yyn == 1221)
//    /* "sql_yacc.y":9295  */
//          {
//            LEX *lex= Lex;
//            lex->mi.replica_until= false;
//          };
			break;

		case 1222: /* opt_replica_until: UNTIL_SYM replica_until */
//  if (yyn == 1222)
//    /* "sql_yacc.y":9300  */
//          {
//            LEX *lex=Lex;
//            if (((lex->mi.log_file_name || lex->mi.pos) &&
//                lex->mi.gtid) ||
//               ((lex->mi.relay_log_name || lex->mi.relay_log_pos) &&
//                lex->mi.gtid) ||
//                !((lex->mi.log_file_name && lex->mi.pos) ||
//                  (lex->mi.relay_log_name && lex->mi.relay_log_pos) ||
//                  lex->mi.gtid ||
//                  lex->mi.until_after_gaps) ||
//                /* SQL_AFTER_MTS_GAPS is meaningless in combination */
//                /* with any other coordinates related options       */
//                ((lex->mi.log_file_name || lex->mi.pos || lex->mi.relay_log_name
//                  || lex->mi.relay_log_pos || lex->mi.gtid)
//                 && lex->mi.until_after_gaps))
//            {
//               my_error(ER_BAD_REPLICA_UNTIL_COND, MYF(0));
//               MYSQL_YYABORT;
//            }
//            lex->mi.replica_until= true;
//          };
			break;

		case 1225: /* replica_until: SQL_BEFORE_GTIDS EQ TEXT_STRING_sys */
//  if (yyn == 1225)
//    /* "sql_yacc.y":9327  */
//          {
//            Lex->mi.gtid= ((lexer.lex_str)(yystack.valueAt (0))).str;
//            Lex->mi.gtid_until_condition= LEX_SOURCE_INFO::UNTIL_SQL_BEFORE_GTIDS;
//          };
			break;

		case 1226: /* replica_until: SQL_AFTER_GTIDS EQ TEXT_STRING_sys */
//  if (yyn == 1226)
//    /* "sql_yacc.y":9332  */
//          {
//            Lex->mi.gtid= ((lexer.lex_str)(yystack.valueAt (0))).str;
//            Lex->mi.gtid_until_condition= LEX_SOURCE_INFO::UNTIL_SQL_AFTER_GTIDS;
//          };
			break;

		case 1227: /* replica_until: SQL_AFTER_MTS_GAPS */
//  if (yyn == 1227)
//    /* "sql_yacc.y":9337  */
//          {
//            Lex->mi.until_after_gaps= true;
//          };
			break;

		case 1228: /* checksum: CHECKSUM_SYM table_or_tables table_list opt_checksum_type */
			if (yyn == 1228)
			/* "sql_yacc.y":9344 */
			{
//            LEX *lex=Lex;
//            lex->sql_command = SQLCOM_CHECKSUM;
//            /* Will be overriden during execution. */
//            YYPS->m_lock_type= TL_UNLOCK;
//            if (Select->add_tables(YYTHD, ((table_list)(yystack.valueAt (1))), TL_OPTION_UPDATING,
//                                   YYPS->m_lock_type, YYPS->m_mdl_type))
//              MYSQL_YYABORT;
//            Lex->check_opt.flags= ((ulong_num)(yystack.valueAt (0)));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CHECKSUM;
			}
			;
			break;

		case 1229: /* opt_checksum_type: %empty */
//  if (yyn == 1229)
//    /* "sql_yacc.y":9357  */
//                        { yyval= 0; };
			break;

		case 1230: /* opt_checksum_type: QUICK */
//  if (yyn == 1230)
//    /* "sql_yacc.y":9358  */
//                        { yyval= T_QUICK; };
			break;

		case 1231: /* opt_checksum_type: EXTENDED_SYM */
//  if (yyn == 1231)
//    /* "sql_yacc.y":9359  */
//                        { yyval= T_EXTEND; };
			break;

		case 1232: /* repair_table_stmt: REPAIR opt_no_write_to_binlog table_or_tables table_list opt_mi_repair_types */
//  if (yyn == 1232)
//    /* "sql_yacc.y":9365  */
//          {
//            yyval= NEW_PTN PT_repair_table_stmt((yyloc), YYMEM_ROOT, ((num)(yystack.valueAt (3))), ((table_list)(yystack.valueAt (1))),
//                                             ((mi_type)(yystack.valueAt (0))).flags, ((mi_type)(yystack.valueAt (0))).sql_flags);
//          };
			break;

		case 1233: /* opt_mi_repair_types: %empty */
//  if (yyn == 1233)
//    /* "sql_yacc.y":9372  */
//                 { yyval.flags = T_MEDIUM; yyval.sql_flags= 0; };
			break;

		case 1236: /* mi_repair_types: mi_repair_types mi_repair_type */
//  if (yyn == 1236)
//    /* "sql_yacc.y":9379  */
//          {
//            yyval.flags= ((mi_type)(yystack.valueAt (1))).flags | ((mi_type)(yystack.valueAt (0))).flags;
//            yyval.sql_flags= ((mi_type)(yystack.valueAt (1))).sql_flags | ((mi_type)(yystack.valueAt (0))).sql_flags;
//          };
			break;

		case 1237: /* mi_repair_type: QUICK */
//  if (yyn == 1237)
//    /* "sql_yacc.y":9386  */
//                       { yyval.flags= T_QUICK;  yyval.sql_flags= 0; };
			break;

		case 1238: /* mi_repair_type: EXTENDED_SYM */
//  if (yyn == 1238)
//    /* "sql_yacc.y":9387  */
//                       { yyval.flags= T_EXTEND; yyval.sql_flags= 0; };
			break;

		case 1239: /* mi_repair_type: USE_FRM */
//  if (yyn == 1239)
//    /* "sql_yacc.y":9388  */
//                       { yyval.flags= 0;        yyval.sql_flags= TT_USEFRM; };
			break;

		case 1240: /* analyze_table_stmt: ANALYZE_SYM opt_no_write_to_binlog table_or_tables table_list opt_histogram */
//  if (yyn == 1240)
//    /* "sql_yacc.y":9394  */
//          {
//            if (((histogram)(yystack.valueAt (0))).param) {
//              yyval= NEW_PTN PT_analyze_table_stmt((yyloc), YYMEM_ROOT, ((num)(yystack.valueAt (3))), ((table_list)(yystack.valueAt (1))),
//                                                ((histogram)(yystack.valueAt (0))).command, ((histogram)(yystack.valueAt (0))).param->num_buckets,
//                                                ((histogram)(yystack.valueAt (0))).columns, ((histogram)(yystack.valueAt (0))).param->data, ((histogram)(yystack.valueAt (0))).param->auto_update);
//            } else {
//              yyval= NEW_PTN PT_analyze_table_stmt((yyloc), YYMEM_ROOT, ((num)(yystack.valueAt (3))), ((table_list)(yystack.valueAt (1))),
//                                                ((histogram)(yystack.valueAt (0))).command, 0,
//                                                ((histogram)(yystack.valueAt (0))).columns, {nullptr, 0}, false);
//            }
//          };
			break;

		case 1241: /* opt_histogram_auto_update: %empty */
//  if (yyn == 1241)
//    /* "sql_yacc.y":9409  */
//                                 { yyval= false; };
			break;

		case 1242: /* opt_histogram_auto_update: MANUAL_SYM UPDATE_SYM */
//  if (yyn == 1242)
//    /* "sql_yacc.y":9410  */
//                                 { yyval= false; };
			break;

		case 1243: /* opt_histogram_auto_update: AUTO_SYM UPDATE_SYM */
//  if (yyn == 1243)
//    /* "sql_yacc.y":9411  */
//                                 { yyval= true; };
			break;

		case 1244: /* opt_histogram_num_buckets: %empty */
//  if (yyn == 1244)
//    /* "sql_yacc.y":9416  */
//          {
//            yyval= DEFAULT_NUMBER_OF_HISTOGRAM_BUCKETS;
//          };
			break;

		case 1245: /* opt_histogram_num_buckets: WITH NUM BUCKETS_SYM */
//  if (yyn == 1245)
//    /* "sql_yacc.y":9420  */
//          {
//            int error;
//            longlong num= my_strtoll10(((lexer.lex_str)(yystack.valueAt (1))).str, nullptr, &error);
//            MYSQL_YYABORT_UNLESS(error <= 0);

//            if (num < 1 || num > MAX_NUMBER_OF_HISTOGRAM_BUCKETS)
//            {
//              my_error(ER_DATA_OUT_OF_RANGE, MYF(0), "Number of buckets",
//                       "ANALYZE TABLE");
//              MYSQL_YYABORT;
//            }
//            yyval= num;
//          };
			break;

		case 1246: /* opt_histogram_update_param: opt_histogram_num_buckets opt_histogram_auto_update */
//  if (yyn == 1246)
//    /* "sql_yacc.y":9437  */
//          {
//            yyval.num_buckets= ((num)(yystack.valueAt (1)));
//            yyval.auto_update= ((is_not_empty)(yystack.valueAt (0)));
//            yyval.data= { nullptr, 0 };
//          };
			break;

		case 1247: /* opt_histogram_update_param: USING DATA_SYM TEXT_STRING_literal */
//  if (yyn == 1247)
//    /* "sql_yacc.y":9443  */
//          {
//            yyval.num_buckets= 0;
//            yyval.auto_update= false;
//            yyval.data= ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 1248: /* opt_histogram: %empty */
//  if (yyn == 1248)
//    /* "sql_yacc.y":9452  */
//          {
//            yyval.command= Sql_cmd_analyze_table::Histogram_command::NONE;
//            yyval.columns= nullptr;
//            yyval.param= nullptr;
//          };
			break;

		case 1249: /* opt_histogram: UPDATE_SYM HISTOGRAM_SYM ON_SYM ident_string_list opt_histogram_update_param */
//  if (yyn == 1249)
//    /* "sql_yacc.y":9458  */
//          {
//            yyval.command=
//              Sql_cmd_analyze_table::Histogram_command::UPDATE_HISTOGRAM;
//            yyval.columns= ((string_list)(yystack.valueAt (1)));
//            yyval.param= NEW_PTN YYSTYPE::Histogram_param(((histogram_param)(yystack.valueAt (0))));
//            if (yyval.param == nullptr)
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1250: /* opt_histogram: DROP HISTOGRAM_SYM ON_SYM ident_string_list */
//  if (yyn == 1250)
//    /* "sql_yacc.y":9467  */
//          {
//            yyval.command=
//              Sql_cmd_analyze_table::Histogram_command::DROP_HISTOGRAM;
//            yyval.columns= ((string_list)(yystack.valueAt (0)));
//            yyval.param = nullptr;
//          };
			break;

		case 1251: /* binlog_base64_event: BINLOG_SYM TEXT_STRING_sys */
			if (yyn == 1251)
			/* "sql_yacc.y":9477 */
			{
//            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
//            Lex->binlog_stmt_arg= ((lexer.lex_str)(yystack.valueAt (0)));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_BINLOG_BASE64_EVENT;
			}
			;
			break;

		case 1252: /* check_table_stmt: CHECK_SYM table_or_tables table_list opt_mi_check_types */
//  if (yyn == 1252)
//    /* "sql_yacc.y":9485  */
//          {
//            yyval= NEW_PTN PT_check_table_stmt((yyloc), YYMEM_ROOT, ((table_list)(yystack.valueAt (1))),
//                                            ((mi_type)(yystack.valueAt (0))).flags, ((mi_type)(yystack.valueAt (0))).sql_flags);
//          };
			break;

		case 1253: /* opt_mi_check_types: %empty */
//  if (yyn == 1253)
//    /* "sql_yacc.y":9492  */
//                 { yyval.flags = T_MEDIUM; yyval.sql_flags= 0; };
			break;

		case 1256: /* mi_check_types: mi_check_type mi_check_types */
//  if (yyn == 1256)
//    /* "sql_yacc.y":9499  */
//          {
//            yyval.flags= ((mi_type)(yystack.valueAt (1))).flags | ((mi_type)(yystack.valueAt (0))).flags;
//            yyval.sql_flags= ((mi_type)(yystack.valueAt (1))).sql_flags | ((mi_type)(yystack.valueAt (0))).sql_flags;
//          };
			break;

		case 1257: /* mi_check_type: QUICK */
//  if (yyn == 1257)
//    /* "sql_yacc.y":9507  */
//          { yyval.flags= T_QUICK;              yyval.sql_flags= 0; };
			break;

		case 1258: /* mi_check_type: FAST_SYM */
//  if (yyn == 1258)
//    /* "sql_yacc.y":9509  */
//          { yyval.flags= T_FAST;               yyval.sql_flags= 0; };
			break;

		case 1259: /* mi_check_type: MEDIUM_SYM */
//  if (yyn == 1259)
//    /* "sql_yacc.y":9511  */
//          { yyval.flags= T_MEDIUM;             yyval.sql_flags= 0; };
			break;

		case 1260: /* mi_check_type: EXTENDED_SYM */
//  if (yyn == 1260)
//    /* "sql_yacc.y":9513  */
//          { yyval.flags= T_EXTEND;             yyval.sql_flags= 0; };
			break;

		case 1261: /* mi_check_type: CHANGED */
//  if (yyn == 1261)
//    /* "sql_yacc.y":9515  */
//          { yyval.flags= T_CHECK_ONLY_CHANGED; yyval.sql_flags= 0; };
			break;

		case 1262: /* mi_check_type: FOR_SYM UPGRADE_SYM */
//  if (yyn == 1262)
//    /* "sql_yacc.y":9517  */
//          { yyval.flags= 0;                    yyval.sql_flags= TT_FOR_UPGRADE; };
			break;

		case 1263: /* optimize_table_stmt: OPTIMIZE opt_no_write_to_binlog table_or_tables table_list */
//  if (yyn == 1263)
//    /* "sql_yacc.y":9522  */
//          {
//            yyval= NEW_PTN PT_optimize_table_stmt((yyloc), YYMEM_ROOT, ((num)(yystack.valueAt (2))), ((table_list)(yystack.valueAt (0))));
//          };
			break;

		case 1264: /* opt_no_write_to_binlog: %empty */
//  if (yyn == 1264)
//    /* "sql_yacc.y":9528  */
//                 { yyval= 0; };
			break;

		case 1265: /* opt_no_write_to_binlog: NO_WRITE_TO_BINLOG */
//  if (yyn == 1265)
//    /* "sql_yacc.y":9529  */
//                             { yyval= 1; };
			break;

		case 1266: /* opt_no_write_to_binlog: LOCAL_SYM */
//  if (yyn == 1266)
//    /* "sql_yacc.y":9530  */
//                    { yyval= 1; };
			break;

		case 1267: /* $@45: %empty */
			if (yyn == 1267)
			/* "sql_yacc.y":9535 */
			{
//            Lex->sql_command= SQLCOM_RENAME_TABLE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RENAME_TABLE;
			}
			;
			break;

		case 1268: /* rename: RENAME table_or_tables $@45 table_to_table_list */
//  if (yyn == 1268)
//    /* "sql_yacc.y":9539  */
//          {};
			break;

		case 1269: /* rename: RENAME USER rename_list */
			if (yyn == 1269)
			/* "sql_yacc.y":9541 */
			{
//            Lex->sql_command = SQLCOM_RENAME_USER;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RENAME_USER;
			}
			;
			break;

		case 1270: /* rename_list: user TO_SYM user */
//  if (yyn == 1270)
//    /* "sql_yacc.y":9548  */
//          {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (2)))) || Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1271: /* rename_list: rename_list ',' user TO_SYM user */
//  if (yyn == 1271)
//    /* "sql_yacc.y":9553  */
//          {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (2)))) || Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1274: /* table_to_table: table_ident TO_SYM table_ident */
//  if (yyn == 1274)
//    /* "sql_yacc.y":9566  */
//          {
//            LEX *lex=Lex;
//            Query_block *sl= Select;
//            if (!sl->add_table_to_list(lex->thd, ((table)(yystack.valueAt (2))),nullptr,TL_OPTION_UPDATING,
//                                       TL_IGNORE, MDL_EXCLUSIVE) ||
//                !sl->add_table_to_list(lex->thd, ((table)(yystack.valueAt (0))),nullptr,TL_OPTION_UPDATING,
//                                       TL_IGNORE, MDL_EXCLUSIVE))
//              MYSQL_YYABORT;
//          };
			break;

		case 1275: /* keycache_stmt: CACHE_SYM INDEX_SYM keycache_list IN_SYM key_cache_name */
//  if (yyn == 1275)
//    /* "sql_yacc.y":9579  */
//          {
//            yyval= NEW_PTN PT_cache_index_stmt((yyloc), YYMEM_ROOT, ((keycache_list)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 1276: /* keycache_stmt: CACHE_SYM INDEX_SYM table_ident adm_partition opt_cache_key_list IN_SYM key_cache_name */
//  if (yyn == 1276)
//    /* "sql_yacc.y":9584  */
//          {
//            yyval= NEW_PTN PT_cache_index_partitions_stmt((yyloc), YYMEM_ROOT,
//                                                       ((table)(yystack.valueAt (4))), ((adm_partition)(yystack.valueAt (3))), ((key_usage_list)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 1277: /* keycache_list: assign_to_keycache */
//  if (yyn == 1277)
//    /* "sql_yacc.y":9592  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_assign_to_keycache *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((assign_to_keycache)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1278: /* keycache_list: keycache_list ',' assign_to_keycache */
//  if (yyn == 1278)
//    /* "sql_yacc.y":9598  */
//          {
//            yyval= ((keycache_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((assign_to_keycache)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1279: /* assign_to_keycache: table_ident opt_cache_key_list */
//  if (yyn == 1279)
//    /* "sql_yacc.y":9607  */
//          {
//            yyval= NEW_PTN PT_assign_to_keycache((yyloc), ((table)(yystack.valueAt (1))), ((key_usage_list)(yystack.valueAt (0))));
//          };
			break;

		case 1280: /* key_cache_name: ident */
//  if (yyn == 1280)
//    /* "sql_yacc.y":9613  */
//                   { yyval= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 1281: /* key_cache_name: DEFAULT_SYM */
//  if (yyn == 1281)
//    /* "sql_yacc.y":9614  */
//                      { yyval = default_key_cache_base; };
			break;

		case 1282: /* preload_stmt: LOAD INDEX_SYM INTO CACHE_SYM table_ident adm_partition opt_cache_key_list opt_ignore_leaves */
//  if (yyn == 1282)
//    /* "sql_yacc.y":9620  */
//          {
//            yyval= NEW_PTN PT_load_index_partitions_stmt((yyloc), YYMEM_ROOT, ((table)(yystack.valueAt (3))),((adm_partition)(yystack.valueAt (2))), ((key_usage_list)(yystack.valueAt (1))), ((is_not_empty)(yystack.valueAt (0))));
//          };
			break;

		case 1283: /* preload_stmt: LOAD INDEX_SYM INTO CACHE_SYM preload_list */
//  if (yyn == 1283)
//    /* "sql_yacc.y":9624  */
//          {
//            yyval= NEW_PTN PT_load_index_stmt((yyloc), YYMEM_ROOT, ((preload_list)(yystack.valueAt (0))));
//          };
			break;

		case 1284: /* preload_list: preload_keys */
//  if (yyn == 1284)
//    /* "sql_yacc.y":9631  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_preload_keys *>(YYMEM_ROOT);
//            if (yyval->push_back(((preload_keys)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1285: /* preload_list: preload_list ',' preload_keys */
//  if (yyn == 1285)
//    /* "sql_yacc.y":9637  */
//          {
//            yyval= ((preload_list)(yystack.valueAt (2)));
//            if (yyval == nullptr || yyval->push_back(((preload_keys)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1286: /* preload_keys: table_ident opt_cache_key_list opt_ignore_leaves */
//  if (yyn == 1286)
//    /* "sql_yacc.y":9646  */
//          {
//            yyval= NEW_PTN PT_preload_keys((yyloc), ((table)(yystack.valueAt (2))), ((key_usage_list)(yystack.valueAt (1))), ((is_not_empty)(yystack.valueAt (0))));
//          };
			break;

		case 1287: /* adm_partition: PARTITION_SYM '(' all_or_alt_part_name_list ')' */
//  if (yyn == 1287)
//    /* "sql_yacc.y":9653  */
//          {
//            yyval= NEW_PTN PT_adm_partition((yyloc), ((string_list)(yystack.valueAt (1))));
//          };
			break;

		case 1288: /* opt_cache_key_list: %empty */
//  if (yyn == 1288)
//    /* "sql_yacc.y":9659  */
//                 { yyval= nullptr; };
			break;

		case 1289: /* opt_cache_key_list: key_or_index '(' opt_key_usage_list ')' */
//  if (yyn == 1289)
//    /* "sql_yacc.y":9661  */
//          {
//            init_index_hints(((key_usage_list)(yystack.valueAt (1))), INDEX_HINT_USE, INDEX_HINT_MASK_ALL);
//            yyval= ((key_usage_list)(yystack.valueAt (1)));
//          };
			break;

		case 1290: /* opt_ignore_leaves: %empty */
//  if (yyn == 1290)
//    /* "sql_yacc.y":9668  */
//                 { yyval= false; };
			break;

		case 1291: /* opt_ignore_leaves: IGNORE_SYM LEAVES */
//  if (yyn == 1291)
//    /* "sql_yacc.y":9669  */
//                            { yyval= true; };
			break;

		case 1292: /* select_stmt: query_expression */
//  if (yyn == 1292)
//    /* "sql_yacc.y":9674  */
//          {
//            yyval = NEW_PTN PT_select_stmt((yyloc), ((query_expression)(yystack.valueAt (0))));
//          };
			break;

		case 1293: /* select_stmt: query_expression locking_clause_list */
//  if (yyn == 1293)
//    /* "sql_yacc.y":9678  */
//          {
//            yyval = NEW_PTN PT_select_stmt((yyloc), NEW_PTN PT_locking((yyloc), ((query_expression)(yystack.valueAt (1))), ((locking_clause_list)(yystack.valueAt (0)))),
//                                        nullptr, true);
//          };
			break;

		case 1295: /* select_stmt_with_into: '(' select_stmt_with_into ')' */
//  if (yyn == 1295)
//    /* "sql_yacc.y":9719  */
//          {
//            yyval = ((top_level_node)(yystack.valueAt (1)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1296: /* select_stmt_with_into: query_expression into_clause */
//  if (yyn == 1296)
//    /* "sql_yacc.y":9724  */
//          {
//            yyval = NEW_PTN PT_select_stmt((yyloc), ((query_expression)(yystack.valueAt (1))), ((into_destination)(yystack.valueAt (0))));
//          };
			break;

		case 1297: /* select_stmt_with_into: query_expression into_clause locking_clause_list */
//  if (yyn == 1297)
//    /* "sql_yacc.y":9728  */
//          {
//            yyval = NEW_PTN PT_select_stmt((yyloc), NEW_PTN PT_locking((yyloc), ((query_expression)(yystack.valueAt (2))), ((locking_clause_list)(yystack.valueAt (0)))), ((into_destination)(yystack.valueAt (1))), true);
//          };
			break;

		case 1298: /* select_stmt_with_into: query_expression locking_clause_list into_clause */
//  if (yyn == 1298)
//    /* "sql_yacc.y":9732  */
//          {
//            yyval = NEW_PTN PT_select_stmt((yyloc), NEW_PTN PT_locking((yyloc), ((query_expression)(yystack.valueAt (2))), ((locking_clause_list)(yystack.valueAt (1)))), ((into_destination)(yystack.valueAt (0))));
//          };
			break;

		case 1299: /* query_expression: query_expression_body opt_order_clause opt_limit_clause */
//  if (yyn == 1299)
//    /* "sql_yacc.y":9773  */
//          {
//            yyval = NEW_PTN PT_query_expression((yyloc), ((query_expression_body_opt_parens)(yystack.valueAt (2))).body, ((order)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 1300: /* query_expression: with_clause query_expression_body opt_order_clause opt_limit_clause */
//  if (yyn == 1300)
//    /* "sql_yacc.y":9780  */
//          {
//            yyval= NEW_PTN PT_query_expression((yyloc), ((with_clause)(yystack.valueAt (3))), ((query_expression_body_opt_parens)(yystack.valueAt (2))).body, ((order)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 1301: /* query_expression_body: query_primary */
//  if (yyn == 1301)
//    /* "sql_yacc.y":9787  */
//          {
//            yyval = {((query_primary)(yystack.valueAt (0))), false};
//          };
			break;

		case 1302: /* query_expression_body: query_expression_parens */
//  if (yyn == 1302)
//    /* "sql_yacc.y":9791  */
//          {
//            yyval = {((query_expression_body)(yystack.valueAt (0))), true};
//          };
			break;

		case 1303: /* query_expression_body: query_expression_body UNION_SYM union_option query_expression_body */
//  if (yyn == 1303)
//    /* "sql_yacc.y":9795  */
//          {
//            yyval = {NEW_PTN PT_union((yyloc), ((query_expression_body_opt_parens)(yystack.valueAt (3))).body, ((num)(yystack.valueAt (1))), ((query_expression_body_opt_parens)(yystack.valueAt (0))).body, ((query_expression_body_opt_parens)(yystack.valueAt (0))).is_parenthesized),
//                  false};
//          };
			break;

		case 1304: /* query_expression_body: query_expression_body EXCEPT_SYM union_option query_expression_body */
//  if (yyn == 1304)
//    /* "sql_yacc.y":9800  */
//          {
//            yyval = {NEW_PTN PT_except((yyloc), ((query_expression_body_opt_parens)(yystack.valueAt (3))).body, ((num)(yystack.valueAt (1))), ((query_expression_body_opt_parens)(yystack.valueAt (0))).body, ((query_expression_body_opt_parens)(yystack.valueAt (0))).is_parenthesized),
//                  false};
//          };
			break;

		case 1305: /* query_expression_body: query_expression_body INTERSECT_SYM union_option query_expression_body */
//  if (yyn == 1305)
//    /* "sql_yacc.y":9805  */
//          {
//            yyval = {NEW_PTN PT_intersect((yyloc), ((query_expression_body_opt_parens)(yystack.valueAt (3))).body, ((num)(yystack.valueAt (1))), ((query_expression_body_opt_parens)(yystack.valueAt (0))).body, ((query_expression_body_opt_parens)(yystack.valueAt (0))).is_parenthesized),
//                  false};
//          };
			break;

		case 1306: /* query_expression_parens: '(' query_expression_parens ')' */
//  if (yyn == 1306)
//    /* "sql_yacc.y":9813  */
//          { yyval = ((query_expression_body)(yystack.valueAt (1)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1307: /* query_expression_parens: '(' query_expression_with_opt_locking_clauses ')' */
//  if (yyn == 1307)
//    /* "sql_yacc.y":9817  */
//          { yyval = ((query_expression_body)(yystack.valueAt (1)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1308: /* query_primary: query_specification */
//  if (yyn == 1308)
//    /* "sql_yacc.y":9824  */
//          {
//            // Bison doesn't get polymorphism.
//            yyval= ((query_primary)(yystack.valueAt (0)));
//          };
			break;

		case 1309: /* query_primary: table_value_constructor */
//  if (yyn == 1309)
//    /* "sql_yacc.y":9829  */
//          {
//            yyval= NEW_PTN PT_table_value_constructor((yyloc), ((values_list)(yystack.valueAt (0))));
//          };
			break;

		case 1310: /* query_primary: explicit_table */
//  if (yyn == 1310)
//    /* "sql_yacc.y":9833  */
//          {
//            // Pass empty position because asterisk is not user-supplied.
//            auto item_list= NEW_PTN PT_select_item_list(POS());
//            auto asterisk= NEW_PTN Item_asterisk(POS(), nullptr, nullptr);
//            if (item_list == nullptr || asterisk == nullptr ||
//                item_list->push_back(asterisk))
//              MYSQL_YYABORT;
//            yyval= NEW_PTN PT_explicit_table((yyloc), {}, item_list, ((table_reference_list)(yystack.valueAt (0))));
//          };
			break;

		case 1311: /*
					 * query_specification: SELECT_SYM select_options select_item_list into_clause opt_from_clause opt_where_clause opt_group_clause opt_having_clause
					 * opt_window_clause opt_qualify_clause
					 */
//  if (yyn == 1311)
//    /* "sql_yacc.y":9855  */
//          {
//            yyval= NEW_PTN PT_query_specification(
//                                      (yyloc),
//                                      ((lexer.optimizer_hints)(yystack.valueAt (9))),  // SELECT_SYM
//                                      ((select_options)(yystack.valueAt (8))),  // select_options
//                                      ((item_list2)(yystack.valueAt (7))),  // select_item_list
//                                      ((into_destination)(yystack.valueAt (6))),  // into_clause
//                                      ((table_reference_list)(yystack.valueAt (5))),  // from
//                                      ((item)(yystack.valueAt (4))),  // where
//                                      ((group)(yystack.valueAt (3))),  // group
//                                      ((item)(yystack.valueAt (2))),  // having
//                                      ((windows)(yystack.valueAt (1))),  // windows
//                                      ((item)(yystack.valueAt (0))), // qualify
//                                      yystack.locationAt (5).raw.is_empty()); // implicit FROM
//          };
			break;

		case 1312: /*
					 * query_specification: SELECT_SYM select_options select_item_list opt_from_clause opt_where_clause opt_group_clause opt_having_clause opt_window_clause
					 * opt_qualify_clause
					 */
//  if (yyn == 1312)
//    /* "sql_yacc.y":9879  */
//          {
//            yyval= NEW_PTN PT_query_specification(
//                                      (yyloc),
//                                      ((lexer.optimizer_hints)(yystack.valueAt (8))),  // SELECT_SYM
//                                      ((select_options)(yystack.valueAt (7))),  // select_options
//                                      ((item_list2)(yystack.valueAt (6))),  // select_item_list
//                                      nullptr,// no INTO clause
//                                      ((table_reference_list)(yystack.valueAt (5))),  // from
//                                      ((item)(yystack.valueAt (4))),  // where
//                                      ((group)(yystack.valueAt (3))),  // group
//                                      ((item)(yystack.valueAt (2))),  // having
//                                      ((windows)(yystack.valueAt (1))),  // windows
//                                      ((item)(yystack.valueAt (0))),  // qualify
//                                      yystack.locationAt (5).raw.is_empty()); // implicit FROM
//          };
			break;

		case 1313: /* opt_from_clause: %empty */
//  if (yyn == 1313)
//    /* "sql_yacc.y":9897  */
//                                         { yyval.init(YYMEM_ROOT); };
			break;

		case 1315: /* from_clause: FROM from_tables */
//  if (yyn == 1315)
//    /* "sql_yacc.y":9902  */
//                           { yyval= ((table_reference_list)(yystack.valueAt (0))); };
			break;

		case 1316: /* from_tables: DUAL_SYM */
//  if (yyn == 1316)
//    /* "sql_yacc.y":9906  */
//                   { yyval.init(YYMEM_ROOT); };
			break;

		case 1318: /* table_reference_list: table_reference */
//  if (yyn == 1318)
//    /* "sql_yacc.y":9912  */
//          {
//            yyval.init(YYMEM_ROOT);
//            if (yyval.push_back(((table_reference)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1319: /* table_reference_list: table_reference_list ',' table_reference */
//  if (yyn == 1319)
//    /* "sql_yacc.y":9918  */
//          {
//            yyval= ((table_reference_list)(yystack.valueAt (2)));
//            if (yyval.push_back(((table_reference)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1320: /* table_value_constructor: VALUES values_row_list */
//  if (yyn == 1320)
//    /* "sql_yacc.y":9927  */
//          {
//            yyval= ((values_list)(yystack.valueAt (0)));
//          };
			break;

		case 1321: /* explicit_table: TABLE_SYM table_ident */
//  if (yyn == 1321)
//    /* "sql_yacc.y":9934  */
//          {
//            yyval.init(YYMEM_ROOT);
//            auto table= NEW_PTN
//                PT_table_factor_table_ident((yyloc), ((table)(yystack.valueAt (0))), nullptr, NULL_CSTR, nullptr, nullptr);
//            if (yyval.push_back(table))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1322: /* select_options: %empty */
//  if (yyn == 1322)
//    /* "sql_yacc.y":9945  */
//          {
//            yyval.query_spec_options= 0;
//          };
			break;

		case 1324: /* select_option_list: select_option_list select_option */
//  if (yyn == 1324)
//    /* "sql_yacc.y":9953  */
//          {
//            if (yyval.merge(((select_options)(yystack.valueAt (1))), ((select_options)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1326: /* select_option: query_spec_option */
//  if (yyn == 1326)
//    /* "sql_yacc.y":9962  */
//          {
//            yyval.query_spec_options= ((ulonglong_number)(yystack.valueAt (0)));
//          };
			break;

		case 1327: /* select_option: SQL_NO_CACHE_SYM */
//  if (yyn == 1327)
//    /* "sql_yacc.y":9966  */
//          {
//            push_deprecated_warn_no_replacement(YYTHD, "SQL_NO_CACHE");
//            /* Ignored since MySQL 8.0. */
//            yyval.query_spec_options= 0;
//          };
			break;

		case 1328: /* locking_clause_list: locking_clause_list locking_clause */
//  if (yyn == 1328)
//    /* "sql_yacc.y":9975  */
//          {
//            yyval= ((locking_clause_list)(yystack.valueAt (1)));
//            if (yyval->push_back(((locking_clause)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1329: /* locking_clause_list: locking_clause */
//  if (yyn == 1329)
//    /* "sql_yacc.y":9981  */
//          {
//            yyval= NEW_PTN PT_locking_clause_list((yyloc), YYTHD->mem_root);
//            if (yyval == nullptr || yyval->push_back(((locking_clause)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1330: /* locking_clause: FOR_SYM lock_strength opt_locked_row_action */
//  if (yyn == 1330)
//    /* "sql_yacc.y":9990  */
//          {
//            yyval= NEW_PTN PT_query_block_locking_clause((yyloc), ((lock_strength)(yystack.valueAt (1))), ((locked_row_action)(yystack.valueAt (0))));
//          };
			break;

		case 1331: /* locking_clause: FOR_SYM lock_strength table_locking_list opt_locked_row_action */
//  if (yyn == 1331)
//    /* "sql_yacc.y":9994  */
//          {
//            yyval= NEW_PTN PT_table_locking_clause((yyloc), ((lock_strength)(yystack.valueAt (2))), ((table_ident_list)(yystack.valueAt (1))), ((locked_row_action)(yystack.valueAt (0))));
//          };
			break;

		case 1332: /* locking_clause: LOCK_SYM IN_SYM SHARE_SYM MODE_SYM */
//  if (yyn == 1332)
//    /* "sql_yacc.y":9998  */
//          {
//            yyval= NEW_PTN PT_query_block_locking_clause((yyloc), Lock_strength::SHARE);
//          };
			break;

		case 1333: /* lock_strength: UPDATE_SYM */
//  if (yyn == 1333)
//    /* "sql_yacc.y":10004  */
//                     { yyval= Lock_strength::UPDATE; };
			break;

		case 1334: /* lock_strength: SHARE_SYM */
//  if (yyn == 1334)
//    /* "sql_yacc.y":10005  */
//                     { yyval= Lock_strength::SHARE; };
			break;

		case 1335: /* table_locking_list: OF_SYM table_alias_ref_list */
//  if (yyn == 1335)
//    /* "sql_yacc.y":10009  */
//                                      { yyval= ((table_ident_list)(yystack.valueAt (0))); };
			break;

		case 1336: /* opt_locked_row_action: %empty */
//  if (yyn == 1336)
//    /* "sql_yacc.y":10013  */
//                 { yyval= Locked_row_action::WAIT; };
			break;

		case 1338: /* locked_row_action: SKIP_SYM LOCKED_SYM */
//  if (yyn == 1338)
//    /* "sql_yacc.y":10018  */
//                              { yyval= Locked_row_action::SKIP; };
			break;

		case 1339: /* locked_row_action: NOWAIT_SYM */
//  if (yyn == 1339)
//    /* "sql_yacc.y":10019  */
//                     { yyval= Locked_row_action::NOWAIT; };
			break;

		case 1340: /* select_item_list: select_item_list ',' select_item */
//  if (yyn == 1340)
//    /* "sql_yacc.y":10024  */
//          {
//            if (((item_list2)(yystack.valueAt (2))) == nullptr || ((item_list2)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1341: /* select_item_list: select_item */
//  if (yyn == 1341)
//    /* "sql_yacc.y":10031  */
//          {
//            yyval= NEW_PTN PT_select_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1342: /* select_item_list: '*' */
//  if (yyn == 1342)
//    /* "sql_yacc.y":10037  */
//          {
//            Item *item = NEW_PTN Item_asterisk((yyloc), nullptr, nullptr);
//            yyval = NEW_PTN PT_select_item_list((yyloc));
//            if (yyval == nullptr || item == nullptr || yyval->push_back(item))
//              MYSQL_YYABORT;
//          };
			break;

		case 1343: /* select_item: table_wild */
//  if (yyn == 1343)
//    /* "sql_yacc.y":10046  */
//                     { yyval= ((item)(yystack.valueAt (0))); };
			break;

		case 1344: /* select_item: expr select_alias */
//  if (yyn == 1344)
//    /* "sql_yacc.y":10048  */
//          {
//            yyval= NEW_PTN PTI_expr_with_alias((yyloc), ((item)(yystack.valueAt (1))), yystack.locationAt (1).cpp, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 1345: /* select_alias: %empty */
//  if (yyn == 1345)
//    /* "sql_yacc.y":10055  */
//                 { yyval=null_lex_str;};
			break;

		case 1346: /* select_alias: AS ident */
//  if (yyn == 1346)
//    /* "sql_yacc.y":10056  */
//                   { yyval=((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 1347: /* select_alias: AS TEXT_STRING_validated */
//  if (yyn == 1347)
//    /* "sql_yacc.y":10057  */
//                                   { yyval=((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 1348: /* select_alias: ident */
//  if (yyn == 1348)
//    /* "sql_yacc.y":10058  */
//                { yyval=((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 1349: /* select_alias: TEXT_STRING_validated */
//  if (yyn == 1349)
//    /* "sql_yacc.y":10059  */
//                                { yyval=((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 1350: /* optional_braces: %empty */
//  if (yyn == 1350)
//    /* "sql_yacc.y":10063  */
//                 {};
			break;

		case 1351: /* optional_braces: '(' ')' */
//  if (yyn == 1351)
//    /* "sql_yacc.y":10064  */
//                  {};
			break;

		case 1352: /* expr: expr or expr */
//  if (yyn == 1352)
//    /* "sql_yacc.y":10070  */
//          {
//            yyval= flatten_associative_operator<Item_cond_or,
//                                             Item_func::COND_OR_FUNC>(
//                                                 YYMEM_ROOT, (yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1353: /* expr: expr XOR expr */
//  if (yyn == 1353)
//    /* "sql_yacc.y":10077  */
//          {
//            /* XOR is a proprietary extension */
//            yyval = NEW_PTN Item_func_xor((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1354: /* expr: expr and expr */
//  if (yyn == 1354)
//    /* "sql_yacc.y":10082  */
//          {
//            yyval= flatten_associative_operator<Item_cond_and,
//                                             Item_func::COND_AND_FUNC>(
//                                                 YYMEM_ROOT, (yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1355: /* expr: NOT_SYM expr */
//  if (yyn == 1355)
//    /* "sql_yacc.y":10089  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (0))), Item::BOOL_NEGATED);
//          };
			break;

		case 1356: /* expr: bool_pri IS TRUE_SYM */
//  if (yyn == 1356)
//    /* "sql_yacc.y":10093  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (2))), Item::BOOL_IS_TRUE);
//          };
			break;

		case 1357: /* expr: bool_pri IS not TRUE_SYM */
//  if (yyn == 1357)
//    /* "sql_yacc.y":10097  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (3))), Item::BOOL_NOT_TRUE);
//          };
			break;

		case 1358: /* expr: bool_pri IS FALSE_SYM */
//  if (yyn == 1358)
//    /* "sql_yacc.y":10101  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (2))), Item::BOOL_IS_FALSE);
//          };
			break;

		case 1359: /* expr: bool_pri IS not FALSE_SYM */
//  if (yyn == 1359)
//    /* "sql_yacc.y":10105  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (3))), Item::BOOL_NOT_FALSE);
//          };
			break;

		case 1360: /* expr: bool_pri IS UNKNOWN_SYM */
//  if (yyn == 1360)
//    /* "sql_yacc.y":10109  */
//          {
//            yyval= NEW_PTN Item_func_isnull((yyloc), ((item)(yystack.valueAt (2))));
//          };
			break;

		case 1361: /* expr: bool_pri IS not UNKNOWN_SYM */
//  if (yyn == 1361)
//    /* "sql_yacc.y":10113  */
//          {
//            yyval= NEW_PTN Item_func_isnotnull((yyloc), ((item)(yystack.valueAt (3))));
//          };
			break;

		case 1363: /* bool_pri: bool_pri IS NULL_SYM */
//  if (yyn == 1363)
//    /* "sql_yacc.y":10121  */
//          {
//            yyval= NEW_PTN Item_func_isnull((yyloc), ((item)(yystack.valueAt (2))));
//          };
			break;

		case 1364: /* bool_pri: bool_pri IS not NULL_SYM */
//  if (yyn == 1364)
//    /* "sql_yacc.y":10125  */
//          {
//            yyval= NEW_PTN Item_func_isnotnull((yyloc), ((item)(yystack.valueAt (3))));
//          };
			break;

		case 1365: /* bool_pri: bool_pri comp_op predicate */
//  if (yyn == 1365)
//    /* "sql_yacc.y":10129  */
//          {
//            yyval= NEW_PTN PTI_comp_op((yyloc), ((item)(yystack.valueAt (2))), ((boolfunc2creator)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1366: /* bool_pri: bool_pri comp_op all_or_any table_subquery */
//  if (yyn == 1366)
//    /* "sql_yacc.y":10133  */
//          {
//            if (((boolfunc2creator)(yystack.valueAt (2))) == &comp_equal_creator)
//              /*
//                We throw this manual parse error rather than split the rule
//                comp_op into a null-safe and a non null-safe rule, since doing
//                so would add a shift/reduce conflict. It's actually this rule
//                and the ones referencing it that cause all the conflicts, but
//                we still don't want the count to go up.
//              */
//              YYTHD->syntax_error_at(yystack.locationAt (2));
//            yyval= NEW_PTN PTI_comp_op_all((yyloc), ((item)(yystack.valueAt (3))), ((boolfunc2creator)(yystack.valueAt (2))), ((num)(yystack.valueAt (1))), ((subquery)(yystack.valueAt (0))));
//          };
			break;

		case 1368: /* predicate: bit_expr IN_SYM table_subquery */
//  if (yyn == 1368)
//    /* "sql_yacc.y":10150  */
//          {
//            yyval= NEW_PTN Item_in_subselect((yyloc), ((item)(yystack.valueAt (2))), ((subquery)(yystack.valueAt (0))));
//          };
			break;

		case 1369: /* predicate: bit_expr not IN_SYM table_subquery */
//  if (yyn == 1369)
//    /* "sql_yacc.y":10154  */
//          {
//            Item *item= NEW_PTN Item_in_subselect((yyloc), ((item)(yystack.valueAt (3))), ((subquery)(yystack.valueAt (0))));
//            yyval= NEW_PTN PTI_truth_transform((yyloc), item, Item::BOOL_NEGATED);
//          };
			break;

		case 1370: /* predicate: bit_expr IN_SYM '(' expr ')' */
//  if (yyn == 1370)
//    /* "sql_yacc.y":10159  */
//          {
//            yyval= NEW_PTN PTI_handle_sql2003_note184_exception((yyloc), ((item)(yystack.valueAt (4))), false, ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1371: /* predicate: bit_expr IN_SYM '(' expr ',' expr_list ')' */
//  if (yyn == 1371)
//    /* "sql_yacc.y":10163  */
//          {
//            if (((item_list2)(yystack.valueAt (1))) == nullptr || ((item_list2)(yystack.valueAt (1)))->push_front(((item)(yystack.valueAt (3)))) || ((item_list2)(yystack.valueAt (1)))->push_front(((item)(yystack.valueAt (6)))))
//              MYSQL_YYABORT;

//            yyval= NEW_PTN Item_func_in((yyloc), ((item_list2)(yystack.valueAt (1))), false);
//          };
			break;

		case 1372: /* predicate: bit_expr not IN_SYM '(' expr ')' */
//  if (yyn == 1372)
//    /* "sql_yacc.y":10170  */
//          {
//            yyval= NEW_PTN PTI_handle_sql2003_note184_exception((yyloc), ((item)(yystack.valueAt (5))), true, ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1373: /* predicate: bit_expr not IN_SYM '(' expr ',' expr_list ')' */
//  if (yyn == 1373)
//    /* "sql_yacc.y":10174  */
//          {
//            if (((item_list2)(yystack.valueAt (1))) == nullptr)
//              MYSQL_YYABORT;
//            ((item_list2)(yystack.valueAt (1)))->push_front(((item)(yystack.valueAt (3))));
//            ((item_list2)(yystack.valueAt (1)))->value.push_front(((item)(yystack.valueAt (7))));

//            yyval= NEW_PTN Item_func_in((yyloc), ((item_list2)(yystack.valueAt (1))), true);
//          };
			break;

		case 1374: /* predicate: bit_expr MEMBER_SYM opt_of '(' simple_expr ')' */
//  if (yyn == 1374)
//    /* "sql_yacc.y":10183  */
//          {
//            yyval= NEW_PTN Item_func_member_of((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1375: /* predicate: bit_expr BETWEEN_SYM bit_expr AND_SYM predicate */
//  if (yyn == 1375)
//    /* "sql_yacc.y":10187  */
//          {
//            yyval= NEW_PTN Item_func_between((yyloc), ((item)(yystack.valueAt (4))), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))), false);
//          };
			break;

		case 1376: /* predicate: bit_expr not BETWEEN_SYM bit_expr AND_SYM predicate */
//  if (yyn == 1376)
//    /* "sql_yacc.y":10191  */
//          {
//            yyval= NEW_PTN Item_func_between((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))), true);
//          };
			break;

		case 1377: /* predicate: bit_expr SOUNDS_SYM LIKE bit_expr */
//  if (yyn == 1377)
//    /* "sql_yacc.y":10195  */
//          {
//            Item *item1= NEW_PTN Item_func_soundex((yyloc), ((item)(yystack.valueAt (3))));
//            Item *item4= NEW_PTN Item_func_soundex((yyloc), ((item)(yystack.valueAt (0))));
//            if ((item1 == nullptr) || (item4 == nullptr))
//              MYSQL_YYABORT;
//            yyval= NEW_PTN Item_func_eq((yyloc), item1, item4);
//          };
			break;

		case 1378: /* predicate: bit_expr LIKE simple_expr */
//  if (yyn == 1378)
//    /* "sql_yacc.y":10203  */
//          {
//            yyval = NEW_PTN Item_func_like((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1379: /* predicate: bit_expr LIKE simple_expr ESCAPE_SYM simple_expr */
//  if (yyn == 1379)
//    /* "sql_yacc.y":10207  */
//          {
//            yyval = NEW_PTN Item_func_like((yyloc), ((item)(yystack.valueAt (4))), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1380: /* predicate: bit_expr not LIKE simple_expr */
//  if (yyn == 1380)
//    /* "sql_yacc.y":10211  */
//          {
//            auto item = NEW_PTN Item_func_like((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (0))));
//            yyval = NEW_PTN Item_func_not((yyloc), item);
//          };
			break;

		case 1381: /* predicate: bit_expr not LIKE simple_expr ESCAPE_SYM simple_expr */
//  if (yyn == 1381)
//    /* "sql_yacc.y":10216  */
//          {
//            auto item = NEW_PTN Item_func_like((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//            yyval = NEW_PTN Item_func_not((yyloc), item);
//          };
			break;

		case 1382: /* predicate: bit_expr REGEXP bit_expr */
//  if (yyn == 1382)
//    /* "sql_yacc.y":10221  */
//          {
//            auto args= NEW_PTN PT_item_list((yyloc));
//            args->push_back(((item)(yystack.valueAt (2))));
//            args->push_back(((item)(yystack.valueAt (0))));

//            yyval= NEW_PTN Item_func_regexp_like(yystack.locationAt (2), args);
//          };
			break;

		case 1383: /* predicate: bit_expr not REGEXP bit_expr */
//  if (yyn == 1383)
//    /* "sql_yacc.y":10229  */
//          {
//            auto args= NEW_PTN PT_item_list((yyloc));
//            args->push_back(((item)(yystack.valueAt (3))));
//            args->push_back(((item)(yystack.valueAt (0))));
//            Item *item= NEW_PTN Item_func_regexp_like((yyloc), args);
//            yyval= NEW_PTN PTI_truth_transform((yyloc), item, Item::BOOL_NEGATED);
//          };
			break;

		case 1387: /* bit_expr: bit_expr '|' bit_expr */
//  if (yyn == 1387)
//    /* "sql_yacc.y":10246  */
//          {
//            yyval= NEW_PTN Item_func_bit_or((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1388: /* bit_expr: bit_expr '&' bit_expr */
//  if (yyn == 1388)
//    /* "sql_yacc.y":10250  */
//          {
//            yyval= NEW_PTN Item_func_bit_and((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1389: /* bit_expr: bit_expr SHIFT_LEFT bit_expr */
//  if (yyn == 1389)
//    /* "sql_yacc.y":10254  */
//          {
//            yyval= NEW_PTN Item_func_shift_left((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1390: /* bit_expr: bit_expr SHIFT_RIGHT bit_expr */
//  if (yyn == 1390)
//    /* "sql_yacc.y":10258  */
//          {
//            yyval= NEW_PTN Item_func_shift_right((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1391: /* bit_expr: bit_expr '+' bit_expr */
//  if (yyn == 1391)
//    /* "sql_yacc.y":10262  */
//          {
//            yyval= NEW_PTN Item_func_plus((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1392: /* bit_expr: bit_expr '-' bit_expr */
//  if (yyn == 1392)
//    /* "sql_yacc.y":10266  */
//          {
//            yyval= NEW_PTN Item_func_minus((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1393: /* bit_expr: bit_expr '+' INTERVAL_SYM expr interval */
//  if (yyn == 1393)
//    /* "sql_yacc.y":10270  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (4))), ((item)(yystack.valueAt (1))), ((interval)(yystack.valueAt (0))), 0);
//          };
			break;

		case 1394: /* bit_expr: bit_expr '-' INTERVAL_SYM expr interval */
//  if (yyn == 1394)
//    /* "sql_yacc.y":10274  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (4))), ((item)(yystack.valueAt (1))), ((interval)(yystack.valueAt (0))), 1);
//          };
			break;

		case 1395: /* bit_expr: bit_expr '*' bit_expr */
//  if (yyn == 1395)
//    /* "sql_yacc.y":10278  */
//          {
//            yyval= NEW_PTN Item_func_mul((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1396: /* bit_expr: bit_expr '/' bit_expr */
//  if (yyn == 1396)
//    /* "sql_yacc.y":10282  */
//          {
//            yyval= NEW_PTN Item_func_div((yyloc), ((item)(yystack.valueAt (2))),((item)(yystack.valueAt (0))));
//          };
			break;

		case 1397: /* bit_expr: bit_expr '%' bit_expr */
//  if (yyn == 1397)
//    /* "sql_yacc.y":10286  */
//          {
//            yyval= NEW_PTN Item_func_mod((yyloc), ((item)(yystack.valueAt (2))),((item)(yystack.valueAt (0))));
//          };
			break;

		case 1398: /* bit_expr: bit_expr DIV_SYM bit_expr */
//  if (yyn == 1398)
//    /* "sql_yacc.y":10290  */
//          {
//            yyval= NEW_PTN Item_func_div_int((yyloc), ((item)(yystack.valueAt (2))),((item)(yystack.valueAt (0))));
//          };
			break;

		case 1399: /* bit_expr: bit_expr MOD_SYM bit_expr */
//  if (yyn == 1399)
//    /* "sql_yacc.y":10294  */
//          {
//            yyval= NEW_PTN Item_func_mod((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1400: /* bit_expr: bit_expr '^' bit_expr */
//  if (yyn == 1400)
//    /* "sql_yacc.y":10298  */
//          {
//            yyval= NEW_PTN Item_func_bit_xor((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1405: /* and: AND_AND_SYM */
//  if (yyn == 1405)
//    /* "sql_yacc.y":10312  */
//         {
//           push_deprecated_warn(YYTHD, "&&", "AND");
//         };
			break;

		case 1408: /* not2: '!' */
//  if (yyn == 1408)
//    /* "sql_yacc.y":10323  */
//              { push_deprecated_warn(YYTHD, "!", "NOT"); };
			break;

		case 1410: /* comp_op: EQ */
//  if (yyn == 1410)
//    /* "sql_yacc.y":10328  */
//                 { yyval = &comp_eq_creator; };
			break;

		case 1411: /* comp_op: EQUAL_SYM */
//  if (yyn == 1411)
//    /* "sql_yacc.y":10329  */
//                    { yyval = &comp_equal_creator; };
			break;

		case 1412: /* comp_op: GE */
//  if (yyn == 1412)
//    /* "sql_yacc.y":10330  */
//                 { yyval = &comp_ge_creator; };
			break;

		case 1413: /* comp_op: GT_SYM */
//  if (yyn == 1413)
//    /* "sql_yacc.y":10331  */
//                 { yyval = &comp_gt_creator; };
			break;

		case 1414: /* comp_op: LE */
//  if (yyn == 1414)
//    /* "sql_yacc.y":10332  */
//                 { yyval = &comp_le_creator; };
			break;

		case 1415: /* comp_op: LT */
//  if (yyn == 1415)
//    /* "sql_yacc.y":10333  */
//                 { yyval = &comp_lt_creator; };
			break;

		case 1416: /* comp_op: NE */
//  if (yyn == 1416)
//    /* "sql_yacc.y":10334  */
//                 { yyval = &comp_ne_creator; };
			break;

		case 1417: /* all_or_any: ALL */
//  if (yyn == 1417)
//    /* "sql_yacc.y":10338  */
//                  { yyval = 1; };
			break;

		case 1418: /* all_or_any: ANY_SYM */
//  if (yyn == 1418)
//    /* "sql_yacc.y":10339  */
//                  { yyval = 0; };
			break;

		case 1424: /* simple_expr: simple_expr COLLATE_SYM ident_or_text */
//  if (yyn == 1424)
//    /* "sql_yacc.y":10349  */
//          {
//            warn_on_deprecated_user_defined_collation(YYTHD, ((lexer.lex_str)(yystack.valueAt (0))));
//            yyval= NEW_PTN Item_func_set_collation((yyloc), ((item)(yystack.valueAt (2))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 1426: /* simple_expr: param_marker */
//  if (yyn == 1426)
//    /* "sql_yacc.y":10354  */
//                       { yyval= ((param_marker)(yystack.valueAt (0))); };
			break;

		case 1431: /* simple_expr: simple_expr OR_OR_SYM simple_expr */
//  if (yyn == 1431)
//    /* "sql_yacc.y":10360  */
//          {
//            yyval= NEW_PTN Item_func_concat((yyloc), ((item)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1432: /* simple_expr: '+' simple_expr */
//  if (yyn == 1432)
//    /* "sql_yacc.y":10364  */
//          {
//            yyval= ((item)(yystack.valueAt (0))); // TODO: do we really want to ignore unary '+' before any kind of literals?
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1433: /* simple_expr: '-' simple_expr */
//  if (yyn == 1433)
//    /* "sql_yacc.y":10369  */
//          {
//            yyval= NEW_PTN Item_func_neg((yyloc), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1434: /* simple_expr: '~' simple_expr */
//  if (yyn == 1434)
//    /* "sql_yacc.y":10373  */
//          {
//            yyval= NEW_PTN Item_func_bit_neg((yyloc), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1435: /* simple_expr: not2 simple_expr */
//  if (yyn == 1435)
//    /* "sql_yacc.y":10377  */
//          {
//            yyval= NEW_PTN PTI_truth_transform((yyloc), ((item)(yystack.valueAt (0))), Item::BOOL_NEGATED);
//          };
			break;

		case 1436: /* simple_expr: row_subquery */
//  if (yyn == 1436)
//    /* "sql_yacc.y":10381  */
//          {
//            yyval= NEW_PTN PTI_singlerow_subselect((yyloc), ((subquery)(yystack.valueAt (0))));
//          };
			break;

		case 1437: /* simple_expr: '(' expr ')' */
//  if (yyn == 1437)
//    /* "sql_yacc.y":10385  */
//          {
//            yyval= ((item)(yystack.valueAt (1)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1438: /* simple_expr: '(' expr ',' expr_list ')' */
//  if (yyn == 1438)
//    /* "sql_yacc.y":10390  */
//          {
//            yyval= NEW_PTN Item_row((yyloc), ((item)(yystack.valueAt (3))), ((item_list2)(yystack.valueAt (1)))->value);
//          };
			break;

		case 1439: /* simple_expr: ROW_SYM '(' expr ',' expr_list ')' */
//  if (yyn == 1439)
//    /* "sql_yacc.y":10394  */
//          {
//            yyval= NEW_PTN Item_row((yyloc), ((item)(yystack.valueAt (3))), ((item_list2)(yystack.valueAt (1)))->value);
//          };
			break;

		case 1440: /* simple_expr: EXISTS table_subquery */
//  if (yyn == 1440)
//    /* "sql_yacc.y":10398  */
//          {
//            yyval= NEW_PTN PTI_exists_subselect((yyloc), ((subquery)(yystack.valueAt (0))));
//          };
			break;

		case 1441: /* simple_expr: '{' ident expr '}' */
//  if (yyn == 1441)
//    /* "sql_yacc.y":10402  */
//          {
//            yyval= NEW_PTN PTI_odbc_date((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1442: /* simple_expr: MATCH ident_list_arg AGAINST '(' bit_expr fulltext_options ')' */
//  if (yyn == 1442)
//    /* "sql_yacc.y":10406  */
//          {
//            yyval= NEW_PTN Item_func_match((yyloc), ((item_list2)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((num)(yystack.valueAt (1))));
//          };
			break;

		case 1443: /* simple_expr: BINARY_SYM simple_expr */
//  if (yyn == 1443)
//    /* "sql_yacc.y":10410  */
//          {
//            push_deprecated_warn(YYTHD, "BINARY expr", "CAST");
//            yyval= create_func_cast(YYTHD, (yyloc), ((item)(yystack.valueAt (0))), ITEM_CAST_CHAR, &my_charset_bin);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1444: /* simple_expr: CAST_SYM '(' expr AS cast_type opt_array_cast ')' */
//  if (yyn == 1444)
//    /* "sql_yacc.y":10417  */
//          {
//            yyval= create_func_cast(YYTHD, (yyloc), ((item)(yystack.valueAt (4))), ((cast_type)(yystack.valueAt (2))), ((num)(yystack.valueAt (1))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1445: /* simple_expr: CAST_SYM '(' expr AT_SYM LOCAL_SYM AS cast_type opt_array_cast ')' */
//  if (yyn == 1445)
//    /* "sql_yacc.y":10423  */
//          {
//            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "AT LOCAL");
//          };
			break;

		case 1446: /* simple_expr: CAST_SYM '(' expr AT_SYM TIME_SYM ZONE_SYM opt_interval TEXT_STRING_literal AS DATETIME_SYM type_datetime_precision ')' */
//  if (yyn == 1446)
//    /* "sql_yacc.y":10428  */
//          {
//            Cast_type cast_type{ITEM_CAST_DATETIME, nullptr, nullptr, ((c_str)(yystack.valueAt (1)))};
//            auto datetime_factor =
//                NEW_PTN Item_func_at_time_zone(yystack.locationAt (9), ((item)(yystack.valueAt (9))), ((lexer.lex_str)(yystack.valueAt (4))).str, ((is_not_empty)(yystack.valueAt (5))));
//            yyval = create_func_cast(YYTHD, (yyloc), datetime_factor, cast_type, false);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1447: /* simple_expr: CASE_SYM opt_expr when_list opt_else END */
//  if (yyn == 1447)
//    /* "sql_yacc.y":10437  */
//          {
//            yyval= NEW_PTN Item_func_case((yyloc), ((item_list)(yystack.valueAt (2))), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))) );
//          };
			break;

		case 1448: /* simple_expr: CONVERT_SYM '(' expr ',' cast_type ')' */
//  if (yyn == 1448)
//    /* "sql_yacc.y":10441  */
//          {
//            yyval= create_func_cast(YYTHD, (yyloc), ((item)(yystack.valueAt (3))), ((cast_type)(yystack.valueAt (1))), false);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1449: /* simple_expr: CONVERT_SYM '(' expr USING charset_name ')' */
//  if (yyn == 1449)
//    /* "sql_yacc.y":10447  */
//          {
//            yyval= NEW_PTN Item_func_conv_charset((yyloc), ((item)(yystack.valueAt (3))),((lexer.charset)(yystack.valueAt (1))));
//          };
			break;

		case 1450: /* simple_expr: DEFAULT_SYM '(' simple_ident ')' */
//  if (yyn == 1450)
//    /* "sql_yacc.y":10451  */
//          {
//            yyval= NEW_PTN Item_default_value((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1451: /* simple_expr: VALUES '(' simple_ident_nospvar ')' */
//  if (yyn == 1451)
//    /* "sql_yacc.y":10455  */
//          {
//            yyval= NEW_PTN Item_insert_value((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1452: /* simple_expr: INTERVAL_SYM expr interval '+' expr */
//  if (yyn == 1452)
//    /* "sql_yacc.y":10460  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (0))), ((item)(yystack.valueAt (3))), ((interval)(yystack.valueAt (2))), 0);
//          };
			break;

		case 1453: /* simple_expr: simple_ident JSON_SEPARATOR_SYM TEXT_STRING_literal */
//  if (yyn == 1453)
//    /* "sql_yacc.y":10464  */
//          {
//            Item_string *path=
//              NEW_PTN Item_string(yystack.locationAt (0), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                  YYTHD->variables.collation_connection);
//            yyval= NEW_PTN Item_func_json_extract(YYTHD, (yyloc), ((item)(yystack.valueAt (2))), path);
//          };
			break;

		case 1454: /* simple_expr: simple_ident JSON_UNQUOTED_SEPARATOR_SYM TEXT_STRING_literal */
//  if (yyn == 1454)
//    /* "sql_yacc.y":10471  */
//          {
//            Item_string *path=
//              NEW_PTN Item_string(yystack.locationAt (0), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                  YYTHD->variables.collation_connection);
//            Item *extr= NEW_PTN Item_func_json_extract(YYTHD, (yyloc), ((item)(yystack.valueAt (2))), path);
//            yyval= NEW_PTN Item_func_json_unquote((yyloc), extr);
//          };
			break;

		case 1455: /* opt_array_cast: %empty */
//  if (yyn == 1455)
//    /* "sql_yacc.y":10481  */
//                 { yyval= false; };
			break;

		case 1456: /* opt_array_cast: ARRAY_SYM */
//  if (yyn == 1456)
//    /* "sql_yacc.y":10482  */
//                    { yyval= true; };
			break;

		case 1457: /* function_call_keyword: CHAR_SYM '(' expr_list ')' */
//  if (yyn == 1457)
//    /* "sql_yacc.y":10493  */
//          {
//            yyval= NEW_PTN Item_func_char((yyloc), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1458: /* function_call_keyword: CHAR_SYM '(' expr_list USING charset_name ')' */
//  if (yyn == 1458)
//    /* "sql_yacc.y":10497  */
//          {
//            yyval= NEW_PTN Item_func_char((yyloc), ((item_list2)(yystack.valueAt (3))), ((lexer.charset)(yystack.valueAt (1))));
//          };
			break;

		case 1459: /* function_call_keyword: CURRENT_USER optional_braces */
//  if (yyn == 1459)
//    /* "sql_yacc.y":10501  */
//          {
//            yyval= NEW_PTN Item_func_current_user((yyloc));
//          };
			break;

		case 1460: /* function_call_keyword: DATE_SYM '(' expr ')' */
//  if (yyn == 1460)
//    /* "sql_yacc.y":10505  */
//          {
//            yyval= NEW_PTN Item_typecast_date((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1461: /* function_call_keyword: DAY_SYM '(' expr ')' */
//  if (yyn == 1461)
//    /* "sql_yacc.y":10509  */
//          {
//            yyval= NEW_PTN Item_func_dayofmonth((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1462: /* function_call_keyword: HOUR_SYM '(' expr ')' */
//  if (yyn == 1462)
//    /* "sql_yacc.y":10513  */
//          {
//            yyval= NEW_PTN Item_func_hour((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1463: /* function_call_keyword: INSERT_SYM '(' expr ',' expr ',' expr ',' expr ')' */
//  if (yyn == 1463)
//    /* "sql_yacc.y":10517  */
//          {
//            yyval= NEW_PTN Item_func_insert((yyloc), ((item)(yystack.valueAt (7))), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1464: /* function_call_keyword: INTERVAL_SYM '(' expr ',' expr ')' */
//  if (yyn == 1464)
//    /* "sql_yacc.y":10521  */
//          {
//            yyval= NEW_PTN Item_func_interval((yyloc), YYMEM_ROOT, ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1465: /* function_call_keyword: INTERVAL_SYM '(' expr ',' expr ',' expr_list ')' */
//  if (yyn == 1465)
//    /* "sql_yacc.y":10525  */
//          {
//            yyval= NEW_PTN Item_func_interval((yyloc), YYMEM_ROOT, ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (3))), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1466: /* function_call_keyword: JSON_VALUE_SYM '(' simple_expr ',' text_literal opt_returning_type opt_on_empty_or_error ')' */
//  if (yyn == 1466)
//    /* "sql_yacc.y":10530  */
//          {
//            yyval= create_func_json_value(YYTHD, yystack.locationAt (5), ((item)(yystack.valueAt (5))), ((text_literal)(yystack.valueAt (3))), ((cast_type)(yystack.valueAt (2))),
//                                       ((json_on_error_or_empty)(yystack.valueAt (1))).empty.type, ((json_on_error_or_empty)(yystack.valueAt (1))).empty.default_string,
//                                       ((json_on_error_or_empty)(yystack.valueAt (1))).error.type, ((json_on_error_or_empty)(yystack.valueAt (1))).error.default_string);
//          };
			break;

		case 1467: /* function_call_keyword: LEFT '(' expr ',' expr ')' */
//  if (yyn == 1467)
//    /* "sql_yacc.y":10536  */
//          {
//            yyval= NEW_PTN Item_func_left((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1468: /* function_call_keyword: MINUTE_SYM '(' expr ')' */
//  if (yyn == 1468)
//    /* "sql_yacc.y":10540  */
//          {
//            yyval= NEW_PTN Item_func_minute((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1469: /* function_call_keyword: MONTH_SYM '(' expr ')' */
//  if (yyn == 1469)
//    /* "sql_yacc.y":10544  */
//          {
//            yyval= NEW_PTN Item_func_month((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1470: /* function_call_keyword: RIGHT '(' expr ',' expr ')' */
//  if (yyn == 1470)
//    /* "sql_yacc.y":10548  */
//          {
//            yyval= NEW_PTN Item_func_right((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1471: /* function_call_keyword: SECOND_SYM '(' expr ')' */
//  if (yyn == 1471)
//    /* "sql_yacc.y":10552  */
//          {
//            yyval= NEW_PTN Item_func_second((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1472: /* function_call_keyword: TIME_SYM '(' expr ')' */
//  if (yyn == 1472)
//    /* "sql_yacc.y":10556  */
//          {
//            yyval= NEW_PTN Item_typecast_time((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1473: /* function_call_keyword: TIMESTAMP_SYM '(' expr ')' */
//  if (yyn == 1473)
//    /* "sql_yacc.y":10560  */
//          {
//            yyval= NEW_PTN Item_typecast_datetime((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1474: /* function_call_keyword: TIMESTAMP_SYM '(' expr ',' expr ')' */
//  if (yyn == 1474)
//    /* "sql_yacc.y":10564  */
//          {
//            yyval= NEW_PTN Item_func_add_time((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))), 1, 0);
//          };
			break;

		case 1475: /* function_call_keyword: TRIM '(' expr ')' */
//  if (yyn == 1475)
//    /* "sql_yacc.y":10568  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))),
//                                       Item_func_trim::TRIM_BOTH_DEFAULT);
//          };
			break;

		case 1476: /* function_call_keyword: TRIM '(' LEADING expr FROM expr ')' */
//  if (yyn == 1476)
//    /* "sql_yacc.y":10573  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), ((item)(yystack.valueAt (3))),
//                                       Item_func_trim::TRIM_LEADING);
//          };
			break;

		case 1477: /* function_call_keyword: TRIM '(' TRAILING expr FROM expr ')' */
//  if (yyn == 1477)
//    /* "sql_yacc.y":10578  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), ((item)(yystack.valueAt (3))),
//                                       Item_func_trim::TRIM_TRAILING);
//          };
			break;

		case 1478: /* function_call_keyword: TRIM '(' BOTH expr FROM expr ')' */
//  if (yyn == 1478)
//    /* "sql_yacc.y":10583  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), ((item)(yystack.valueAt (3))), Item_func_trim::TRIM_BOTH);
//          };
			break;

		case 1479: /* function_call_keyword: TRIM '(' LEADING FROM expr ')' */
//  if (yyn == 1479)
//    /* "sql_yacc.y":10587  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), Item_func_trim::TRIM_LEADING);
//          };
			break;

		case 1480: /* function_call_keyword: TRIM '(' TRAILING FROM expr ')' */
//  if (yyn == 1480)
//    /* "sql_yacc.y":10591  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), Item_func_trim::TRIM_TRAILING);
//          };
			break;

		case 1481: /* function_call_keyword: TRIM '(' BOTH FROM expr ')' */
//  if (yyn == 1481)
//    /* "sql_yacc.y":10595  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), Item_func_trim::TRIM_BOTH);
//          };
			break;

		case 1482: /* function_call_keyword: TRIM '(' expr FROM expr ')' */
//  if (yyn == 1482)
//    /* "sql_yacc.y":10599  */
//          {
//            yyval= NEW_PTN Item_func_trim((yyloc), ((item)(yystack.valueAt (1))), ((item)(yystack.valueAt (3))),
//                                       Item_func_trim::TRIM_BOTH_DEFAULT);
//          };
			break;

		case 1483: /* function_call_keyword: USER '(' ')' */
//  if (yyn == 1483)
//    /* "sql_yacc.y":10604  */
//          {
//            yyval= NEW_PTN Item_func_user((yyloc));
//          };
			break;

		case 1484: /* function_call_keyword: YEAR_SYM '(' expr ')' */
//  if (yyn == 1484)
//    /* "sql_yacc.y":10608  */
//          {
//            yyval= NEW_PTN Item_func_year((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1485: /* function_call_nonkeyword: ADDDATE_SYM '(' expr ',' expr ')' */
//  if (yyn == 1485)
//    /* "sql_yacc.y":10627  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))), INTERVAL_DAY, 0);
//          };
			break;

		case 1486: /* function_call_nonkeyword: ADDDATE_SYM '(' expr ',' INTERVAL_SYM expr interval ')' */
//  if (yyn == 1486)
//    /* "sql_yacc.y":10631  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))), 0);
//          };
			break;

		case 1487: /* function_call_nonkeyword: CURDATE optional_braces */
//  if (yyn == 1487)
//    /* "sql_yacc.y":10635  */
//          {
//            yyval= NEW_PTN Item_func_curdate_local((yyloc));
//          };
			break;

		case 1488: /* function_call_nonkeyword: CURTIME func_datetime_precision */
//  if (yyn == 1488)
//    /* "sql_yacc.y":10639  */
//          {
//            yyval= NEW_PTN Item_func_curtime_local((yyloc), static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 1489: /* function_call_nonkeyword: DATE_ADD_INTERVAL '(' expr ',' INTERVAL_SYM expr interval ')' */
//  if (yyn == 1489)
//    /* "sql_yacc.y":10644  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))), 0);
//          };
			break;

		case 1490: /* function_call_nonkeyword: DATE_SUB_INTERVAL '(' expr ',' INTERVAL_SYM expr interval ')' */
//  if (yyn == 1490)
//    /* "sql_yacc.y":10649  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))), 1);
//          };
			break;

		case 1491: /* function_call_nonkeyword: EXTRACT_SYM '(' interval FROM expr ')' */
//  if (yyn == 1491)
//    /* "sql_yacc.y":10653  */
//          {
//            yyval= NEW_PTN Item_extract((yyloc),  ((interval)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1492: /* function_call_nonkeyword: GET_FORMAT '(' date_time_type ',' expr ')' */
//  if (yyn == 1492)
//    /* "sql_yacc.y":10657  */
//          {
//            yyval= NEW_PTN Item_func_get_format((yyloc), ((date_time_type)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1493: /* function_call_nonkeyword: LOG_SYM '(' expr ')' */
//  if (yyn == 1493)
//    /* "sql_yacc.y":10661  */
//          {
//            yyval= NEW_PTN Item_func_log((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1494: /* function_call_nonkeyword: LOG_SYM '(' expr ',' expr ')' */
//  if (yyn == 1494)
//    /* "sql_yacc.y":10665  */
//          {
//            yyval= NEW_PTN Item_func_log((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1495: /* function_call_nonkeyword: now */
//  if (yyn == 1495)
//    /* "sql_yacc.y":10669  */
//          {
//            yyval= NEW_PTN PTI_function_call_nonkeyword_now((yyloc),
//              static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 1496: /* function_call_nonkeyword: POSITION_SYM '(' bit_expr IN_SYM expr ')' */
//  if (yyn == 1496)
//    /* "sql_yacc.y":10674  */
//          {
//            yyval= NEW_PTN Item_func_locate((yyloc), ((item)(yystack.valueAt (1))),((item)(yystack.valueAt (3))));
//          };
			break;

		case 1497: /* function_call_nonkeyword: SUBDATE_SYM '(' expr ',' expr ')' */
//  if (yyn == 1497)
//    /* "sql_yacc.y":10678  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))), INTERVAL_DAY, 1);
//          };
			break;

		case 1498: /* function_call_nonkeyword: SUBDATE_SYM '(' expr ',' INTERVAL_SYM expr interval ')' */
//  if (yyn == 1498)
//    /* "sql_yacc.y":10682  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))), 1);
//          };
			break;

		case 1499: /* function_call_nonkeyword: SUBSTRING '(' expr ',' expr ',' expr ')' */
//  if (yyn == 1499)
//    /* "sql_yacc.y":10686  */
//          {
//            yyval= NEW_PTN Item_func_substr((yyloc), ((item)(yystack.valueAt (5))),((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1500: /* function_call_nonkeyword: SUBSTRING '(' expr ',' expr ')' */
//  if (yyn == 1500)
//    /* "sql_yacc.y":10690  */
//          {
//            yyval= NEW_PTN Item_func_substr((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1501: /* function_call_nonkeyword: SUBSTRING '(' expr FROM expr FOR_SYM expr ')' */
//  if (yyn == 1501)
//    /* "sql_yacc.y":10694  */
//          {
//            yyval= NEW_PTN Item_func_substr((yyloc), ((item)(yystack.valueAt (5))),((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1502: /* function_call_nonkeyword: SUBSTRING '(' expr FROM expr ')' */
//  if (yyn == 1502)
//    /* "sql_yacc.y":10698  */
//          {
//            yyval= NEW_PTN Item_func_substr((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1503: /* function_call_nonkeyword: SYSDATE func_datetime_precision */
//  if (yyn == 1503)
//    /* "sql_yacc.y":10702  */
//          {
//            yyval= NEW_PTN PTI_function_call_nonkeyword_sysdate((yyloc),
//              static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 1504: /* function_call_nonkeyword: TIMESTAMP_ADD '(' interval_time_stamp ',' expr ',' expr ')' */
//  if (yyn == 1504)
//    /* "sql_yacc.y":10707  */
//          {
//            yyval= NEW_PTN Item_date_add_interval((yyloc), ((item)(yystack.valueAt (1))), ((item)(yystack.valueAt (3))), ((interval_time_st)(yystack.valueAt (5))), 0);
//          };
			break;

		case 1505: /* function_call_nonkeyword: TIMESTAMP_DIFF '(' interval_time_stamp ',' expr ',' expr ')' */
//  if (yyn == 1505)
//    /* "sql_yacc.y":10711  */
//          {
//            yyval= NEW_PTN Item_func_timestamp_diff((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))),((interval_time_st)(yystack.valueAt (5))));
//          };
			break;

		case 1506: /* function_call_nonkeyword: UTC_DATE_SYM optional_braces */
//  if (yyn == 1506)
//    /* "sql_yacc.y":10715  */
//          {
//            yyval= NEW_PTN Item_func_curdate_utc((yyloc));
//          };
			break;

		case 1507: /* function_call_nonkeyword: UTC_TIME_SYM func_datetime_precision */
//  if (yyn == 1507)
//    /* "sql_yacc.y":10719  */
//          {
//            yyval= NEW_PTN Item_func_curtime_utc((yyloc), static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 1508: /* function_call_nonkeyword: UTC_TIMESTAMP_SYM func_datetime_precision */
//  if (yyn == 1508)
//    /* "sql_yacc.y":10723  */
//          {
//            yyval= NEW_PTN Item_func_now_utc((yyloc), static_cast<uint8>(((ulong_num)(yystack.valueAt (0)))));
//          };
			break;

		case 1509: /* opt_returning_type: %empty */
//  if (yyn == 1509)
//    /* "sql_yacc.y":10734  */
//          {
//            yyval= {ITEM_CAST_CHAR, nullptr, "512", nullptr};
//          };
			break;

		case 1510: /* opt_returning_type: RETURNING_SYM cast_type */
//  if (yyn == 1510)
//    /* "sql_yacc.y":10738  */
//          {
//            yyval= ((cast_type)(yystack.valueAt (0)));
//          };
			break;

		case 1511: /* function_call_conflict: ASCII_SYM '(' expr ')' */
//  if (yyn == 1511)
//    /* "sql_yacc.y":10749  */
//          {
//            yyval= NEW_PTN Item_func_ascii((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1512: /* function_call_conflict: CHARSET '(' expr ')' */
//  if (yyn == 1512)
//    /* "sql_yacc.y":10753  */
//          {
//            yyval= NEW_PTN Item_func_charset((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1513: /* function_call_conflict: COALESCE '(' expr_list ')' */
//  if (yyn == 1513)
//    /* "sql_yacc.y":10757  */
//          {
//            yyval= NEW_PTN Item_func_coalesce((yyloc), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1514: /* function_call_conflict: COLLATION_SYM '(' expr ')' */
//  if (yyn == 1514)
//    /* "sql_yacc.y":10761  */
//          {
//            yyval= NEW_PTN Item_func_collation((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1515: /* function_call_conflict: DATABASE '(' ')' */
//  if (yyn == 1515)
//    /* "sql_yacc.y":10765  */
//          {
//            yyval= NEW_PTN Item_func_database((yyloc));
//          };
			break;

		case 1516: /* function_call_conflict: IF '(' expr ',' expr ',' expr ')' */
//  if (yyn == 1516)
//    /* "sql_yacc.y":10769  */
//          {
//            yyval= NEW_PTN Item_func_if((yyloc), ((item)(yystack.valueAt (5))),((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1517: /* function_call_conflict: FORMAT_SYM '(' expr ',' expr ')' */
//  if (yyn == 1517)
//    /* "sql_yacc.y":10773  */
//          {
//            yyval= NEW_PTN Item_func_format((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1518: /* function_call_conflict: FORMAT_SYM '(' expr ',' expr ',' expr ')' */
//  if (yyn == 1518)
//    /* "sql_yacc.y":10777  */
//          {
//            yyval= NEW_PTN Item_func_format((yyloc), ((item)(yystack.valueAt (5))), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1519: /* function_call_conflict: MICROSECOND_SYM '(' expr ')' */
//  if (yyn == 1519)
//    /* "sql_yacc.y":10781  */
//          {
//            yyval= NEW_PTN Item_func_microsecond((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1520: /* function_call_conflict: MOD_SYM '(' expr ',' expr ')' */
//  if (yyn == 1520)
//    /* "sql_yacc.y":10785  */
//          {
//            yyval= NEW_PTN Item_func_mod((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1521: /* function_call_conflict: QUARTER_SYM '(' expr ')' */
//  if (yyn == 1521)
//    /* "sql_yacc.y":10789  */
//          {
//            yyval= NEW_PTN Item_func_quarter((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1522: /* function_call_conflict: REPEAT_SYM '(' expr ',' expr ')' */
//  if (yyn == 1522)
//    /* "sql_yacc.y":10793  */
//          {
//            yyval= NEW_PTN Item_func_repeat((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1523: /* function_call_conflict: REPLACE_SYM '(' expr ',' expr ',' expr ')' */
//  if (yyn == 1523)
//    /* "sql_yacc.y":10797  */
//          {
//            yyval= NEW_PTN Item_func_replace((yyloc), ((item)(yystack.valueAt (5))),((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1524: /* function_call_conflict: REVERSE_SYM '(' expr ')' */
//  if (yyn == 1524)
//    /* "sql_yacc.y":10801  */
//          {
//            yyval= NEW_PTN Item_func_reverse((yyloc), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1525: /* function_call_conflict: ROW_COUNT_SYM '(' ')' */
//  if (yyn == 1525)
//    /* "sql_yacc.y":10805  */
//          {
//            yyval= NEW_PTN Item_func_row_count((yyloc));
//          };
			break;

		case 1526: /* function_call_conflict: TRUNCATE_SYM '(' expr ',' expr ')' */
//  if (yyn == 1526)
//    /* "sql_yacc.y":10809  */
//          {
//            yyval= NEW_PTN Item_func_round((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))),1);
//          };
			break;

		case 1527: /* function_call_conflict: WEEK_SYM '(' expr ')' */
//  if (yyn == 1527)
//    /* "sql_yacc.y":10813  */
//          {
//            yyval= NEW_PTN Item_func_week((yyloc), ((item)(yystack.valueAt (1))), nullptr);
//          };
			break;

		case 1528: /* function_call_conflict: WEEK_SYM '(' expr ',' expr ')' */
//  if (yyn == 1528)
//    /* "sql_yacc.y":10817  */
//          {
//            yyval= NEW_PTN Item_func_week((yyloc), ((item)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))));
//          };
			break;

		case 1529: /* function_call_conflict: WEIGHT_STRING_SYM '(' expr ')' */
//  if (yyn == 1529)
//    /* "sql_yacc.y":10821  */
//          {
//            yyval= NEW_PTN Item_func_weight_string((yyloc), ((item)(yystack.valueAt (1))), 0, 0, 0);
//          };
			break;

		case 1530: /* function_call_conflict: WEIGHT_STRING_SYM '(' expr AS CHAR_SYM ws_num_codepoints ')' */
//  if (yyn == 1530)
//    /* "sql_yacc.y":10825  */
//          {
//            yyval= NEW_PTN Item_func_weight_string((yyloc), ((item)(yystack.valueAt (4))), 0, ((ulong_num)(yystack.valueAt (1))), 0);
//          };
			break;

		case 1531: /* function_call_conflict: WEIGHT_STRING_SYM '(' expr AS BINARY_SYM ws_num_codepoints ')' */
//  if (yyn == 1531)
//    /* "sql_yacc.y":10829  */
//          {
//            yyval= NEW_PTN Item_func_weight_string((yyloc), ((item)(yystack.valueAt (4))), 0, ((ulong_num)(yystack.valueAt (1))), 0, true);
//          };
			break;

		case 1532: /* function_call_conflict: WEIGHT_STRING_SYM '(' expr ',' ulong_num ',' ulong_num ',' ulong_num ')' */
//  if (yyn == 1532)
//    /* "sql_yacc.y":10833  */
//          {
//            yyval= NEW_PTN Item_func_weight_string((yyloc), ((item)(yystack.valueAt (7))), ((ulong_num)(yystack.valueAt (5))), ((ulong_num)(yystack.valueAt (3))), ((ulong_num)(yystack.valueAt (1))));
//          };
			break;

		case 1534: /* geometry_function: GEOMETRYCOLLECTION_SYM '(' opt_expr_list ')' */
//  if (yyn == 1534)
//    /* "sql_yacc.y":10841  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_geometrycollection,
//                        Geometry::wkb_point);
//          };
			break;

		case 1535: /* geometry_function: LINESTRING_SYM '(' expr_list ')' */
//  if (yyn == 1535)
//    /* "sql_yacc.y":10847  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_linestring,
//                        Geometry::wkb_point);
//          };
			break;

		case 1536: /* geometry_function: MULTILINESTRING_SYM '(' expr_list ')' */
//  if (yyn == 1536)
//    /* "sql_yacc.y":10853  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_multilinestring,
//                        Geometry::wkb_linestring);
//          };
			break;

		case 1537: /* geometry_function: MULTIPOINT_SYM '(' expr_list ')' */
//  if (yyn == 1537)
//    /* "sql_yacc.y":10859  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_multipoint,
//                        Geometry::wkb_point);
//          };
			break;

		case 1538: /* geometry_function: MULTIPOLYGON_SYM '(' expr_list ')' */
//  if (yyn == 1538)
//    /* "sql_yacc.y":10865  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_multipolygon,
//                        Geometry::wkb_polygon);
//          };
			break;

		case 1539: /* geometry_function: POINT_SYM '(' expr ',' expr ')' */
//  if (yyn == 1539)
//    /* "sql_yacc.y":10871  */
//          {
//            yyval= NEW_PTN Item_func_point((yyloc), ((item)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1540: /* geometry_function: POLYGON_SYM '(' expr_list ')' */
//  if (yyn == 1540)
//    /* "sql_yacc.y":10875  */
//          {
//            yyval= NEW_PTN Item_func_spatial_collection((yyloc), ((item_list2)(yystack.valueAt (1))),
//                        Geometry::wkb_polygon,
//                        Geometry::wkb_linestring);
//          };
			break;

		case 1541: /* function_call_generic: IDENT_sys '(' opt_udf_expr_list ')' */
//  if (yyn == 1541)
//    /* "sql_yacc.y":10893  */
//          {
//            yyval= NEW_PTN PTI_function_call_generic_ident_sys((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1542: /* function_call_generic: ident '.' ident '(' opt_expr_list ')' */
//  if (yyn == 1542)
//    /* "sql_yacc.y":10897  */
//          {
//            yyval= NEW_PTN PTI_function_call_generic_2d((yyloc), ((lexer.lex_str)(yystack.valueAt (5))), ((lexer.lex_str)(yystack.valueAt (3))), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1543: /* fulltext_options: opt_natural_language_mode opt_query_expansion */
//  if (yyn == 1543)
//    /* "sql_yacc.y":10904  */
//          { yyval= ((num)(yystack.valueAt (1))) | ((num)(yystack.valueAt (0))); };
			break;

		case 1544: /* fulltext_options: IN_SYM BOOLEAN_SYM MODE_SYM */
//  if (yyn == 1544)
//    /* "sql_yacc.y":10906  */
//          {
//            yyval= FT_BOOL;
//            DBUG_EXECUTE_IF("simulate_bug18831513",
//                            {
//                              THD *thd= YYTHD;
//                              if (thd->sp_runtime_ctx)
//                                YYTHD->syntax_error();
//                            });
//          };
			break;

		case 1545: /* opt_natural_language_mode: %empty */
//  if (yyn == 1545)
//    /* "sql_yacc.y":10918  */
//                 { yyval= FT_NL; };
			break;

		case 1546: /* opt_natural_language_mode: IN_SYM NATURAL LANGUAGE_SYM MODE_SYM */
//  if (yyn == 1546)
//    /* "sql_yacc.y":10919  */
//                                                { yyval= FT_NL; };
			break;

		case 1547: /* opt_query_expansion: %empty */
//  if (yyn == 1547)
//    /* "sql_yacc.y":10923  */
//                 { yyval= 0;         };
			break;

		case 1548: /* opt_query_expansion: WITH QUERY_SYM EXPANSION_SYM */
//  if (yyn == 1548)
//    /* "sql_yacc.y":10924  */
//                                                { yyval= FT_EXPAND; };
			break;

		case 1549: /* opt_udf_expr_list: %empty */
//  if (yyn == 1549)
//    /* "sql_yacc.y":10928  */
//                 { yyval= nullptr; };
			break;

		case 1550: /* opt_udf_expr_list: udf_expr_list */
//  if (yyn == 1550)
//    /* "sql_yacc.y":10929  */
//                        { yyval= ((item_list2)(yystack.valueAt (0))); };
			break;

		case 1551: /* udf_expr_list: udf_expr */
//  if (yyn == 1551)
//    /* "sql_yacc.y":10934  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1552: /* udf_expr_list: udf_expr_list ',' udf_expr */
//  if (yyn == 1552)
//    /* "sql_yacc.y":10940  */
//          {
//            if (((item_list2)(yystack.valueAt (2))) == nullptr || ((item_list2)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            // This will override earlier udf_expr_list, until
//            // we get the whole location.
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1553: /* udf_expr: expr select_alias */
//  if (yyn == 1553)
//    /* "sql_yacc.y":10952  */
//          {
//            yyval= NEW_PTN PTI_udf_expr((yyloc), ((item)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))), yystack.locationAt (1).cpp);
//          };
			break;

		case 1556: /* sum_expr: AVG_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1556)
//    /* "sql_yacc.y":10964  */
//          {
//            yyval= NEW_PTN Item_sum_avg((yyloc), ((item)(yystack.valueAt (2))), false, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1557: /* sum_expr: AVG_SYM '(' DISTINCT in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1557)
//    /* "sql_yacc.y":10968  */
//          {
//            yyval= NEW_PTN Item_sum_avg((yyloc), ((item)(yystack.valueAt (2))), true, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1558: /* sum_expr: BIT_AND_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1558)
//    /* "sql_yacc.y":10972  */
//          {
//            yyval= NEW_PTN Item_sum_and((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1559: /* sum_expr: BIT_OR_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1559)
//    /* "sql_yacc.y":10976  */
//          {
//            yyval= NEW_PTN Item_sum_or((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1560: /* sum_expr: JSON_ARRAYAGG '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1560)
//    /* "sql_yacc.y":10980  */
//          {
//            auto wrapper = make_unique_destroy_only<Json_wrapper>(YYMEM_ROOT);
//            if (wrapper == nullptr) YYABORT;
//            unique_ptr_destroy_only<Json_array> array{::new (YYMEM_ROOT)
//                                                          Json_array};
//            if (array == nullptr) YYABORT;
//            yyval = NEW_PTN Item_sum_json_array((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))), std::move(wrapper),
//                                             std::move(array));
//          };
			break;

		case 1561: /* sum_expr: JSON_OBJECTAGG '(' in_sum_expr ',' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1561)
//    /* "sql_yacc.y":10990  */
//          {
//            auto wrapper = make_unique_destroy_only<Json_wrapper>(YYMEM_ROOT);
//            if (wrapper == nullptr) YYABORT;
//            unique_ptr_destroy_only<Json_object> object{::new (YYMEM_ROOT)
//                                                            Json_object};
//            if (object == nullptr) YYABORT;
//            yyval = NEW_PTN Item_sum_json_object(
//                (yyloc), ((item)(yystack.valueAt (4))), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))), std::move(wrapper), std::move(object));
//          };
			break;

		case 1562: /* sum_expr: ST_COLLECT_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1562)
//    /* "sql_yacc.y":11000  */
//          {
//            yyval= NEW_PTN Item_sum_collect((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))), false);
//          };
			break;

		case 1563: /* sum_expr: ST_COLLECT_SYM '(' DISTINCT in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1563)
//    /* "sql_yacc.y":11004  */
//          {
//            yyval= NEW_PTN Item_sum_collect((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))), true );
//          };
			break;

		case 1564: /* sum_expr: BIT_XOR_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1564)
//    /* "sql_yacc.y":11008  */
//          {
//            yyval= NEW_PTN Item_sum_xor((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1565: /* sum_expr: COUNT_SYM '(' opt_all '*' ')' opt_windowing_clause */
//  if (yyn == 1565)
//    /* "sql_yacc.y":11012  */
//          {
//            yyval= NEW_PTN PTI_count_sym((yyloc), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1566: /* sum_expr: COUNT_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1566)
//    /* "sql_yacc.y":11016  */
//          {
//            yyval= NEW_PTN Item_sum_count((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1567: /* sum_expr: COUNT_SYM '(' DISTINCT expr_list ')' opt_windowing_clause */
//  if (yyn == 1567)
//    /* "sql_yacc.y":11020  */
//          {
//            yyval= new Item_sum_count((yyloc), ((item_list2)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1568: /* sum_expr: MIN_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1568)
//    /* "sql_yacc.y":11024  */
//          {
//            yyval= NEW_PTN Item_sum_min((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1569: /* sum_expr: MIN_SYM '(' DISTINCT in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1569)
//    /* "sql_yacc.y":11033  */
//          {
//            yyval= NEW_PTN Item_sum_min((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1570: /* sum_expr: MAX_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1570)
//    /* "sql_yacc.y":11037  */
//          {
//            yyval= NEW_PTN Item_sum_max((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1571: /* sum_expr: MAX_SYM '(' DISTINCT in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1571)
//    /* "sql_yacc.y":11041  */
//          {
//            yyval= NEW_PTN Item_sum_max((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1572: /* sum_expr: STD_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1572)
//    /* "sql_yacc.y":11045  */
//          {
//            yyval= NEW_PTN Item_sum_std((yyloc), ((item)(yystack.valueAt (2))), 0, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1573: /* sum_expr: VARIANCE_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1573)
//    /* "sql_yacc.y":11049  */
//          {
//            yyval= NEW_PTN Item_sum_variance((yyloc), ((item)(yystack.valueAt (2))), 0, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1574: /* sum_expr: STDDEV_SAMP_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1574)
//    /* "sql_yacc.y":11053  */
//          {
//            yyval= NEW_PTN Item_sum_std((yyloc), ((item)(yystack.valueAt (2))), 1, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1575: /* sum_expr: VAR_SAMP_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1575)
//    /* "sql_yacc.y":11057  */
//          {
//            yyval= NEW_PTN Item_sum_variance((yyloc), ((item)(yystack.valueAt (2))), 1, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1576: /* sum_expr: SUM_SYM '(' in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1576)
//    /* "sql_yacc.y":11061  */
//          {
//            yyval= NEW_PTN Item_sum_sum((yyloc), ((item)(yystack.valueAt (2))), false, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1577: /* sum_expr: SUM_SYM '(' DISTINCT in_sum_expr ')' opt_windowing_clause */
//  if (yyn == 1577)
//    /* "sql_yacc.y":11065  */
//          {
//            yyval= NEW_PTN Item_sum_sum((yyloc), ((item)(yystack.valueAt (2))), true, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1578: /* sum_expr: GROUP_CONCAT_SYM '(' opt_distinct expr_list opt_gorder_clause opt_gconcat_separator ')' opt_windowing_clause */
//  if (yyn == 1578)
//    /* "sql_yacc.y":11072  */
//          {
//            yyval= NEW_PTN Item_func_group_concat((yyloc), ((num)(yystack.valueAt (5))), ((item_list2)(yystack.valueAt (4))), ((order_list)(yystack.valueAt (3))), ((string)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1579: /* sampling_method: SYSTEM_SYM */
//  if (yyn == 1579)
//    /* "sql_yacc.y":11078  */
//                         { yyval= tablesample_type::SYSTEM_TABLESAMPLE_TYPE;    };
			break;

		case 1580: /* sampling_method: BERNOULLI_SYM */
//  if (yyn == 1580)
//    /* "sql_yacc.y":11079  */
//                         { yyval= tablesample_type::BERNOULLI_TABLESAMPLE_TYPE; };
			break;

		case 1581: /* sampling_percentage: NUM_literal */
//  if (yyn == 1581)
//    /* "sql_yacc.y":11083  */
//                              { yyval = ((item_num)(yystack.valueAt (0))); };
			break;

		case 1582: /* sampling_percentage: '@' ident_or_text */
//  if (yyn == 1582)
//    /* "sql_yacc.y":11084  */
//                              { yyval = NEW_PTN PTI_user_variable((yyloc), ((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 1583: /* sampling_percentage: param_marker */
//  if (yyn == 1583)
//    /* "sql_yacc.y":11085  */
//                              { yyval = ((param_marker)(yystack.valueAt (0))); };
			break;

		case 1584: /* opt_tablesample_clause: %empty */
//  if (yyn == 1584)
//    /* "sql_yacc.y":11090  */
//          {
//            /* empty */ { yyval= nullptr; }
//          };
			break;

		case 1585: /* opt_tablesample_clause: TABLESAMPLE_SYM sampling_method '(' sampling_percentage ')' */
//  if (yyn == 1585)
//    /* "sql_yacc.y":11094  */
//          {
//            yyval= NEW_PTN PT_tablesample((yyloc),((tablesample_type)(yystack.valueAt (3))),((item)(yystack.valueAt (1))));
//          };
			break;

		case 1586: /* window_func_call: ROW_NUMBER_SYM '(' ')' windowing_clause */
//  if (yyn == 1586)
//    /* "sql_yacc.y":11101  */
//          {
//            yyval=  NEW_PTN Item_row_number((yyloc), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1587: /* window_func_call: RANK_SYM '(' ')' windowing_clause */
//  if (yyn == 1587)
//    /* "sql_yacc.y":11105  */
//          {
//            yyval= NEW_PTN Item_rank((yyloc), false, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1588: /* window_func_call: DENSE_RANK_SYM '(' ')' windowing_clause */
//  if (yyn == 1588)
//    /* "sql_yacc.y":11109  */
//          {
//            yyval= NEW_PTN Item_rank((yyloc), true, ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1589: /* window_func_call: CUME_DIST_SYM '(' ')' windowing_clause */
//  if (yyn == 1589)
//    /* "sql_yacc.y":11113  */
//          {
//            yyval=  NEW_PTN Item_cume_dist((yyloc), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1590: /* window_func_call: PERCENT_RANK_SYM '(' ')' windowing_clause */
//  if (yyn == 1590)
//    /* "sql_yacc.y":11117  */
//          {
//            yyval= NEW_PTN Item_percent_rank((yyloc), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1591: /* window_func_call: NTILE_SYM '(' stable_integer ')' windowing_clause */
//  if (yyn == 1591)
//    /* "sql_yacc.y":11121  */
//          {
//            yyval=NEW_PTN Item_ntile((yyloc), ((item)(yystack.valueAt (2))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1592: /* window_func_call: LEAD_SYM '(' expr opt_lead_lag_info ')' opt_null_treatment windowing_clause */
//  if (yyn == 1592)
//    /* "sql_yacc.y":11125  */
//          {
//            PT_item_list *args= NEW_PTN PT_item_list(yystack.locationAt (4), yystack.locationAt (3));
//            if (args == nullptr || args->push_back(((item)(yystack.valueAt (4)))))
//              MYSQL_YYABORT; // OOM
//            if (((lead_lag_info)(yystack.valueAt (3))).offset != nullptr && args->push_back(((lead_lag_info)(yystack.valueAt (3))).offset))
//              MYSQL_YYABORT; // OOM
//            if (((lead_lag_info)(yystack.valueAt (3))).default_value != nullptr && args->push_back(((lead_lag_info)(yystack.valueAt (3))).default_value))
//              MYSQL_YYABORT; // OOM
//            yyval= NEW_PTN Item_lead_lag((yyloc), true, args, ((null_treatment)(yystack.valueAt (1))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1593: /* window_func_call: LAG_SYM '(' expr opt_lead_lag_info ')' opt_null_treatment windowing_clause */
//  if (yyn == 1593)
//    /* "sql_yacc.y":11136  */
//          {
//            PT_item_list *args= NEW_PTN PT_item_list(yystack.locationAt (4), yystack.locationAt (3));
//            if (args == nullptr || args->push_back(((item)(yystack.valueAt (4)))))
//              MYSQL_YYABORT; // OOM
//            if (((lead_lag_info)(yystack.valueAt (3))).offset != nullptr && args->push_back(((lead_lag_info)(yystack.valueAt (3))).offset))
//              MYSQL_YYABORT; // OOM
//            if (((lead_lag_info)(yystack.valueAt (3))).default_value != nullptr && args->push_back(((lead_lag_info)(yystack.valueAt (3))).default_value))
//              MYSQL_YYABORT; // OOM
//            yyval= NEW_PTN Item_lead_lag((yyloc), false, args, ((null_treatment)(yystack.valueAt (1))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1594: /* window_func_call: FIRST_VALUE_SYM '(' expr ')' opt_null_treatment windowing_clause */
//  if (yyn == 1594)
//    /* "sql_yacc.y":11147  */
//          {
//            yyval= NEW_PTN Item_first_last_value((yyloc), true, ((item)(yystack.valueAt (3))), ((null_treatment)(yystack.valueAt (1))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1595: /* window_func_call: LAST_VALUE_SYM '(' expr ')' opt_null_treatment windowing_clause */
//  if (yyn == 1595)
//    /* "sql_yacc.y":11151  */
//          {
//            yyval= NEW_PTN Item_first_last_value((yyloc), false, ((item)(yystack.valueAt (3))), ((null_treatment)(yystack.valueAt (1))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1596: /* window_func_call: NTH_VALUE_SYM '(' expr ',' simple_expr ')' opt_from_first_last opt_null_treatment windowing_clause */
//  if (yyn == 1596)
//    /* "sql_yacc.y":11155  */
//          {
//            PT_item_list *args= NEW_PTN PT_item_list(yystack.locationAt (6), yystack.locationAt (4));
//            if (args == nullptr ||
//                args->push_back(((item)(yystack.valueAt (6)))) ||
//                args->push_back(((item)(yystack.valueAt (4)))))
//              MYSQL_YYABORT;
//            yyval= NEW_PTN Item_nth_value((yyloc), args, ((from_first_last)(yystack.valueAt (2))) == NFL_FROM_LAST, ((null_treatment)(yystack.valueAt (1))), ((window)(yystack.valueAt (0))));
//          };
			break;

		case 1597: /* opt_lead_lag_info: %empty */
//  if (yyn == 1597)
//    /* "sql_yacc.y":11167  */
//          {
//            yyval.offset= nullptr;
//            yyval.default_value= nullptr;
//          };
			break;

		case 1598: /* opt_lead_lag_info: ',' stable_integer opt_ll_default */
//  if (yyn == 1598)
//    /* "sql_yacc.y":11172  */
//          {
//            yyval.offset= ((item)(yystack.valueAt (1)));
//            yyval.default_value= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 1599: /* stable_integer: int64_literal */
//  if (yyn == 1599)
//    /* "sql_yacc.y":11183  */
//                         { yyval = ((item_num)(yystack.valueAt (0))); };
			break;

		case 1601: /* param_or_var: param_marker */
//  if (yyn == 1601)
//    /* "sql_yacc.y":11188  */
//                       { yyval = ((param_marker)(yystack.valueAt (0))); };
			break;

		case 1602: /* param_or_var: ident */
//  if (yyn == 1602)
//    /* "sql_yacc.y":11189  */
//                       { yyval = NEW_PTN PTI_int_splocal((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))); };
			break;

		case 1603: /* param_or_var: '@' ident_or_text */
//  if (yyn == 1603)
//    /* "sql_yacc.y":11190  */
//                                { yyval = NEW_PTN PTI_user_variable((yyloc), ((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 1604: /* opt_ll_default: %empty */
//  if (yyn == 1604)
//    /* "sql_yacc.y":11195  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1605: /* opt_ll_default: ',' expr */
//  if (yyn == 1605)
//    /* "sql_yacc.y":11199  */
//          {
//            yyval= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 1606: /* opt_null_treatment: %empty */
//  if (yyn == 1606)
//    /* "sql_yacc.y":11206  */
//          {
//            yyval= NT_NONE;
//          };
			break;

		case 1607: /* opt_null_treatment: RESPECT_SYM NULLS_SYM */
//  if (yyn == 1607)
//    /* "sql_yacc.y":11210  */
//          {
//            yyval= NT_RESPECT_NULLS;
//          };
			break;

		case 1608: /* opt_null_treatment: IGNORE_SYM NULLS_SYM */
//  if (yyn == 1608)
//    /* "sql_yacc.y":11214  */
//          {
//            yyval= NT_IGNORE_NULLS;
//          };
			break;

		case 1609: /* opt_from_first_last: %empty */
//  if (yyn == 1609)
//    /* "sql_yacc.y":11222  */
//          {
//            yyval= NFL_NONE;
//          };
			break;

		case 1610: /* opt_from_first_last: FROM FIRST_SYM */
//  if (yyn == 1610)
//    /* "sql_yacc.y":11226  */
//          {
//            yyval= NFL_FROM_FIRST;
//          };
			break;

		case 1611: /* opt_from_first_last: FROM LAST_SYM */
//  if (yyn == 1611)
//    /* "sql_yacc.y":11230  */
//          {
//            yyval= NFL_FROM_LAST;
//          };
			break;

		case 1612: /* opt_windowing_clause: %empty */
//  if (yyn == 1612)
//    /* "sql_yacc.y":11237  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1613: /* opt_windowing_clause: windowing_clause */
//  if (yyn == 1613)
//    /* "sql_yacc.y":11241  */
//          {
//            yyval= ((window)(yystack.valueAt (0)));
//          };
			break;

		case 1614: /* windowing_clause: OVER_SYM window_name_or_spec */
//  if (yyn == 1614)
//    /* "sql_yacc.y":11248  */
//          {
//            yyval= ((window)(yystack.valueAt (0)));
//          };
			break;

		case 1615: /* window_name_or_spec: window_name */
//  if (yyn == 1615)
//    /* "sql_yacc.y":11255  */
//          {
//            yyval= NEW_PTN PT_window((yyloc), ((item_string)(yystack.valueAt (0))));
//          };
			break;

		case 1616: /* window_name_or_spec: window_spec */
//  if (yyn == 1616)
//    /* "sql_yacc.y":11259  */
//          {
//            yyval= ((window)(yystack.valueAt (0)));
//          };
			break;

		case 1617: /* window_name: ident */
//  if (yyn == 1617)
//    /* "sql_yacc.y":11266  */
//          {
//            yyval= NEW_PTN Item_string(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, YYTHD->charset());
//          };
			break;

		case 1618: /* window_spec: '(' window_spec_details ')' */
//  if (yyn == 1618)
//    /* "sql_yacc.y":11273  */
//          {
//            yyval= ((window)(yystack.valueAt (1)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1619: /* window_spec_details: opt_existing_window_name opt_partition_clause opt_window_order_by_clause opt_window_frame_clause */
//  if (yyn == 1619)
//    /* "sql_yacc.y":11284  */
//           {
//             auto frame= ((window_frame)(yystack.valueAt (0)));
//             if (!frame) // build an equivalent frame spec
//             {
//               auto start_bound= NEW_PTN PT_border(POS(), WBT_UNBOUNDED_PRECEDING);
//               auto end_bound= NEW_PTN PT_border(POS(), ((order_list)(yystack.valueAt (1))) ? WBT_CURRENT_ROW :
//                 WBT_UNBOUNDED_FOLLOWING);
//               auto bounds= NEW_PTN PT_borders(POS(), start_bound, end_bound);
//               frame= NEW_PTN PT_frame(POS(), WFU_RANGE, bounds, nullptr);
//               frame->m_originally_absent= true;
//             }
//             yyval= NEW_PTN PT_window(POS(), ((order_list)(yystack.valueAt (2))), ((order_list)(yystack.valueAt (1))), frame, ((item_string)(yystack.valueAt (3))));
//           };
			break;

		case 1620: /* opt_existing_window_name: %empty */
//  if (yyn == 1620)
//    /* "sql_yacc.y":11301  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1621: /* opt_existing_window_name: window_name */
//  if (yyn == 1621)
//    /* "sql_yacc.y":11305  */
//          {
//            yyval= ((item_string)(yystack.valueAt (0)));
//          };
			break;

		case 1622: /* opt_partition_clause: %empty */
//  if (yyn == 1622)
//    /* "sql_yacc.y":11312  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1623: /* opt_partition_clause: PARTITION_SYM BY group_list */
//  if (yyn == 1623)
//    /* "sql_yacc.y":11316  */
//          {
//            yyval= ((order_list)(yystack.valueAt (0)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1624: /* opt_window_order_by_clause: %empty */
//  if (yyn == 1624)
//    /* "sql_yacc.y":11324  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1625: /* opt_window_order_by_clause: ORDER_SYM BY order_list */
//  if (yyn == 1625)
//    /* "sql_yacc.y":11328  */
//          {
//            yyval= ((order_list)(yystack.valueAt (0)));
//            if (yyval != nullptr) yyval->m_pos = (yyloc);
//          };
			break;

		case 1626: /* opt_window_frame_clause: %empty */
//  if (yyn == 1626)
//    /* "sql_yacc.y":11336  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1627: /* opt_window_frame_clause: window_frame_units window_frame_extent opt_window_frame_exclusion */
//  if (yyn == 1627)
//    /* "sql_yacc.y":11342  */
//          {
//            yyval= NEW_PTN PT_frame((yyloc), ((frame_units)(yystack.valueAt (2))), ((frame_extent)(yystack.valueAt (1))), ((frame_exclusion)(yystack.valueAt (0))));
//          };
			break;

		case 1628: /* window_frame_extent: window_frame_start */
//  if (yyn == 1628)
//    /* "sql_yacc.y":11349  */
//          {
//            auto end_bound= NEW_PTN PT_border((yyloc), WBT_CURRENT_ROW);
//            yyval= NEW_PTN PT_borders((yyloc), ((bound)(yystack.valueAt (0))), end_bound);
//          };
			break;

		case 1629: /* window_frame_extent: window_frame_between */
//  if (yyn == 1629)
//    /* "sql_yacc.y":11354  */
//          {
//            yyval= ((frame_extent)(yystack.valueAt (0)));
//          };
			break;

		case 1630: /* window_frame_start: UNBOUNDED_SYM PRECEDING_SYM */
//  if (yyn == 1630)
//    /* "sql_yacc.y":11361  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_UNBOUNDED_PRECEDING);
//          };
			break;

		case 1631: /* window_frame_start: NUM_literal PRECEDING_SYM */
//  if (yyn == 1631)
//    /* "sql_yacc.y":11365  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_PRECEDING, ((item_num)(yystack.valueAt (1))));
//          };
			break;

		case 1632: /* window_frame_start: param_marker PRECEDING_SYM */
//  if (yyn == 1632)
//    /* "sql_yacc.y":11369  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_PRECEDING, ((param_marker)(yystack.valueAt (1))));
//          };
			break;

		case 1633: /* window_frame_start: INTERVAL_SYM expr interval PRECEDING_SYM */
//  if (yyn == 1633)
//    /* "sql_yacc.y":11373  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_PRECEDING, ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))));
//          };
			break;

		case 1634: /* window_frame_start: CURRENT_SYM ROW_SYM */
//  if (yyn == 1634)
//    /* "sql_yacc.y":11377  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_CURRENT_ROW);
//          };
			break;

		case 1635: /* window_frame_between: BETWEEN_SYM window_frame_bound AND_SYM window_frame_bound */
//  if (yyn == 1635)
//    /* "sql_yacc.y":11384  */
//          {
//            yyval= NEW_PTN PT_borders((yyloc), ((bound)(yystack.valueAt (2))), ((bound)(yystack.valueAt (0))));
//          };
			break;

		case 1636: /* window_frame_bound: window_frame_start */
//  if (yyn == 1636)
//    /* "sql_yacc.y":11391  */
//          {
//            yyval= ((bound)(yystack.valueAt (0)));
//          };
			break;

		case 1637: /* window_frame_bound: UNBOUNDED_SYM FOLLOWING_SYM */
//  if (yyn == 1637)
//    /* "sql_yacc.y":11395  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_UNBOUNDED_FOLLOWING);
//          };
			break;

		case 1638: /* window_frame_bound: NUM_literal FOLLOWING_SYM */
//  if (yyn == 1638)
//    /* "sql_yacc.y":11399  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_FOLLOWING, ((item_num)(yystack.valueAt (1))));
//          };
			break;

		case 1639: /* window_frame_bound: param_marker FOLLOWING_SYM */
//  if (yyn == 1639)
//    /* "sql_yacc.y":11403  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_FOLLOWING, ((param_marker)(yystack.valueAt (1))));
//          };
			break;

		case 1640: /* window_frame_bound: INTERVAL_SYM expr interval FOLLOWING_SYM */
//  if (yyn == 1640)
//    /* "sql_yacc.y":11407  */
//          {
//            yyval= NEW_PTN PT_border((yyloc), WBT_VALUE_FOLLOWING, ((item)(yystack.valueAt (2))), ((interval)(yystack.valueAt (1))));
//          };
			break;

		case 1641: /* opt_window_frame_exclusion: %empty */
//  if (yyn == 1641)
//    /* "sql_yacc.y":11414  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1642: /* opt_window_frame_exclusion: EXCLUDE_SYM CURRENT_SYM ROW_SYM */
//  if (yyn == 1642)
//    /* "sql_yacc.y":11418  */
//          {
//            yyval= NEW_PTN PT_exclusion((yyloc), WFX_CURRENT_ROW);
//          };
			break;

		case 1643: /* opt_window_frame_exclusion: EXCLUDE_SYM GROUP_SYM */
//  if (yyn == 1643)
//    /* "sql_yacc.y":11422  */
//          {
//            yyval= NEW_PTN PT_exclusion((yyloc), WFX_GROUP);
//          };
			break;

		case 1644: /* opt_window_frame_exclusion: EXCLUDE_SYM TIES_SYM */
//  if (yyn == 1644)
//    /* "sql_yacc.y":11426  */
//          {
//            yyval= NEW_PTN PT_exclusion((yyloc), WFX_TIES);
//          };
			break;

		case 1645: /* opt_window_frame_exclusion: EXCLUDE_SYM NO_SYM OTHERS_SYM */
//  if (yyn == 1645)
//    /* "sql_yacc.y":11430  */
//          { yyval= NEW_PTN PT_exclusion((yyloc), WFX_NO_OTHERS);
//          };
			break;

		case 1646: /* window_frame_units: ROWS_SYM */
//  if (yyn == 1646)
//    /* "sql_yacc.y":11435  */
//                      { yyval= WFU_ROWS; };
			break;

		case 1647: /* window_frame_units: RANGE_SYM */
//  if (yyn == 1647)
//    /* "sql_yacc.y":11436  */
//                      { yyval= WFU_RANGE; };
			break;

		case 1648: /* window_frame_units: GROUPS_SYM */
//  if (yyn == 1648)
//    /* "sql_yacc.y":11437  */
//                      { yyval= WFU_GROUPS; };
			break;

		case 1649: /* grouping_operation: GROUPING_SYM '(' expr_list ')' */
//  if (yyn == 1649)
//    /* "sql_yacc.y":11442  */
//          {
//            yyval= NEW_PTN Item_func_grouping((yyloc), ((item_list2)(yystack.valueAt (1))));
//          };
			break;

		case 1650: /* in_expression_user_variable_assignment: '@' ident_or_text SET_VAR expr */
//  if (yyn == 1650)
//    /* "sql_yacc.y":11449  */
//          {
//            push_warning(YYTHD, Sql_condition::SL_WARNING,
//                         ER_WARN_DEPRECATED_SYNTAX,
//                         ER_THD(YYTHD, ER_WARN_DEPRECATED_USER_SET_EXPR));
//            yyval = NEW_PTN PTI_variable_aux_set_var((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1651: /* rvalue_system_or_user_variable: '@' ident_or_text */
//  if (yyn == 1651)
//    /* "sql_yacc.y":11459  */
//          {
//            yyval = NEW_PTN PTI_user_variable((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 1652: /* rvalue_system_or_user_variable: '@' '@' opt_rvalue_system_variable_type rvalue_system_variable */
//  if (yyn == 1652)
//    /* "sql_yacc.y":11463  */
//          {
//            yyval = NEW_PTN PTI_get_system_variable((yyloc), ((var_type)(yystack.valueAt (1))),
//                                                 yystack.locationAt (0), ((bipartite_name)(yystack.valueAt (0))).prefix, ((bipartite_name)(yystack.valueAt (0))).name);
//          };
			break;

		case 1653: /* opt_distinct: %empty */
//  if (yyn == 1653)
//    /* "sql_yacc.y":11470  */
//                      { yyval = 0; };
			break;

		case 1654: /* opt_distinct: DISTINCT */
//  if (yyn == 1654)
//    /* "sql_yacc.y":11471  */
//                      { yyval = 1; };
			break;

		case 1655: /* opt_gconcat_separator: %empty */
//  if (yyn == 1655)
//    /* "sql_yacc.y":11476  */
//          {
//            yyval= NEW_PTN String(",", 1, &my_charset_latin1);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1656: /* opt_gconcat_separator: SEPARATOR_SYM text_string */
//  if (yyn == 1656)
//    /* "sql_yacc.y":11481  */
//                                    { yyval = ((string)(yystack.valueAt (0))); };
			break;

		case 1657: /* opt_gorder_clause: %empty */
//  if (yyn == 1657)
//    /* "sql_yacc.y":11485  */
//                                    { yyval= nullptr; };
			break;

		case 1658: /* opt_gorder_clause: ORDER_SYM BY gorder_list */
//  if (yyn == 1658)
//    /* "sql_yacc.y":11486  */
//                                    { yyval= ((order_list)(yystack.valueAt (0))); };
			break;

		case 1659: /* gorder_list: gorder_list ',' order_expr */
//  if (yyn == 1659)
//    /* "sql_yacc.y":11491  */
//          {
//            ((order_list)(yystack.valueAt (2)))->push_back(((order_expr)(yystack.valueAt (0))));
//            yyval= ((order_list)(yystack.valueAt (2)));
//            // This will override earlier list, until
//            // we get the whole location.
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1660: /* gorder_list: order_expr */
//  if (yyn == 1660)
//    /* "sql_yacc.y":11499  */
//          {
//            yyval= NEW_PTN PT_gorder_list((yyloc));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((order_expr)(yystack.valueAt (0))));
//          };
			break;

		case 1661: /* in_sum_expr: opt_all expr */
//  if (yyn == 1661)
//    /* "sql_yacc.y":11509  */
//          {
//            yyval= NEW_PTN PTI_in_sum_expr(yystack.locationAt (1), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1662: /* cast_type: BINARY_SYM opt_field_length */
//  if (yyn == 1662)
//    /* "sql_yacc.y":11516  */
//          {
//            yyval.target= ITEM_CAST_CHAR;
//            yyval.charset= &my_charset_bin;
//            yyval.length= ((c_str)(yystack.valueAt (0)));
//            yyval.dec= nullptr;
//          };
			break;

		case 1663: /* cast_type: CHAR_SYM opt_field_length opt_charset_with_opt_binary */
//  if (yyn == 1663)
//    /* "sql_yacc.y":11523  */
//          {
//            yyval.target= ITEM_CAST_CHAR;
//            yyval.length= ((c_str)(yystack.valueAt (1)));
//            yyval.dec= nullptr;
//            if (((charset_with_opt_binary)(yystack.valueAt (0))).force_binary)
//            {
//              // Bugfix: before this patch we ignored [undocumented]
//              // collation modifier in the CAST(expr, CHAR(...) BINARY) syntax.
//              // To restore old behavior just remove this "if ($3...)" branch.

//              yyval.charset= get_bin_collation(((charset_with_opt_binary)(yystack.valueAt (0))).charset ? ((charset_with_opt_binary)(yystack.valueAt (0))).charset :
//                  YYTHD->variables.collation_connection);
//              if (yyval.charset == nullptr)
//                MYSQL_YYABORT;
//            }
//            else
//              yyval.charset= ((charset_with_opt_binary)(yystack.valueAt (0))).charset;
//          };
			break;

		case 1664: /* cast_type: nchar opt_field_length */
//  if (yyn == 1664)
//    /* "sql_yacc.y":11542  */
//          {
//            yyval.target= ITEM_CAST_CHAR;
//            yyval.charset= national_charset_info;
//            yyval.length= ((c_str)(yystack.valueAt (0)));
//            yyval.dec= nullptr;
//            warn_about_deprecated_national(YYTHD);
//          };
			break;

		case 1665: /* cast_type: SIGNED_SYM */
//  if (yyn == 1665)
//    /* "sql_yacc.y":11550  */
//          {
//            yyval.target= ITEM_CAST_SIGNED_INT;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1666: /* cast_type: SIGNED_SYM INT_SYM */
//  if (yyn == 1666)
//    /* "sql_yacc.y":11557  */
//          {
//            yyval.target= ITEM_CAST_SIGNED_INT;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1667: /* cast_type: UNSIGNED_SYM */
//  if (yyn == 1667)
//    /* "sql_yacc.y":11564  */
//          {
//            yyval.target= ITEM_CAST_UNSIGNED_INT;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1668: /* cast_type: UNSIGNED_SYM INT_SYM */
//  if (yyn == 1668)
//    /* "sql_yacc.y":11571  */
//          {
//            yyval.target= ITEM_CAST_UNSIGNED_INT;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1669: /* cast_type: DATE_SYM */
//  if (yyn == 1669)
//    /* "sql_yacc.y":11578  */
//          {
//            yyval.target= ITEM_CAST_DATE;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1670: /* cast_type: YEAR_SYM */
//  if (yyn == 1670)
//    /* "sql_yacc.y":11585  */
//          {
//            yyval.target= ITEM_CAST_YEAR;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1671: /* cast_type: TIME_SYM type_datetime_precision */
//  if (yyn == 1671)
//    /* "sql_yacc.y":11592  */
//          {
//            yyval.target= ITEM_CAST_TIME;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= ((c_str)(yystack.valueAt (0)));
//          };
			break;

		case 1672: /* cast_type: DATETIME_SYM type_datetime_precision */
//  if (yyn == 1672)
//    /* "sql_yacc.y":11599  */
//          {
//            yyval.target= ITEM_CAST_DATETIME;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= ((c_str)(yystack.valueAt (0)));
//          };
			break;

		case 1673: /* cast_type: DECIMAL_SYM float_options */
//  if (yyn == 1673)
//    /* "sql_yacc.y":11606  */
//          {
//            yyval.target=ITEM_CAST_DECIMAL;
//            yyval.charset= nullptr;
//            yyval.length= ((precision)(yystack.valueAt (0))).length;
//            yyval.dec= ((precision)(yystack.valueAt (0))).dec;
//          };
			break;

		case 1674: /* cast_type: JSON_SYM */
//  if (yyn == 1674)
//    /* "sql_yacc.y":11613  */
//          {
//            yyval.target=ITEM_CAST_JSON;
//            yyval.charset= nullptr;
//            yyval.length= nullptr;
//            yyval.dec= nullptr;
//          };
			break;

		case 1675: /* cast_type: real_type */
//  if (yyn == 1675)
//    /* "sql_yacc.y":11620  */
//          {
//            yyval.target = (((numeric_type)(yystack.valueAt (0))) == Numeric_type::DOUBLE) ?
//              ITEM_CAST_DOUBLE : ITEM_CAST_FLOAT;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1676: /* cast_type: FLOAT_SYM standard_float_options */
//  if (yyn == 1676)
//    /* "sql_yacc.y":11628  */
//          {
//            yyval.target = ITEM_CAST_FLOAT;
//            yyval.charset = nullptr;
//            yyval.length = ((precision)(yystack.valueAt (0))).length;
//            yyval.dec = nullptr;
//          };
			break;

		case 1677: /* cast_type: POINT_SYM */
//  if (yyn == 1677)
//    /* "sql_yacc.y":11635  */
//          {
//            yyval.target = ITEM_CAST_POINT;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1678: /* cast_type: LINESTRING_SYM */
//  if (yyn == 1678)
//    /* "sql_yacc.y":11642  */
//          {
//            yyval.target = ITEM_CAST_LINESTRING;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1679: /* cast_type: POLYGON_SYM */
//  if (yyn == 1679)
//    /* "sql_yacc.y":11649  */
//          {
//            yyval.target = ITEM_CAST_POLYGON;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1680: /* cast_type: MULTIPOINT_SYM */
//  if (yyn == 1680)
//    /* "sql_yacc.y":11656  */
//          {
//            yyval.target = ITEM_CAST_MULTIPOINT;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1681: /* cast_type: MULTILINESTRING_SYM */
//  if (yyn == 1681)
//    /* "sql_yacc.y":11663  */
//          {
//            yyval.target = ITEM_CAST_MULTILINESTRING;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1682: /* cast_type: MULTIPOLYGON_SYM */
//  if (yyn == 1682)
//    /* "sql_yacc.y":11670  */
//          {
//            yyval.target = ITEM_CAST_MULTIPOLYGON;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1683: /* cast_type: GEOMETRYCOLLECTION_SYM */
//  if (yyn == 1683)
//    /* "sql_yacc.y":11677  */
//          {
//            yyval.target = ITEM_CAST_GEOMETRYCOLLECTION;
//            yyval.charset = nullptr;
//            yyval.length = nullptr;
//            yyval.dec = nullptr;
//          };
			break;

		case 1684: /* opt_expr_list: %empty */
//  if (yyn == 1684)
//    /* "sql_yacc.y":11686  */
//                 { yyval= nullptr; };
			break;

		case 1686: /* expr_list: expr */
//  if (yyn == 1686)
//    /* "sql_yacc.y":11692  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1687: /* expr_list: expr_list ',' expr */
//  if (yyn == 1687)
//    /* "sql_yacc.y":11698  */
//          {
//            if (((item_list2)(yystack.valueAt (2))) == nullptr || ((item_list2)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            // This will override location of earlier list, until we get the
//            // whole location.
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1688: /* ident_list_arg: ident_list */
//  if (yyn == 1688)
//    /* "sql_yacc.y":11709  */
//                              { yyval= ((item_list2)(yystack.valueAt (0))); };
			break;

		case 1689: /* ident_list_arg: '(' ident_list ')' */
//  if (yyn == 1689)
//    /* "sql_yacc.y":11710  */
//                              { yyval= ((item_list2)(yystack.valueAt (1))); };
			break;

		case 1690: /* ident_list: simple_ident */
//  if (yyn == 1690)
//    /* "sql_yacc.y":11715  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1691: /* ident_list: ident_list ',' simple_ident */
//  if (yyn == 1691)
//    /* "sql_yacc.y":11721  */
//          {
//            if (((item_list2)(yystack.valueAt (2))) == nullptr || ((item_list2)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1692: /* opt_expr: %empty */
//  if (yyn == 1692)
//    /* "sql_yacc.y":11730  */
//                         { yyval= nullptr; };
			break;

		case 1693: /* opt_expr: expr */
//  if (yyn == 1693)
//    /* "sql_yacc.y":11731  */
//                         { yyval= ((item)(yystack.valueAt (0))); };
			break;

		case 1694: /* opt_else: %empty */
//  if (yyn == 1694)
//    /* "sql_yacc.y":11735  */
//                       { yyval= nullptr; };
			break;

		case 1695: /* opt_else: ELSE expr */
//  if (yyn == 1695)
//    /* "sql_yacc.y":11736  */
//                       { yyval= ((item)(yystack.valueAt (0))); };
			break;

		case 1696: /* when_list: WHEN_SYM expr THEN_SYM expr */
//  if (yyn == 1696)
//    /* "sql_yacc.y":11741  */
//          {
//            yyval= new (YYMEM_ROOT) mem_root_deque<Item *>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((item)(yystack.valueAt (2))));
//            yyval->push_back(((item)(yystack.valueAt (0))));
//          };
			break;

		case 1697: /* when_list: when_list WHEN_SYM expr THEN_SYM expr */
//  if (yyn == 1697)
//    /* "sql_yacc.y":11749  */
//          {
//            ((item_list)(yystack.valueAt (4)))->push_back(((item)(yystack.valueAt (2))));
//            ((item_list)(yystack.valueAt (4)))->push_back(((item)(yystack.valueAt (0))));
//            yyval= ((item_list)(yystack.valueAt (4)));
//          };
			break;

		case 1698: /* table_reference: table_factor */
//  if (yyn == 1698)
//    /* "sql_yacc.y":11757  */
//                       { yyval= ((table_reference)(yystack.valueAt (0))); };
			break;

		case 1699: /* table_reference: joined_table */
//  if (yyn == 1699)
//    /* "sql_yacc.y":11758  */
//                       { yyval= ((join_table)(yystack.valueAt (0))); };
			break;

		case 1700: /* table_reference: '{' OJ_SYM esc_table_reference '}' */
//  if (yyn == 1700)
//    /* "sql_yacc.y":11760  */
//          {
//            /*
//              The ODBC escape syntax for Outer Join.

//              All productions from table_factor and joined_table can be escaped,
//              not only the '{LEFT | RIGHT} [OUTER] JOIN' syntax.
//            */
//            yyval = ((table_reference)(yystack.valueAt (1)));
//          };
			break;

		case 1701: /* esc_table_reference: table_factor */
//  if (yyn == 1701)
//    /* "sql_yacc.y":11772  */
//                       { yyval= ((table_reference)(yystack.valueAt (0))); };
			break;

		case 1702: /* esc_table_reference: joined_table */
//  if (yyn == 1702)
//    /* "sql_yacc.y":11773  */
//                       { yyval= ((join_table)(yystack.valueAt (0))); };
			break;

		case 1703: /* joined_table: table_reference inner_join_type table_reference ON_SYM expr */
//  if (yyn == 1703)
//    /* "sql_yacc.y":11855  */
//          {
//            yyval= NEW_PTN PT_joined_table_on((yyloc), ((table_reference)(yystack.valueAt (4))), yystack.locationAt (3), ((join_type)(yystack.valueAt (3))), ((table_reference)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1704: /* joined_table: table_reference inner_join_type table_reference USING '(' using_list ')' */
//  if (yyn == 1704)
//    /* "sql_yacc.y":11860  */
//          {
//            yyval= NEW_PTN PT_joined_table_using((yyloc), ((table_reference)(yystack.valueAt (6))), yystack.locationAt (5), ((join_type)(yystack.valueAt (5))), ((table_reference)(yystack.valueAt (4))), ((string_list)(yystack.valueAt (1))));
//          };
			break;

		case 1705: /* joined_table: table_reference outer_join_type table_reference ON_SYM expr */
//  if (yyn == 1705)
//    /* "sql_yacc.y":11864  */
//          {
//            yyval= NEW_PTN PT_joined_table_on((yyloc), ((table_reference)(yystack.valueAt (4))), yystack.locationAt (3), ((join_type)(yystack.valueAt (3))), ((table_reference)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1706: /* joined_table: table_reference outer_join_type table_reference USING '(' using_list ')' */
//  if (yyn == 1706)
//    /* "sql_yacc.y":11868  */
//          {
//            yyval= NEW_PTN PT_joined_table_using((yyloc), ((table_reference)(yystack.valueAt (6))), yystack.locationAt (5), ((join_type)(yystack.valueAt (5))), ((table_reference)(yystack.valueAt (4))), ((string_list)(yystack.valueAt (1))));
//          };
			break;

		case 1707: /* joined_table: table_reference inner_join_type table_reference */
//  if (yyn == 1707)
//    /* "sql_yacc.y":11873  */
//          {
//            auto this_cross_join= NEW_PTN PT_cross_join((yyloc), ((table_reference)(yystack.valueAt (2))), yystack.locationAt (1), ((join_type)(yystack.valueAt (1))), nullptr);

//            if (((table_reference)(yystack.valueAt (0))) == nullptr)
//              MYSQL_YYABORT; // OOM

//            yyval= ((table_reference)(yystack.valueAt (0)))->add_cross_join(this_cross_join);
//          };
			break;

		case 1708: /* joined_table: table_reference natural_join_type table_factor */
//  if (yyn == 1708)
//    /* "sql_yacc.y":11882  */
//          {
//            yyval= NEW_PTN PT_joined_table_using((yyloc), ((table_reference)(yystack.valueAt (2))), yystack.locationAt (1), ((join_type)(yystack.valueAt (1))), ((table_reference)(yystack.valueAt (0))));
//          };
			break;

		case 1709: /* natural_join_type: NATURAL opt_inner JOIN_SYM */
//  if (yyn == 1709)
//    /* "sql_yacc.y":11888  */
//                                           { yyval= JTT_NATURAL_INNER; };
			break;

		case 1710: /* natural_join_type: NATURAL RIGHT opt_outer JOIN_SYM */
//  if (yyn == 1710)
//    /* "sql_yacc.y":11889  */
//                                           { yyval= JTT_NATURAL_RIGHT; };
			break;

		case 1711: /* natural_join_type: NATURAL LEFT opt_outer JOIN_SYM */
//  if (yyn == 1711)
//    /* "sql_yacc.y":11890  */
//                                           { yyval= JTT_NATURAL_LEFT; };
			break;

		case 1712: /* inner_join_type: JOIN_SYM */
//  if (yyn == 1712)
//    /* "sql_yacc.y":11894  */
//                                           { yyval= JTT_INNER; };
			break;

		case 1713: /* inner_join_type: INNER_SYM JOIN_SYM */
//  if (yyn == 1713)
//    /* "sql_yacc.y":11895  */
//                                           { yyval= JTT_INNER; };
			break;

		case 1714: /* inner_join_type: CROSS JOIN_SYM */
//  if (yyn == 1714)
//    /* "sql_yacc.y":11896  */
//                                           { yyval= JTT_INNER; };
			break;

		case 1715: /* inner_join_type: STRAIGHT_JOIN */
//  if (yyn == 1715)
//    /* "sql_yacc.y":11897  */
//                                           { yyval= JTT_STRAIGHT_INNER; };
			break;

		case 1716: /* outer_join_type: LEFT opt_outer JOIN_SYM */
//  if (yyn == 1716)
//    /* "sql_yacc.y":11900  */
//                                           { yyval= JTT_LEFT; };
			break;

		case 1717: /* outer_join_type: RIGHT opt_outer JOIN_SYM */
//  if (yyn == 1717)
//    /* "sql_yacc.y":11901  */
//                                           { yyval= JTT_RIGHT; };
			break;

		case 1722: /* opt_use_partition: %empty */
//  if (yyn == 1722)
//    /* "sql_yacc.y":11919  */
//                 { yyval= nullptr; };
			break;

		case 1724: /* use_partition: PARTITION_SYM '(' using_list ')' */
//  if (yyn == 1724)
//    /* "sql_yacc.y":11925  */
//          {
//            yyval= ((string_list)(yystack.valueAt (1)));
//          };
			break;

		case 1727: /* table_factor: derived_table */
//  if (yyn == 1727)
//    /* "sql_yacc.y":11955  */
//                        { yyval = ((derived_table)(yystack.valueAt (0))); };
			break;

		case 1728: /* table_factor: joined_table_parens */
//  if (yyn == 1728)
//    /* "sql_yacc.y":11957  */
//          { yyval= NEW_PTN PT_table_factor_joined_table((yyloc), ((join_table)(yystack.valueAt (0)))); };
			break;

		case 1729: /* table_factor: table_reference_list_parens */
//  if (yyn == 1729)
//    /* "sql_yacc.y":11959  */
//          { yyval= NEW_PTN PT_table_reference_list_parens((yyloc), ((table_reference_list)(yystack.valueAt (0)))); };
			break;

		case 1730: /* table_factor: table_function */
//  if (yyn == 1730)
//    /* "sql_yacc.y":11960  */
//                         { yyval = ((table_reference)(yystack.valueAt (0))); };
			break;

		case 1731: /* table_reference_list_parens: '(' table_reference_list_parens ')' */
//  if (yyn == 1731)
//    /* "sql_yacc.y":11964  */
//                                              { yyval= ((table_reference_list)(yystack.valueAt (1))); };
			break;

		case 1732: /* table_reference_list_parens: '(' table_reference_list ',' table_reference ')' */
//  if (yyn == 1732)
//    /* "sql_yacc.y":11966  */
//          {
//            yyval= ((table_reference_list)(yystack.valueAt (3)));
//            if (yyval.push_back(((table_reference)(yystack.valueAt (1)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1733: /* single_table_parens: '(' single_table_parens ')' */
//  if (yyn == 1733)
//    /* "sql_yacc.y":11974  */
//                                      { yyval= ((table_reference)(yystack.valueAt (1))); };
			break;

		case 1734: /* single_table_parens: '(' single_table ')' */
//  if (yyn == 1734)
//    /* "sql_yacc.y":11975  */
//                               { yyval= ((table_reference)(yystack.valueAt (1))); };
			break;

		case 1735: /* single_table: table_ident opt_use_partition opt_table_alias opt_key_definition opt_tablesample_clause */
//  if (yyn == 1735)
//    /* "sql_yacc.y":11980  */
//          {
//            yyval= NEW_PTN PT_table_factor_table_ident((yyloc), ((table)(yystack.valueAt (4))), ((string_list)(yystack.valueAt (3))), ((lex_cstr)(yystack.valueAt (2))), ((key_usage_list)(yystack.valueAt (1))), ((tablesample)(yystack.valueAt (0))));
//          };
			break;

		case 1736: /* joined_table_parens: '(' joined_table_parens ')' */
//  if (yyn == 1736)
//    /* "sql_yacc.y":11986  */
//                                      { yyval= ((join_table)(yystack.valueAt (1))); };
			break;

		case 1737: /* joined_table_parens: '(' joined_table ')' */
//  if (yyn == 1737)
//    /* "sql_yacc.y":11987  */
//                               { yyval= ((join_table)(yystack.valueAt (1))); };
			break;

		case 1738: /* derived_table: table_subquery opt_table_alias opt_derived_column_list */
//  if (yyn == 1738)
//    /* "sql_yacc.y":11992  */
//          {
//            /*
//              The alias is actually not optional at all, but being MySQL we
//              are friendly and give an informative error message instead of
//              just 'syntax error'.
//            */
//            if (((lex_cstr)(yystack.valueAt (1))).str == nullptr)
//              my_message(ER_DERIVED_MUST_HAVE_ALIAS,
//                         ER_THD(YYTHD, ER_DERIVED_MUST_HAVE_ALIAS), MYF(0));

//            yyval= NEW_PTN PT_derived_table((yyloc), false, ((subquery)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (1))), &((simple_ident_list)(yystack.valueAt (0))));
//          };
			break;

		case 1739: /* derived_table: LATERAL_SYM table_subquery opt_table_alias opt_derived_column_list */
//  if (yyn == 1739)
//    /* "sql_yacc.y":12005  */
//          {
//            if (((lex_cstr)(yystack.valueAt (1))).str == nullptr)
//              my_message(ER_DERIVED_MUST_HAVE_ALIAS,
//                         ER_THD(YYTHD, ER_DERIVED_MUST_HAVE_ALIAS), MYF(0));

//            yyval= NEW_PTN PT_derived_table((yyloc), true, ((subquery)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (1))), &((simple_ident_list)(yystack.valueAt (0))));
//          };
			break;

		case 1740: /* table_function: JSON_TABLE_SYM '(' expr ',' text_literal columns_clause ')' opt_table_alias */
//  if (yyn == 1740)
//    /* "sql_yacc.y":12017  */
//          {
//            // Alias isn't optional, follow derived's behavior
//            if (((lex_cstr)(yystack.valueAt (0))) == NULL_CSTR)
//            {
//              my_message(ER_TF_MUST_HAVE_ALIAS,
//                         ER_THD(YYTHD, ER_TF_MUST_HAVE_ALIAS), MYF(0));
//              MYSQL_YYABORT;
//            }

//            yyval= NEW_PTN PT_table_factor_function((yyloc), ((item)(yystack.valueAt (5))), ((text_literal)(yystack.valueAt (3))), ((jtc_list)(yystack.valueAt (2))), to_lex_string(((lex_cstr)(yystack.valueAt (0)))));
//          };
			break;

		case 1741: /* columns_clause: COLUMNS '(' columns_list ')' */
//  if (yyn == 1741)
//    /* "sql_yacc.y":12032  */
//          {
//            yyval= ((jtc_list)(yystack.valueAt (1)));
//          };
			break;

		case 1742: /* columns_list: jt_column */
//  if (yyn == 1742)
//    /* "sql_yacc.y":12039  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_json_table_column *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((jt_column)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1743: /* columns_list: columns_list ',' jt_column */
//  if (yyn == 1743)
//    /* "sql_yacc.y":12045  */
//          {
//            yyval= ((jtc_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((jt_column)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1744: /* jt_column: ident FOR_SYM ORDINALITY_SYM */
//  if (yyn == 1744)
//    /* "sql_yacc.y":12054  */
//          {
//            yyval= NEW_PTN PT_json_table_column_for_ordinality((yyloc), ((lexer.lex_str)(yystack.valueAt (2))));
//          };
			break;

		case 1745: /* jt_column: ident type opt_collate jt_column_type PATH_SYM text_literal opt_on_empty_or_error_json_table */
//  if (yyn == 1745)
//    /* "sql_yacc.y":12059  */
//          {
//            auto column = make_unique_destroy_only<Json_table_column>(
//                YYMEM_ROOT, ((jt_column_type)(yystack.valueAt (3))), ((text_literal)(yystack.valueAt (1))), ((json_on_error_or_empty)(yystack.valueAt (0))).error.type, ((json_on_error_or_empty)(yystack.valueAt (0))).error.default_string,
//                ((json_on_error_or_empty)(yystack.valueAt (0))).empty.type, ((json_on_error_or_empty)(yystack.valueAt (0))).empty.default_string);
//            if (column == nullptr) MYSQL_YYABORT;  // OOM
//            yyval = NEW_PTN PT_json_table_column_with_path((yyloc), std::move(column), ((lexer.lex_str)(yystack.valueAt (6))),
//                                                        ((type)(yystack.valueAt (5))), ((lexer.charset)(yystack.valueAt (4))));
//          };
			break;

		case 1746: /* jt_column: NESTED_SYM PATH_SYM text_literal columns_clause */
//  if (yyn == 1746)
//    /* "sql_yacc.y":12068  */
//          {
//            yyval= NEW_PTN PT_json_table_column_with_nested_path((yyloc), ((text_literal)(yystack.valueAt (1))), ((jtc_list)(yystack.valueAt (0))));
//          };
			break;

		case 1747: /* jt_column_type: %empty */
//  if (yyn == 1747)
//    /* "sql_yacc.y":12075  */
//          {
//            yyval= enum_jt_column::JTC_PATH;
//          };
			break;

		case 1748: /* jt_column_type: EXISTS */
//  if (yyn == 1748)
//    /* "sql_yacc.y":12079  */
//          {
//            yyval= enum_jt_column::JTC_EXISTS;
//          };
			break;

		case 1749: /* opt_on_empty_or_error: %empty */
//  if (yyn == 1749)
//    /* "sql_yacc.y":12089  */
//          {
//            yyval.empty = {Json_on_response_type::IMPLICIT, nullptr};
//            yyval.error = {Json_on_response_type::IMPLICIT, nullptr};
//          };
			break;

		case 1750: /* opt_on_empty_or_error: on_empty */
//  if (yyn == 1750)
//    /* "sql_yacc.y":12094  */
//          {
//            yyval.empty = ((json_on_response)(yystack.valueAt (0)));
//            yyval.error = {Json_on_response_type::IMPLICIT, nullptr};
//          };
			break;

		case 1751: /* opt_on_empty_or_error: on_error */
//  if (yyn == 1751)
//    /* "sql_yacc.y":12099  */
//          {
//            yyval.error = ((json_on_response)(yystack.valueAt (0)));
//            yyval.empty = {Json_on_response_type::IMPLICIT, nullptr};
//          };
			break;

		case 1752: /* opt_on_empty_or_error: on_empty on_error */
//  if (yyn == 1752)
//    /* "sql_yacc.y":12104  */
//          {
//            yyval.empty = ((json_on_response)(yystack.valueAt (1)));
//            yyval.error = ((json_on_response)(yystack.valueAt (0)));
//          };
			break;

		case 1753: /* opt_on_empty_or_error_json_table: opt_on_empty_or_error */
//  if (yyn == 1753)
//    /* "sql_yacc.y":12112  */
//                                { yyval = ((json_on_error_or_empty)(yystack.valueAt (0))); };
			break;

		case 1754: /* opt_on_empty_or_error_json_table: on_error on_empty */
//  if (yyn == 1754)
//    /* "sql_yacc.y":12114  */
//          {
//            push_warning(
//              YYTHD, Sql_condition::SL_WARNING, ER_WARN_DEPRECATED_SYNTAX,
//              ER_THD(YYTHD, ER_WARN_DEPRECATED_JSON_TABLE_ON_ERROR_ON_EMPTY));
//            yyval.error = ((json_on_response)(yystack.valueAt (1)));
//            yyval.empty = ((json_on_response)(yystack.valueAt (0)));
//          };
			break;

		case 1755: /* on_empty: json_on_response ON_SYM EMPTY_SYM */
//  if (yyn == 1755)
//    /* "sql_yacc.y":12124  */
//                                                { yyval= ((json_on_response)(yystack.valueAt (2))); };
			break;

		case 1756: /* on_error: json_on_response ON_SYM ERROR_SYM */
//  if (yyn == 1756)
//    /* "sql_yacc.y":12127  */
//                                                { yyval= ((json_on_response)(yystack.valueAt (2))); };
			break;

		case 1757: /* json_on_response: ERROR_SYM */
//  if (yyn == 1757)
//    /* "sql_yacc.y":12131  */
//          {
//            yyval = {Json_on_response_type::ERROR, nullptr};
//          };
			break;

		case 1758: /* json_on_response: NULL_SYM */
//  if (yyn == 1758)
//    /* "sql_yacc.y":12135  */
//          {
//            yyval = {Json_on_response_type::NULL_VALUE, nullptr};
//          };
			break;

		case 1759: /* json_on_response: DEFAULT_SYM signed_literal */
//  if (yyn == 1759)
//    /* "sql_yacc.y":12139  */
//          {
//            yyval = {Json_on_response_type::DEFAULT, ((item)(yystack.valueAt (0)))};
//          };
			break;

		case 1760: /* index_hint_clause: %empty */
//  if (yyn == 1760)
//    /* "sql_yacc.y":12146  */
//          {
//            yyval= INDEX_HINT_MASK_ALL;
//          };
			break;

		case 1761: /* index_hint_clause: FOR_SYM JOIN_SYM */
//  if (yyn == 1761)
//    /* "sql_yacc.y":12149  */
//                                { yyval= INDEX_HINT_MASK_JOIN;  };
			break;

		case 1762: /* index_hint_clause: FOR_SYM ORDER_SYM BY */
//  if (yyn == 1762)
//    /* "sql_yacc.y":12150  */
//                                { yyval= INDEX_HINT_MASK_ORDER; };
			break;

		case 1763: /* index_hint_clause: FOR_SYM GROUP_SYM BY */
//  if (yyn == 1763)
//    /* "sql_yacc.y":12151  */
//                                { yyval= INDEX_HINT_MASK_GROUP; };
			break;

		case 1764: /* index_hint_type: FORCE_SYM */
//  if (yyn == 1764)
//    /* "sql_yacc.y":12155  */
//                     { yyval= INDEX_HINT_FORCE; };
			break;

		case 1765: /* index_hint_type: IGNORE_SYM */
//  if (yyn == 1765)
//    /* "sql_yacc.y":12156  */
//                     { yyval= INDEX_HINT_IGNORE; };
			break;

		case 1766: /* index_hint_definition: index_hint_type key_or_index index_hint_clause '(' key_usage_list ')' */
//  if (yyn == 1766)
//    /* "sql_yacc.y":12162  */
//          {
//            init_index_hints(((key_usage_list)(yystack.valueAt (1))), ((index_hint)(yystack.valueAt (5))), ((num)(yystack.valueAt (3))));
//            yyval= ((key_usage_list)(yystack.valueAt (1)));
//          };
			break;

		case 1767: /* index_hint_definition: USE_SYM key_or_index index_hint_clause '(' opt_key_usage_list ')' */
//  if (yyn == 1767)
//    /* "sql_yacc.y":12168  */
//          {
//            init_index_hints(((key_usage_list)(yystack.valueAt (1))), INDEX_HINT_USE, ((num)(yystack.valueAt (3))));
//            yyval= ((key_usage_list)(yystack.valueAt (1)));
//          };
			break;

		case 1769: /* index_hints_list: index_hints_list index_hint_definition */
//  if (yyn == 1769)
//    /* "sql_yacc.y":12177  */
//          {
//            ((key_usage_list)(yystack.valueAt (0)))->concat(((key_usage_list)(yystack.valueAt (1))));
//            yyval= ((key_usage_list)(yystack.valueAt (0)));
//          };
			break;

		case 1770: /* opt_index_hints_list: %empty */
//  if (yyn == 1770)
//    /* "sql_yacc.y":12184  */
//                 { yyval= nullptr; };
			break;

		case 1773: /* opt_key_usage_list: %empty */
//  if (yyn == 1773)
//    /* "sql_yacc.y":12194  */
//          {
//            yyval= NEW_PTN List<Index_hint>;
//            Index_hint *hint= NEW_PTN Index_hint(nullptr, 0);
//            if (yyval == nullptr || hint == nullptr || yyval->push_front(hint))
//              MYSQL_YYABORT;
//          };
			break;

		case 1775: /* key_usage_element: ident */
//  if (yyn == 1775)
//    /* "sql_yacc.y":12205  */
//          {
//            yyval= NEW_PTN Index_hint(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1776: /* key_usage_element: PRIMARY_SYM */
//  if (yyn == 1776)
//    /* "sql_yacc.y":12211  */
//          {
//            yyval= NEW_PTN Index_hint(STRING_WITH_LEN("PRIMARY"));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1777: /* key_usage_list: key_usage_element */
//  if (yyn == 1777)
//    /* "sql_yacc.y":12220  */
//          {
//            yyval= NEW_PTN List<Index_hint>;
//            if (yyval == nullptr || yyval->push_front(((key_usage_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1778: /* key_usage_list: key_usage_list ',' key_usage_element */
//  if (yyn == 1778)
//    /* "sql_yacc.y":12226  */
//          {
//            if (yyval->push_front(((key_usage_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1780: /* ident_string_list: ident */
//  if (yyn == 1780)
//    /* "sql_yacc.y":12238  */
//          {
//            yyval= NEW_PTN List<String>;
//            String *s= NEW_PTN String(const_cast<const char *>(((lexer.lex_str)(yystack.valueAt (0))).str),
//                                               ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                               system_charset_info);
//            if (yyval == nullptr || s == nullptr || yyval->push_back(s))
//              MYSQL_YYABORT;
//          };
			break;

		case 1781: /* ident_string_list: ident_string_list ',' ident */
//  if (yyn == 1781)
//    /* "sql_yacc.y":12247  */
//          {
//            String *s= NEW_PTN String(const_cast<const char *>(((lexer.lex_str)(yystack.valueAt (0))).str),
//                                               ((lexer.lex_str)(yystack.valueAt (0))).length,
//                                               system_charset_info);
//            if (s == nullptr || ((string_list)(yystack.valueAt (2)))->push_back(s))
//              MYSQL_YYABORT;
//            yyval= ((string_list)(yystack.valueAt (2)));
//          };
			break;

		case 1782: /* interval: interval_time_stamp */
//  if (yyn == 1782)
//    /* "sql_yacc.y":12258  */
//                                 {};
			break;

		case 1783: /* interval: DAY_HOUR_SYM */
//  if (yyn == 1783)
//    /* "sql_yacc.y":12259  */
//                                 { yyval=INTERVAL_DAY_HOUR; };
			break;

		case 1784: /* interval: DAY_MICROSECOND_SYM */
//  if (yyn == 1784)
//    /* "sql_yacc.y":12260  */
//                                 { yyval=INTERVAL_DAY_MICROSECOND; };
			break;

		case 1785: /* interval: DAY_MINUTE_SYM */
//  if (yyn == 1785)
//    /* "sql_yacc.y":12261  */
//                                 { yyval=INTERVAL_DAY_MINUTE; };
			break;

		case 1786: /* interval: DAY_SECOND_SYM */
//  if (yyn == 1786)
//    /* "sql_yacc.y":12262  */
//                                 { yyval=INTERVAL_DAY_SECOND; };
			break;

		case 1787: /* interval: HOUR_MICROSECOND_SYM */
//  if (yyn == 1787)
//    /* "sql_yacc.y":12263  */
//                                 { yyval=INTERVAL_HOUR_MICROSECOND; };
			break;

		case 1788: /* interval: HOUR_MINUTE_SYM */
//  if (yyn == 1788)
//    /* "sql_yacc.y":12264  */
//                                 { yyval=INTERVAL_HOUR_MINUTE; };
			break;

		case 1789: /* interval: HOUR_SECOND_SYM */
//  if (yyn == 1789)
//    /* "sql_yacc.y":12265  */
//                                 { yyval=INTERVAL_HOUR_SECOND; };
			break;

		case 1790: /* interval: MINUTE_MICROSECOND_SYM */
//  if (yyn == 1790)
//    /* "sql_yacc.y":12266  */
//                                 { yyval=INTERVAL_MINUTE_MICROSECOND; };
			break;

		case 1791: /* interval: MINUTE_SECOND_SYM */
//  if (yyn == 1791)
//    /* "sql_yacc.y":12267  */
//                                 { yyval=INTERVAL_MINUTE_SECOND; };
			break;

		case 1792: /* interval: SECOND_MICROSECOND_SYM */
//  if (yyn == 1792)
//    /* "sql_yacc.y":12268  */
//                                 { yyval=INTERVAL_SECOND_MICROSECOND; };
			break;

		case 1793: /* interval: YEAR_MONTH_SYM */
//  if (yyn == 1793)
//    /* "sql_yacc.y":12269  */
//                                 { yyval=INTERVAL_YEAR_MONTH; };
			break;

		case 1794: /* interval_time_stamp: DAY_SYM */
//  if (yyn == 1794)
//    /* "sql_yacc.y":12273  */
//                          { yyval=INTERVAL_DAY; };
			break;

		case 1795: /* interval_time_stamp: WEEK_SYM */
//  if (yyn == 1795)
//    /* "sql_yacc.y":12274  */
//                          { yyval=INTERVAL_WEEK; };
			break;

		case 1796: /* interval_time_stamp: HOUR_SYM */
//  if (yyn == 1796)
//    /* "sql_yacc.y":12275  */
//                          { yyval=INTERVAL_HOUR; };
			break;

		case 1797: /* interval_time_stamp: MINUTE_SYM */
//  if (yyn == 1797)
//    /* "sql_yacc.y":12276  */
//                          { yyval=INTERVAL_MINUTE; };
			break;

		case 1798: /* interval_time_stamp: MONTH_SYM */
//  if (yyn == 1798)
//    /* "sql_yacc.y":12277  */
//                          { yyval=INTERVAL_MONTH; };
			break;

		case 1799: /* interval_time_stamp: QUARTER_SYM */
//  if (yyn == 1799)
//    /* "sql_yacc.y":12278  */
//                          { yyval=INTERVAL_QUARTER; };
			break;

		case 1800: /* interval_time_stamp: SECOND_SYM */
//  if (yyn == 1800)
//    /* "sql_yacc.y":12279  */
//                          { yyval=INTERVAL_SECOND; };
			break;

		case 1801: /* interval_time_stamp: MICROSECOND_SYM */
//  if (yyn == 1801)
//    /* "sql_yacc.y":12280  */
//                          { yyval=INTERVAL_MICROSECOND; };
			break;

		case 1802: /* interval_time_stamp: YEAR_SYM */
//  if (yyn == 1802)
//    /* "sql_yacc.y":12281  */
//                          { yyval=INTERVAL_YEAR; };
			break;

		case 1803: /* date_time_type: DATE_SYM */
//  if (yyn == 1803)
//    /* "sql_yacc.y":12285  */
//                    {yyval= MYSQL_TIMESTAMP_DATE; };
			break;

		case 1804: /* date_time_type: TIME_SYM */
//  if (yyn == 1804)
//    /* "sql_yacc.y":12286  */
//                    {yyval= MYSQL_TIMESTAMP_TIME; };
			break;

		case 1805: /* date_time_type: TIMESTAMP_SYM */
//  if (yyn == 1805)
//    /* "sql_yacc.y":12287  */
//                        {yyval= MYSQL_TIMESTAMP_DATETIME; };
			break;

		case 1806: /* date_time_type: DATETIME_SYM */
//  if (yyn == 1806)
//    /* "sql_yacc.y":12288  */
//                        {yyval= MYSQL_TIMESTAMP_DATETIME; };
			break;

		case 1809: /* opt_table_alias: %empty */
//  if (yyn == 1809)
//    /* "sql_yacc.y":12297  */
//                 { yyval = NULL_CSTR; };
			break;

		case 1810: /* opt_table_alias: opt_as ident */
//  if (yyn == 1810)
//    /* "sql_yacc.y":12298  */
//                       { yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 1813: /* opt_where_clause: %empty */
//  if (yyn == 1813)
//    /* "sql_yacc.y":12307  */
//                 { yyval = nullptr; };
			break;

		case 1815: /* where_clause: WHERE expr */
//  if (yyn == 1815)
//    /* "sql_yacc.y":12312  */
//                        { yyval = NEW_PTN PTI_where(yystack.locationAt (0), ((item)(yystack.valueAt (0)))); };
			break;

		case 1816: /* opt_having_clause: %empty */
//  if (yyn == 1816)
//    /* "sql_yacc.y":12316  */
//                 { yyval= nullptr; };
			break;

		case 1817: /* opt_having_clause: HAVING expr */
//  if (yyn == 1817)
//    /* "sql_yacc.y":12318  */
//          {
//            yyval= new PTI_having((yyloc), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1818: /* opt_qualify_clause: %empty */
//  if (yyn == 1818)
//    /* "sql_yacc.y":12324  */
//                  { yyval= nullptr; };
			break;

		case 1819: /* opt_qualify_clause: QUALIFY_SYM expr */
//  if (yyn == 1819)
//    /* "sql_yacc.y":12326  */
//          {
//            yyval= new PTI_qualify((yyloc), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1820: /* with_clause: WITH with_list */
//  if (yyn == 1820)
//    /* "sql_yacc.y":12333  */
//          {
//            yyval= NEW_PTN PT_with_clause((yyloc), ((with_list)(yystack.valueAt (0))), false);
//          };
			break;

		case 1821: /* with_clause: WITH RECURSIVE_SYM with_list */
//  if (yyn == 1821)
//    /* "sql_yacc.y":12337  */
//          {
//            yyval= NEW_PTN PT_with_clause((yyloc), ((with_list)(yystack.valueAt (0))), true);
//          };
			break;

		case 1822: /* with_list: with_list ',' common_table_expr */
//  if (yyn == 1822)
//    /* "sql_yacc.y":12344  */
//          {
//            if (((with_list)(yystack.valueAt (2)))->push_back(((common_table_expr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1823: /* with_list: common_table_expr */
//  if (yyn == 1823)
//    /* "sql_yacc.y":12350  */
//          {
//            yyval= NEW_PTN PT_with_list((yyloc), YYTHD->mem_root);
//            if (yyval == nullptr || yyval->push_back(((common_table_expr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;    /* purecov: inspected */
//          };
			break;

		case 1824: /* common_table_expr: ident opt_derived_column_list AS table_subquery */
//  if (yyn == 1824)
//    /* "sql_yacc.y":12359  */
//          {
//            LEX_STRING subq_text;
//            subq_text.length= yystack.locationAt (0).cpp.length();
//            subq_text.str= YYTHD->strmake(yystack.locationAt (0).cpp.start, subq_text.length);
//            if (subq_text.str == nullptr)
//              MYSQL_YYABORT;   /* purecov: inspected */
//            uint subq_text_offset= yystack.locationAt (0).cpp.start - YYLIP->get_cpp_buf();
//            yyval= NEW_PTN PT_common_table_expr((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), subq_text, subq_text_offset,
//                                             ((subquery)(yystack.valueAt (0))), &((simple_ident_list)(yystack.valueAt (2))), YYTHD->mem_root);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;   /* purecov: inspected */
//          };
			break;

		case 1825: /* opt_derived_column_list: %empty */
//  if (yyn == 1825)
//    /* "sql_yacc.y":12375  */
//          {
//            /*
//              Because () isn't accepted by the rule of
//              simple_ident_list, we can use an empty array to
//              designates that the parenthesised list was omitted.
//            */
//            yyval.init(YYTHD->mem_root);
//          };
			break;

		case 1826: /* opt_derived_column_list: '(' simple_ident_list ')' */
//  if (yyn == 1826)
//    /* "sql_yacc.y":12384  */
//          {
//            yyval= ((simple_ident_list)(yystack.valueAt (1)));
//          };
			break;

		case 1827: /* simple_ident_list: ident */
//  if (yyn == 1827)
//    /* "sql_yacc.y":12391  */
//          {
//            yyval.init(YYTHD->mem_root);
//            if (yyval.push_back(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT; /* purecov: inspected */
//          };
			break;

		case 1828: /* simple_ident_list: simple_ident_list ',' ident */
//  if (yyn == 1828)
//    /* "sql_yacc.y":12397  */
//          {
//            yyval= ((simple_ident_list)(yystack.valueAt (2)));
//            if (yyval.push_back(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT;  /* purecov: inspected */
//          };
			break;

		case 1829: /* opt_window_clause: %empty */
//  if (yyn == 1829)
//    /* "sql_yacc.y":12406  */
//          {
//            yyval= nullptr;
//          };
			break;

		case 1830: /* opt_window_clause: WINDOW_SYM window_definition_list */
//  if (yyn == 1830)
//    /* "sql_yacc.y":12410  */
//          {
//            yyval= ((windows)(yystack.valueAt (0)));
//          };
			break;

		case 1831: /* window_definition_list: window_definition */
//  if (yyn == 1831)
//    /* "sql_yacc.y":12417  */
//          {
//            yyval= NEW_PTN PT_window_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((window)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1832: /* window_definition_list: window_definition_list ',' window_definition */
//  if (yyn == 1832)
//    /* "sql_yacc.y":12423  */
//          {
//            if (((windows)(yystack.valueAt (2)))->push_back(((window)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval= ((windows)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1833: /* window_definition: window_name AS window_spec */
//  if (yyn == 1833)
//    /* "sql_yacc.y":12433  */
//          {
//            yyval= ((window)(yystack.valueAt (0)));
//            if (yyval == nullptr)
//              MYSQL_YYABORT; // OOM
//            yyval->m_pos = (yyloc);
//            yyval->set_name(((item_string)(yystack.valueAt (2))));
//          };
			break;

		case 1834: /* opt_group_clause: %empty */
//  if (yyn == 1834)
//    /* "sql_yacc.y":12447  */
//                 { yyval= nullptr; };
			break;

		case 1835: /* opt_group_clause: GROUP_SYM BY group_list olap_opt */
//  if (yyn == 1835)
//    /* "sql_yacc.y":12449  */
//          {
//            yyval= NEW_PTN PT_group((yyloc), ((order_list)(yystack.valueAt (1))), ((olap_type)(yystack.valueAt (0))));
//          };
			break;

		case 1836: /* opt_group_clause: GROUP_SYM BY ROLLUP_SYM '(' group_list ')' */
//  if (yyn == 1836)
//    /* "sql_yacc.y":12453  */
//          {
//            yyval= NEW_PTN PT_group((yyloc), ((order_list)(yystack.valueAt (1))), ROLLUP_TYPE);
//          };
			break;

		case 1837: /* opt_group_clause: GROUP_SYM BY CUBE_SYM '(' group_list ')' */
//  if (yyn == 1837)
//    /* "sql_yacc.y":12457  */
//          {
//            yyval= NEW_PTN PT_group((yyloc), ((order_list)(yystack.valueAt (1))), CUBE_TYPE);
//          };
			break;

		case 1838: /* group_list: group_list ',' grouping_expr */
//  if (yyn == 1838)
//    /* "sql_yacc.y":12464  */
//          {
//            ((order_list)(yystack.valueAt (2)))->push_back(((order_expr)(yystack.valueAt (0))));
//            yyval= ((order_list)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1839: /* group_list: grouping_expr */
//  if (yyn == 1839)
//    /* "sql_yacc.y":12470  */
//          {
//            yyval= NEW_PTN PT_order_list((yyloc));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((order_expr)(yystack.valueAt (0))));
//          };
			break;

		case 1840: /* olap_opt: %empty */
//  if (yyn == 1840)
//    /* "sql_yacc.y":12480  */
//                 { yyval= UNSPECIFIED_OLAP_TYPE; };
			break;

		case 1841: /* olap_opt: WITH_ROLLUP_SYM */
//  if (yyn == 1841)
//    /* "sql_yacc.y":12481  */
//                          { yyval= ROLLUP_TYPE; };
			break;

		case 1842: /* alter_order_list: alter_order_list ',' alter_order_item */
//  if (yyn == 1842)
//    /* "sql_yacc.y":12497  */
//          {
//            yyval= ((order_list)(yystack.valueAt (2)));
//            yyval->push_back(((order_expr)(yystack.valueAt (0))));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1843: /* alter_order_list: alter_order_item */
//  if (yyn == 1843)
//    /* "sql_yacc.y":12503  */
//          {
//            yyval= NEW_PTN PT_order_list((yyloc));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((order_expr)(yystack.valueAt (0))));
//          };
			break;

		case 1844: /* alter_order_item: simple_ident_nospvar opt_ordering_direction */
//  if (yyn == 1844)
//    /* "sql_yacc.y":12513  */
//          {
//            yyval= NEW_PTN PT_order_expr((yyloc), ((item)(yystack.valueAt (1))), ((order_direction)(yystack.valueAt (0))));
//          };
			break;

		case 1845: /* opt_order_clause: %empty */
//  if (yyn == 1845)
//    /* "sql_yacc.y":12519  */
//                 { yyval= nullptr; };
			break;

		case 1847: /* order_clause: ORDER_SYM BY order_list */
//  if (yyn == 1847)
//    /* "sql_yacc.y":12525  */
//          {
//            yyval= NEW_PTN PT_order((yyloc), ((order_list)(yystack.valueAt (0))));
//          };
			break;

		case 1848: /* order_list: order_list ',' order_expr */
//  if (yyn == 1848)
//    /* "sql_yacc.y":12532  */
//          {
//            ((order_list)(yystack.valueAt (2)))->push_back(((order_expr)(yystack.valueAt (0))));
//            yyval= ((order_list)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1849: /* order_list: order_expr */
//  if (yyn == 1849)
//    /* "sql_yacc.y":12538  */
//          {
//            yyval= NEW_PTN PT_order_list((yyloc));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//            yyval->push_back(((order_expr)(yystack.valueAt (0))));
//          };
			break;

		case 1850: /* opt_ordering_direction: %empty */
//  if (yyn == 1850)
//    /* "sql_yacc.y":12547  */
//                 { yyval= ORDER_NOT_RELEVANT; };
			break;

		case 1852: /* ordering_direction: ASC */
//  if (yyn == 1852)
//    /* "sql_yacc.y":12552  */
//                      { yyval= ORDER_ASC; };
			break;

		case 1853: /* ordering_direction: DESC */
//  if (yyn == 1853)
//    /* "sql_yacc.y":12553  */
//                      { yyval= ORDER_DESC; };
			break;

		case 1854: /* opt_limit_clause: %empty */
//  if (yyn == 1854)
//    /* "sql_yacc.y":12557  */
//                 { yyval= nullptr; };
			break;

		case 1856: /* limit_clause: LIMIT limit_options */
//  if (yyn == 1856)
//    /* "sql_yacc.y":12563  */
//          {
//            yyval= NEW_PTN PT_limit_clause((yyloc), ((limit_options)(yystack.valueAt (0))));
//          };
			break;

		case 1857: /* limit_options: limit_option */
//  if (yyn == 1857)
//    /* "sql_yacc.y":12570  */
//          {
//            yyval.limit= ((item)(yystack.valueAt (0)));
//            yyval.opt_offset= nullptr;
//            yyval.is_offset_first= false;
//          };
			break;

		case 1858: /* limit_options: limit_option ',' limit_option */
//  if (yyn == 1858)
//    /* "sql_yacc.y":12576  */
//          {
//            yyval.limit= ((item)(yystack.valueAt (0)));
//            yyval.opt_offset= ((item)(yystack.valueAt (2)));
//            yyval.is_offset_first= true;
//          };
			break;

		case 1859: /* limit_options: limit_option OFFSET_SYM limit_option */
//  if (yyn == 1859)
//    /* "sql_yacc.y":12582  */
//          {
//            yyval.limit= ((item)(yystack.valueAt (2)));
//            yyval.opt_offset= ((item)(yystack.valueAt (0)));
//            yyval.is_offset_first= false;
//          };
			break;

		case 1860: /* limit_option: ident */
//  if (yyn == 1860)
//    /* "sql_yacc.y":12591  */
//          {
//            yyval= NEW_PTN PTI_limit_option_ident((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 1861: /* limit_option: param_marker */
//  if (yyn == 1861)
//    /* "sql_yacc.y":12595  */
//          {
//            yyval= NEW_PTN PTI_limit_option_param_marker((yyloc), ((param_marker)(yystack.valueAt (0))));
//          };
			break;

		case 1862: /* limit_option: ULONGLONG_NUM */
//  if (yyn == 1862)
//    /* "sql_yacc.y":12599  */
//          {
//            yyval= NEW_PTN Item_uint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//          };
			break;

		case 1863: /* limit_option: LONG_NUM */
//  if (yyn == 1863)
//    /* "sql_yacc.y":12603  */
//          {
//            yyval= NEW_PTN Item_uint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//          };
			break;

		case 1864: /* limit_option: NUM */
//  if (yyn == 1864)
//    /* "sql_yacc.y":12607  */
//          {
//            yyval= NEW_PTN Item_uint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//          };
			break;

		case 1865: /* opt_simple_limit: %empty */
//  if (yyn == 1865)
//    /* "sql_yacc.y":12613  */
//                 { yyval= nullptr; };
			break;

		case 1866: /* opt_simple_limit: LIMIT limit_option */
//  if (yyn == 1866)
//    /* "sql_yacc.y":12614  */
//                             { yyval= ((item)(yystack.valueAt (0))); };
			break;

		case 1867: /* ulong_num: NUM */
//  if (yyn == 1867)
//    /* "sql_yacc.y":12618  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1868: /* ulong_num: HEX_NUM */
//  if (yyn == 1868)
//    /* "sql_yacc.y":12619  */
//                        { yyval= (ulong) my_strtoll(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 16); };
			break;

		case 1869: /* ulong_num: LONG_NUM */
//  if (yyn == 1869)
//    /* "sql_yacc.y":12620  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1870: /* ulong_num: ULONGLONG_NUM */
//  if (yyn == 1870)
//    /* "sql_yacc.y":12621  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1871: /* ulong_num: DECIMAL_NUM */
//  if (yyn == 1871)
//    /* "sql_yacc.y":12622  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1872: /* ulong_num: FLOAT_NUM */
//  if (yyn == 1872)
//    /* "sql_yacc.y":12623  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1873: /* real_ulong_num: NUM */
//  if (yyn == 1873)
//    /* "sql_yacc.y":12627  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1874: /* real_ulong_num: HEX_NUM */
//  if (yyn == 1874)
//    /* "sql_yacc.y":12628  */
//                        { yyval= (ulong) my_strtoll(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 16); };
			break;

		case 1875: /* real_ulong_num: LONG_NUM */
//  if (yyn == 1875)
//    /* "sql_yacc.y":12629  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1876: /* real_ulong_num: ULONGLONG_NUM */
//  if (yyn == 1876)
//    /* "sql_yacc.y":12630  */
//                        { int error; yyval= (ulong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1877: /* real_ulong_num: dec_num_error */
//  if (yyn == 1877)
//    /* "sql_yacc.y":12631  */
//                        { MYSQL_YYABORT; };
			break;

		case 1878: /* ulonglong_num: NUM */
//  if (yyn == 1878)
//    /* "sql_yacc.y":12635  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1879: /* ulonglong_num: ULONGLONG_NUM */
//  if (yyn == 1879)
//    /* "sql_yacc.y":12636  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1880: /* ulonglong_num: LONG_NUM */
//  if (yyn == 1880)
//    /* "sql_yacc.y":12637  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1881: /* ulonglong_num: DECIMAL_NUM */
//  if (yyn == 1881)
//    /* "sql_yacc.y":12638  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1882: /* ulonglong_num: FLOAT_NUM */
//  if (yyn == 1882)
//    /* "sql_yacc.y":12639  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1883: /* real_ulonglong_num: NUM */
//  if (yyn == 1883)
//    /* "sql_yacc.y":12643  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1884: /* real_ulonglong_num: HEX_NUM */
//  if (yyn == 1884)
//    /* "sql_yacc.y":12644  */
//                        { yyval= (ulonglong) my_strtoll(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 16); };
			break;

		case 1885: /* real_ulonglong_num: ULONGLONG_NUM */
//  if (yyn == 1885)
//    /* "sql_yacc.y":12645  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1886: /* real_ulonglong_num: LONG_NUM */
//  if (yyn == 1886)
//    /* "sql_yacc.y":12646  */
//                        { int error; yyval= (ulonglong) my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error); };
			break;

		case 1887: /* real_ulonglong_num: dec_num_error */
//  if (yyn == 1887)
//    /* "sql_yacc.y":12647  */
//                        { MYSQL_YYABORT; };
			break;

		case 1888: /* dec_num_error: dec_num */
//  if (yyn == 1888)
//    /* "sql_yacc.y":12652  */
//          { YYTHD->syntax_error(ER_ONLY_INTEGERS_ALLOWED); };
			break;

		case 1891: /* select_var_list: select_var_list ',' select_var_ident */
//  if (yyn == 1891)
//    /* "sql_yacc.y":12662  */
//          {
//            yyval= ((select_var_list)(yystack.valueAt (2)));
//            if (yyval == nullptr || yyval->push_back(((select_var_ident)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1892: /* select_var_list: select_var_ident */
//  if (yyn == 1892)
//    /* "sql_yacc.y":12668  */
//          {
//            yyval= NEW_PTN PT_select_var_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((select_var_ident)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1893: /* select_var_ident: '@' ident_or_text */
//  if (yyn == 1893)
//    /* "sql_yacc.y":12677  */
//          {
//            yyval= NEW_PTN PT_select_var((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 1894: /* select_var_ident: ident_or_text */
//  if (yyn == 1894)
//    /* "sql_yacc.y":12681  */
//          {
//            yyval= NEW_PTN PT_select_sp_var((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 1895: /* into_clause: INTO into_destination */
//  if (yyn == 1895)
//    /* "sql_yacc.y":12688  */
//          {
//            yyval= ((into_destination)(yystack.valueAt (0)));
//          };
			break;

		case 1896: /* into_destination: OUTFILE TEXT_STRING_filesystem opt_load_data_charset opt_field_term opt_line_term */
//  if (yyn == 1896)
//    /* "sql_yacc.y":12697  */
//          {
//            yyval= NEW_PTN PT_into_destination_outfile((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), ((lexer.charset)(yystack.valueAt (2))), ((field_separators)(yystack.valueAt (1))), ((line_separators)(yystack.valueAt (0))));
//          };
			break;

		case 1897: /* into_destination: DUMPFILE TEXT_STRING_filesystem */
//  if (yyn == 1897)
//    /* "sql_yacc.y":12701  */
//          {
//            yyval= NEW_PTN PT_into_destination_dumpfile((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 1898: /* into_destination: select_var_list */
//  if (yyn == 1898)
//    /* "sql_yacc.y":12704  */
//                          { yyval= ((select_var_list)(yystack.valueAt (0))); };
			break;

		case 1899: /* do_stmt: DO_SYM select_item_list */
//  if (yyn == 1899)
//    /* "sql_yacc.y":12713  */
//          {
//            yyval= NEW_PTN PT_select_stmt((yyloc), SQLCOM_DO,
//                  NEW_PTN PT_query_expression((yyloc),
//                    NEW_PTN PT_query_specification((yyloc), {}, ((item_list2)(yystack.valueAt (0))))));
//          };
			break;

		case 1900: /* drop_table_stmt: DROP opt_temporary table_or_tables if_exists table_list opt_restrict */
			if (yyn == 1900)
			/* "sql_yacc.y":12726 */
			{
//            // Note: opt_restrict ($6) is ignored!
//            LEX *lex=Lex;
//            lex->sql_command = SQLCOM_DROP_TABLE;
//            lex->drop_temporary= ((is_not_empty)(yystack.valueAt (4)));
//            lex->drop_if_exists= ((num)(yystack.valueAt (2)));
//            YYPS->m_lock_type= TL_UNLOCK;
//            YYPS->m_mdl_type= MDL_EXCLUSIVE;
//            if (Select->add_tables(YYTHD, ((table_list)(yystack.valueAt (1))), TL_OPTION_UPDATING,
//                                   YYPS->m_lock_type, YYPS->m_mdl_type))
//              MYSQL_YYABORT;

//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_drop_table();
//            if (!Lex->m_sql_cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ //OOM
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_TABLE;
//	  		thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_TABLE;.
			}
			;
			break;

		case 1901: /* drop_index_stmt: DROP INDEX_SYM ident ON_SYM table_ident opt_index_lock_and_algorithm */
//  if (yyn == 1901)
//    /* "sql_yacc.y":12746  */
//          {
//            yyval= NEW_PTN PT_drop_index_stmt((yyloc), YYMEM_ROOT, ((lexer.lex_str)(yystack.valueAt (3))).str, ((table)(yystack.valueAt (1))),
//                                           ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).algo.get_or_default(),
//                                           ((opt_index_lock_and_algorithm)(yystack.valueAt (0))).lock.get_or_default());
//          };
			break;

		case 1902: /* drop_database_stmt: DROP DATABASE if_exists ident */
			if (yyn == 1902)
			/* "sql_yacc.y":12755 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_DROP_DB;
//            lex->drop_if_exists=((num)(yystack.valueAt (1)));
//            lex->name= ((lexer.lex_str)(yystack.valueAt (0)));
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_DB;
			}
			;
			break;

		case 1903: /* drop_function_stmt: DROP FUNCTION_SYM if_exists ident '.' ident */
			if (yyn == 1903)
			/* "sql_yacc.y":12766 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_name *spname;
//            if (((lexer.lex_str)(yystack.valueAt (2))).str &&
//                (check_and_convert_db_name(&((lexer.lex_str)(yystack.valueAt (2))), false) != Ident_name_check::OK))
//               MYSQL_YYABORT;
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (0)))))
//               MYSQL_YYABORT;
//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
//              MYSQL_YYABORT;
//            }
//            lex->sql_command = SQLCOM_DROP_FUNCTION;
//            lex->drop_if_exists= ((num)(yystack.valueAt (3)));
//            spname= new (YYMEM_ROOT) sp_name(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), ((lexer.lex_str)(yystack.valueAt (0))), true);
//            if (spname == nullptr)
//              MYSQL_YYABORT;
//            spname->init_qname(thd);
//            lex->spname= spname;
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_FUNCTION;
			}
			;
			break;

		case 1904: /* drop_function_stmt: DROP FUNCTION_SYM if_exists ident */
			if (yyn == 1904)
			/* "sql_yacc.y":12790 */
			{
//            /*
//              Unlike DROP PROCEDURE, "DROP FUNCTION ident" should work
//              even if there is no current database. In this case it
//              applies only to UDF.
//              Hence we can't merge rules for "DROP FUNCTION ident.ident"
//              and "DROP FUNCTION ident" into one "DROP FUNCTION sp_name"
//              rule. sp_name assumes that database name should be always
//              provided - either explicitly or implicitly.
//            */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            LEX_STRING db= NULL_STR;
//            sp_name *spname;
//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
//              MYSQL_YYABORT;
//            }
//            if (thd->db().str && lex->copy_db_to(&db.str, &db.length))
//              MYSQL_YYABORT;
//            if (sp_check_name(&((lexer.lex_str)(yystack.valueAt (0)))))
//               MYSQL_YYABORT;
//            lex->sql_command = SQLCOM_DROP_FUNCTION;
//            lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//            spname= new (YYMEM_ROOT) sp_name(to_lex_cstring(db), ((lexer.lex_str)(yystack.valueAt (0))), false);
//            if (spname == nullptr)
//              MYSQL_YYABORT;
//            spname->init_qname(thd);
//            lex->spname= spname;
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_FUNCTION;
			}
			;
			break;

		case 1905: /* drop_resource_group_stmt: DROP RESOURCE_SYM GROUP_SYM ident opt_force */
//  if (yyn == 1905)
//    /* "sql_yacc.y":12826  */
//          {
//            yyval= NEW_PTN PT_drop_resource_group((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1)))), ((resource_group_flag_type)(yystack.valueAt (0))));
//          };
			break;

		case 1906: /* drop_procedure_stmt: DROP PROCEDURE_SYM if_exists sp_name */
			if (yyn == 1906)
			/* "sql_yacc.y":12833 */
			{
//            LEX *lex=Lex;
//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
//              MYSQL_YYABORT;
//            }
//            lex->sql_command = SQLCOM_DROP_PROCEDURE;
//            lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//            lex->spname= ((spname)(yystack.valueAt (0)));
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_PROCEDURE;
			}
			;
			break;

		case 1907: /* drop_user_stmt: DROP USER if_exists user_list */
			if (yyn == 1907)
			/* "sql_yacc.y":12849 */
			{
//             LEX *lex=Lex;
//             lex->sql_command= SQLCOM_DROP_USER;
//             lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//             lex->users_list= *((user_list)(yystack.valueAt (0)));
//             MAKE_CMD_DCL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_USER;
			}
			;
			break;

		case 1908: /* drop_view_stmt: DROP VIEW_SYM if_exists table_list opt_restrict */
			if (yyn == 1908)
			/* "sql_yacc.y":12860 */
			{
//            // Note: opt_restrict ($5) is ignored!
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_DROP_VIEW;
//            lex->drop_if_exists= ((num)(yystack.valueAt (2)));
//            YYPS->m_lock_type= TL_UNLOCK;
//            YYPS->m_mdl_type= MDL_EXCLUSIVE;
//            if (Select->add_tables(YYTHD, ((table_list)(yystack.valueAt (1))), TL_OPTION_UPDATING,
//                                   YYPS->m_lock_type, YYPS->m_mdl_type))
//              MYSQL_YYABORT;
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_VIEW;
			}
			;
			break;

		case 1909: /* drop_event_stmt: DROP EVENT_SYM if_exists sp_name */
			if (yyn == 1909)
			/* "sql_yacc.y":12876 */
			{
//            Lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//            Lex->spname= ((spname)(yystack.valueAt (0)));
//            Lex->sql_command = SQLCOM_DROP_EVENT;
//            MAKE_CMD_DDL_DUMMY();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_EVENT;
			}
			;
			break;

		case 1910: /* drop_trigger_stmt: DROP TRIGGER_SYM if_exists sp_name */
			if (yyn == 1910)
			/* "sql_yacc.y":12886 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_DROP_TRIGGER;
//            lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//            lex->spname= ((spname)(yystack.valueAt (0)));
//            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_drop_trigger();
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_TRIGGER;
			}
			;
			break;

		case 1911: /* drop_tablespace_stmt: DROP TABLESPACE_SYM ident opt_drop_ts_options */
			if (yyn == 1911)
			/* "sql_yacc.y":12897 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }

//            auto cmd= NEW_PTN Sql_cmd_drop_tablespace{((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1912: /* drop_undo_tablespace_stmt: DROP UNDO_SYM TABLESPACE_SYM ident opt_undo_tablespace_options */
			if (yyn == 1912)
			/* "sql_yacc.y":12917 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT;
//            }

//            auto cmd= NEW_PTN Sql_cmd_drop_undo_tablespace{
//              DROP_UNDO_TABLESPACE, ((lexer.lex_str)(yystack.valueAt (1))), {nullptr, 0},  pc};
//            if (!cmd)
//              MYSQL_YYABORT; // OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1913: /* drop_logfile_stmt: DROP LOGFILE_SYM GROUP_SYM ident opt_drop_ts_options */
			if (yyn == 1913)
			/* "sql_yacc.y":12939 */
			{
//            auto pc= NEW_PTN Alter_tablespace_parse_context{YYTHD};
//            if (pc == nullptr)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM

//            if (((ts_options)(yystack.valueAt (0))) != nullptr)
//            {
//              if (YYTHD->is_error() || contextualize_array(pc, ((ts_options)(yystack.valueAt (0)))))
//                MYSQL_YYABORT; /* purecov: inspected */
//            }

//            auto cmd= NEW_PTN Sql_cmd_logfile_group{DROP_LOGFILE_GROUP,
//                                                    ((lexer.lex_str)(yystack.valueAt (1))), pc};
//            if (!cmd)
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//            Lex->m_sql_cmd= cmd;
//            Lex->sql_command= SQLCOM_ALTER_TABLESPACE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_TABLESPACE;
			}
			;
			break;

		case 1914: /* drop_server_stmt: DROP SERVER_SYM if_exists ident_or_text */
			if (yyn == 1914)
			/* "sql_yacc.y":12962 */
			{
//            Lex->sql_command = SQLCOM_DROP_SERVER;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_drop_server(((lexer.lex_str)(yystack.valueAt (0))), ((num)(yystack.valueAt (1))));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_DROP_SERVER;
			}
			;
			break;

		case 1915: /* drop_srs_stmt: DROP SPATIAL_SYM REFERENCE_SYM SYSTEM_SYM if_exists real_ulonglong_num */
//  if (yyn == 1915)
//    /* "sql_yacc.y":12970  */
//          {
//            yyval= NEW_PTN PT_drop_srs((yyloc), ((ulonglong_number)(yystack.valueAt (0))), ((num)(yystack.valueAt (1))));
//          };
			break;

		case 1916: /* drop_role_stmt: DROP ROLE_SYM if_exists role_list */
//  if (yyn == 1916)
//    /* "sql_yacc.y":12977  */
//          {
//            yyval= NEW_PTN PT_drop_role((yyloc), ((num)(yystack.valueAt (1))), ((user_list)(yystack.valueAt (0))));
//          };
			break;

		case 1917: /* table_list: table_ident */
//  if (yyn == 1917)
//    /* "sql_yacc.y":12984  */
//          {
//            yyval= NEW_PTN Mem_root_array<Table_ident *>(YYMEM_ROOT);
//            if (yyval->push_back(((table)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1918: /* table_list: table_list ',' table_ident */
//  if (yyn == 1918)
//    /* "sql_yacc.y":12990  */
//          {
//            yyval= ((table_list)(yystack.valueAt (2)));
//            if (yyval == nullptr || yyval->push_back(((table)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1919: /* table_alias_ref_list: table_ident_opt_wild */
//  if (yyn == 1919)
//    /* "sql_yacc.y":12999  */
//          {
//            yyval.init(YYMEM_ROOT);
//            if (yyval.push_back(((table_ident)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1920: /* table_alias_ref_list: table_alias_ref_list ',' table_ident_opt_wild */
//  if (yyn == 1920)
//    /* "sql_yacc.y":13005  */
//          {
//            yyval= ((table_ident_list)(yystack.valueAt (2)));
//            if (yyval.push_back(((table_ident)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1921: /* if_exists: %empty */
//  if (yyn == 1921)
//    /* "sql_yacc.y":13013  */
//                 { yyval= 0; };
			break;

		case 1922: /* if_exists: IF EXISTS */
//  if (yyn == 1922)
//    /* "sql_yacc.y":13014  */
//                    { yyval= 1; };
			break;

		case 1923: /* opt_ignore_unknown_user: %empty */
//  if (yyn == 1923)
//    /* "sql_yacc.y":13018  */
//                 { yyval= 0; };
			break;

		case 1924: /* opt_ignore_unknown_user: IGNORE_SYM UNKNOWN_SYM USER */
//  if (yyn == 1924)
//    /* "sql_yacc.y":13019  */
//                                      { yyval= 1; };
			break;

		case 1925: /* opt_temporary: %empty */
//  if (yyn == 1925)
//    /* "sql_yacc.y":13023  */
//                 { yyval= false; };
			break;

		case 1926: /* opt_temporary: TEMPORARY */
//  if (yyn == 1926)
//    /* "sql_yacc.y":13024  */
//                      { yyval= true; };
			break;

		case 1927: /* opt_drop_ts_options: %empty */
//  if (yyn == 1927)
//    /* "sql_yacc.y":13028  */
//               { yyval= nullptr; };
			break;

		case 1929: /* drop_ts_option_list: drop_ts_option */
//  if (yyn == 1929)
//    /* "sql_yacc.y":13034  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_alter_tablespace_option_base*>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 1930: /* drop_ts_option_list: drop_ts_option_list opt_comma drop_ts_option */
//  if (yyn == 1930)
//    /* "sql_yacc.y":13040  */
//          {
//            yyval= ((ts_options)(yystack.valueAt (2)));
//            if (yyval->push_back(((ts_option)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; /* purecov: inspected */ // OOM
//          };
			break;

		case 1933: /*
					 * insert_stmt: INSERT_SYM insert_lock_option opt_ignore opt_INTO table_ident opt_use_partition insert_from_constructor opt_values_reference
					 * opt_insert_update_list
					 */
//  if (yyn == 1933)
//    /* "sql_yacc.y":13065  */
//          {
//            DBUG_EXECUTE_IF("bug29614521_simulate_oom",
//                             DBUG_SET("+d,simulate_out_of_memory"););
//            yyval= NEW_PTN PT_insert((yyloc), false, ((lexer.optimizer_hints)(yystack.valueAt (8))), ((lock_type)(yystack.valueAt (7))), ((is_not_empty)(yystack.valueAt (6))), ((table)(yystack.valueAt (4))), ((string_list)(yystack.valueAt (3))),
//                                  ((column_row_value_list_pair)(yystack.valueAt (2))).column_list, ((column_row_value_list_pair)(yystack.valueAt (2))).row_value_list,
//                                  nullptr,
//                                  ((insert_update_values_reference)(yystack.valueAt (1))).table_alias, ((insert_update_values_reference)(yystack.valueAt (1))).column_list,
//                                  ((column_value_list_pair)(yystack.valueAt (0))).column_list, ((column_value_list_pair)(yystack.valueAt (0))).value_list);
//            DBUG_EXECUTE_IF("bug29614521_simulate_oom",
//                            DBUG_SET("-d,bug29614521_simulate_oom"););
//          };
			break;

		case 1934: /*
					 * insert_stmt: INSERT_SYM insert_lock_option opt_ignore opt_INTO table_ident opt_use_partition SET_SYM update_list opt_values_reference opt_insert_update_list
					 */
//  if (yyn == 1934)
//    /* "sql_yacc.y":13086  */
//          {
//            PT_insert_values_list *one_row= NEW_PTN PT_insert_values_list((yyloc), YYMEM_ROOT);
//            if (one_row == nullptr || one_row->push_back(&((column_value_list_pair)(yystack.valueAt (2))).value_list->value))
//              MYSQL_YYABORT; // OOM
//            yyval= NEW_PTN PT_insert((yyloc), false, ((lexer.optimizer_hints)(yystack.valueAt (9))), ((lock_type)(yystack.valueAt (8))), ((is_not_empty)(yystack.valueAt (7))), ((table)(yystack.valueAt (5))), ((string_list)(yystack.valueAt (4))),
//                                  ((column_value_list_pair)(yystack.valueAt (2))).column_list, one_row,
//                                  nullptr,
//                                  ((insert_update_values_reference)(yystack.valueAt (1))).table_alias, ((insert_update_values_reference)(yystack.valueAt (1))).column_list,
//                                  ((column_value_list_pair)(yystack.valueAt (0))).column_list, ((column_value_list_pair)(yystack.valueAt (0))).value_list);
//          };
			break;

		case 1935: /* insert_stmt: INSERT_SYM insert_lock_option opt_ignore opt_INTO table_ident opt_use_partition insert_query_expression opt_insert_update_list */
//  if (yyn == 1935)
//    /* "sql_yacc.y":13104  */
//          {
//            yyval= NEW_PTN PT_insert((yyloc), false, ((lexer.optimizer_hints)(yystack.valueAt (7))), ((lock_type)(yystack.valueAt (6))), ((is_not_empty)(yystack.valueAt (5))), ((table)(yystack.valueAt (3))), ((string_list)(yystack.valueAt (2))),
//                                  ((insert_query_expression)(yystack.valueAt (1))).column_list, nullptr,
//                                  ((insert_query_expression)(yystack.valueAt (1))).insert_query_expression,
//                                  NULL_CSTR, nullptr,
//                                  ((column_value_list_pair)(yystack.valueAt (0))).column_list, ((column_value_list_pair)(yystack.valueAt (0))).value_list);
//          };
			break;

		case 1936: /* replace_stmt: REPLACE_SYM replace_lock_option opt_INTO table_ident opt_use_partition insert_from_constructor */
//  if (yyn == 1936)
//    /* "sql_yacc.y":13120  */
//          {
//            yyval= NEW_PTN PT_insert((yyloc), true, ((lexer.optimizer_hints)(yystack.valueAt (5))), ((lock_type)(yystack.valueAt (4))), false, ((table)(yystack.valueAt (2))), ((string_list)(yystack.valueAt (1))),
//                                  ((column_row_value_list_pair)(yystack.valueAt (0))).column_list, ((column_row_value_list_pair)(yystack.valueAt (0))).row_value_list,
//                                  nullptr,
//                                  NULL_CSTR, nullptr,
//                                  nullptr, nullptr);
//          };
			break;

		case 1937: /* replace_stmt: REPLACE_SYM replace_lock_option opt_INTO table_ident opt_use_partition SET_SYM update_list */
//  if (yyn == 1937)
//    /* "sql_yacc.y":13134  */
//          {
//            PT_insert_values_list *one_row= NEW_PTN PT_insert_values_list((yyloc), YYMEM_ROOT);
//            if (one_row == nullptr || one_row->push_back(&((column_value_list_pair)(yystack.valueAt (0))).value_list->value))
//              MYSQL_YYABORT; // OOM
//            yyval= NEW_PTN PT_insert((yyloc), true, ((lexer.optimizer_hints)(yystack.valueAt (6))), ((lock_type)(yystack.valueAt (5))), false, ((table)(yystack.valueAt (3))), ((string_list)(yystack.valueAt (2))),
//                                  ((column_value_list_pair)(yystack.valueAt (0))).column_list, one_row,
//                                  nullptr,
//                                  NULL_CSTR, nullptr,
//                                  nullptr, nullptr);
//          };
			break;

		case 1938: /* replace_stmt: REPLACE_SYM replace_lock_option opt_INTO table_ident opt_use_partition insert_query_expression */
//  if (yyn == 1938)
//    /* "sql_yacc.y":13150  */
//          {
//            yyval= NEW_PTN PT_insert((yyloc), true, ((lexer.optimizer_hints)(yystack.valueAt (5))), ((lock_type)(yystack.valueAt (4))), false, ((table)(yystack.valueAt (2))), ((string_list)(yystack.valueAt (1))),
//                                  ((insert_query_expression)(yystack.valueAt (0))).column_list, nullptr,
//                                  ((insert_query_expression)(yystack.valueAt (0))).insert_query_expression,
//                                  NULL_CSTR, nullptr,
//                                  nullptr, nullptr);
//          };
			break;

		case 1939: /* insert_lock_option: %empty */
//  if (yyn == 1939)
//    /* "sql_yacc.y":13160  */
//                 { yyval= TL_WRITE_CONCURRENT_DEFAULT; };
			break;

		case 1940: /* insert_lock_option: LOW_PRIORITY */
//  if (yyn == 1940)
//    /* "sql_yacc.y":13161  */
//                        { yyval= TL_WRITE_LOW_PRIORITY; };
			break;

		case 1941: /* insert_lock_option: DELAYED_SYM */
//  if (yyn == 1941)
//    /* "sql_yacc.y":13163  */
//        {
//          yyval= TL_WRITE_CONCURRENT_DEFAULT;

//          push_warning_printf(YYTHD, Sql_condition::SL_WARNING,
//                              ER_WARN_LEGACY_SYNTAX_CONVERTED,
//                              ER_THD(YYTHD, ER_WARN_LEGACY_SYNTAX_CONVERTED),
//                              "INSERT DELAYED", "INSERT");
//        };
			break;

		case 1942: /* insert_lock_option: HIGH_PRIORITY */
//  if (yyn == 1942)
//    /* "sql_yacc.y":13171  */
//                        { yyval= TL_WRITE; };
			break;

		case 1943: /* replace_lock_option: opt_low_priority */
//  if (yyn == 1943)
//    /* "sql_yacc.y":13175  */
//                           { yyval= ((lock_type)(yystack.valueAt (0))); };
			break;

		case 1944: /* replace_lock_option: DELAYED_SYM */
//  if (yyn == 1944)
//    /* "sql_yacc.y":13177  */
//        {
//          yyval= TL_WRITE_DEFAULT;

//          push_warning_printf(YYTHD, Sql_condition::SL_WARNING,
//                              ER_WARN_LEGACY_SYNTAX_CONVERTED,
//                              ER_THD(YYTHD, ER_WARN_LEGACY_SYNTAX_CONVERTED),
//                              "REPLACE DELAYED", "REPLACE");
//        };
			break;

		case 1947: /* insert_from_constructor: insert_values */
//  if (yyn == 1947)
//    /* "sql_yacc.y":13194  */
//          {
//            // No position because there is no column list.
//            yyval.column_list= NEW_PTN PT_item_list(POS());
//            yyval.row_value_list= ((values_list)(yystack.valueAt (0)));
//          };
			break;

		case 1948: /* insert_from_constructor: '(' ')' insert_values */
//  if (yyn == 1948)
//    /* "sql_yacc.y":13200  */
//          {
//            yyval.column_list= NEW_PTN PT_item_list(POS()); // No position.
//            yyval.row_value_list= ((values_list)(yystack.valueAt (0)));
//          };
			break;

		case 1949: /* insert_from_constructor: '(' insert_columns ')' insert_values */
//  if (yyn == 1949)
//    /* "sql_yacc.y":13205  */
//          {
//            yyval.column_list= ((item_list2)(yystack.valueAt (2)));
//            yyval.row_value_list= ((values_list)(yystack.valueAt (0)));
//          };
			break;

		case 1950: /* insert_query_expression: query_expression_with_opt_locking_clauses */
//  if (yyn == 1950)
//    /* "sql_yacc.y":13213  */
//          {
//            yyval.column_list= NEW_PTN PT_item_list(POS()); // No column list.
//            yyval.insert_query_expression= ((query_expression_body)(yystack.valueAt (0)));
//          };
			break;

		case 1951: /* insert_query_expression: '(' ')' query_expression_with_opt_locking_clauses */
//  if (yyn == 1951)
//    /* "sql_yacc.y":13218  */
//          {
//            yyval.column_list= NEW_PTN PT_item_list(POS()); // No column list.
//            yyval.insert_query_expression= ((query_expression_body)(yystack.valueAt (0)));
//          };
			break;

		case 1952: /* insert_query_expression: '(' insert_columns ')' query_expression_with_opt_locking_clauses */
//  if (yyn == 1952)
//    /* "sql_yacc.y":13223  */
//          {
//            yyval.column_list= ((item_list2)(yystack.valueAt (2)));
//            yyval.insert_query_expression= ((query_expression_body)(yystack.valueAt (0)));
//          };
			break;

		case 1953: /* insert_columns: insert_columns ',' insert_column */
//  if (yyn == 1953)
//    /* "sql_yacc.y":13231  */
//          {
//            if (yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1954: /* insert_columns: insert_column */
//  if (yyn == 1954)
//    /* "sql_yacc.y":13238  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1955: /* insert_values: value_or_values values_list */
//  if (yyn == 1955)
//    /* "sql_yacc.y":13247  */
//          {
//            yyval= ((values_list)(yystack.valueAt (0)));
//          };
			break;

		case 1956: /* query_expression_with_opt_locking_clauses: query_expression */
//  if (yyn == 1956)
//    /* "sql_yacc.y":13253  */
//                                                { yyval = ((query_expression)(yystack.valueAt (0))); };
			break;

		case 1957: /* query_expression_with_opt_locking_clauses: query_expression locking_clause_list */
//  if (yyn == 1957)
//    /* "sql_yacc.y":13255  */
//          {
//            yyval = NEW_PTN PT_locking((yyloc), ((query_expression)(yystack.valueAt (1))), ((locking_clause_list)(yystack.valueAt (0))));
//          };
			break;

		case 1960: /* values_list: values_list ',' row_value */
//  if (yyn == 1960)
//    /* "sql_yacc.y":13267  */
//          {
//            if (yyval->push_back(&((item_list2)(yystack.valueAt (0)))->value))
//              MYSQL_YYABORT;
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1961: /* values_list: row_value */
//  if (yyn == 1961)
//    /* "sql_yacc.y":13273  */
//          {
//            yyval= NEW_PTN PT_insert_values_list((yyloc), YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(&((item_list2)(yystack.valueAt (0)))->value))
//              MYSQL_YYABORT;
//          };
			break;

		case 1962: /* values_row_list: values_row_list ',' row_value_explicit */
//  if (yyn == 1962)
//    /* "sql_yacc.y":13283  */
//          {
//            if (yyval->push_back(&((item_list2)(yystack.valueAt (0)))->value))
//              MYSQL_YYABORT;
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1963: /* values_row_list: row_value_explicit */
//  if (yyn == 1963)
//    /* "sql_yacc.y":13289  */
//          {
//            yyval= NEW_PTN PT_insert_values_list((yyloc), YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(&((item_list2)(yystack.valueAt (0)))->value))
//              MYSQL_YYABORT;
//          };
			break;

		case 1968: /* row_value: '(' opt_values ')' */
//  if (yyn == 1968)
//    /* "sql_yacc.y":13307  */
//                             { yyval= ((item_list2)(yystack.valueAt (1))); };
			break;

		case 1969: /* row_value_explicit: ROW_SYM '(' opt_values ')' */
//  if (yyn == 1969)
//    /* "sql_yacc.y":13311  */
//                                     { yyval= ((item_list2)(yystack.valueAt (1))); };
			break;

		case 1970: /* opt_values: %empty */
//  if (yyn == 1970)
//    /* "sql_yacc.y":13316  */
//          {
//            yyval= NEW_PTN PT_item_list(POS());
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 1972: /* values: values ',' expr_or_default */
//  if (yyn == 1972)
//    /* "sql_yacc.y":13326  */
//          {
//            if (((item_list2)(yystack.valueAt (2)))->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 1973: /* values: expr_or_default */
//  if (yyn == 1973)
//    /* "sql_yacc.y":13333  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 1975: /* expr_or_default: DEFAULT_SYM */
//  if (yyn == 1975)
//    /* "sql_yacc.y":13343  */
//          {
//            yyval= NEW_PTN Item_default_value((yyloc));
//          };
			break;

		case 1976: /* opt_values_reference: %empty */
//  if (yyn == 1976)
//    /* "sql_yacc.y":13350  */
//          {
//            yyval.table_alias = NULL_CSTR;
//            yyval.column_list = nullptr;
//          };
			break;

		case 1977: /* opt_values_reference: AS ident opt_derived_column_list */
//  if (yyn == 1977)
//    /* "sql_yacc.y":13355  */
//          {
//            yyval.table_alias = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1))));
//            /* The column list object is short-lived, requiring duplication. */
//            void *column_list_raw_mem= YYTHD->memdup(&(((simple_ident_list)(yystack.valueAt (0)))), sizeof(((simple_ident_list)(yystack.valueAt (0)))));
//            if (!column_list_raw_mem)
//              MYSQL_YYABORT; // OOM
//            yyval.column_list =
//              static_cast<Create_col_name_list *>(column_list_raw_mem);
//          };
			break;

		case 1978: /* opt_insert_update_list: %empty */
//  if (yyn == 1978)
//    /* "sql_yacc.y":13368  */
//          {
//            yyval.value_list= nullptr;
//            yyval.column_list= nullptr;
//          };
			break;

		case 1979: /* opt_insert_update_list: ON_SYM DUPLICATE_SYM KEY_SYM UPDATE_SYM update_list */
//  if (yyn == 1979)
//    /* "sql_yacc.y":13373  */
//          {
//            yyval= ((column_value_list_pair)(yystack.valueAt (0)));
//          };
			break;

		case 1980: /*
					 * update_stmt: opt_with_clause UPDATE_SYM opt_low_priority opt_ignore table_reference_list SET_SYM update_list opt_where_clause opt_order_clause
					 * opt_simple_limit
					 */
//  if (yyn == 1980)
//    /* "sql_yacc.y":13391  */
//          {
//            yyval= NEW_PTN PT_update((yyloc), ((with_clause)(yystack.valueAt (9))), ((lexer.optimizer_hints)(yystack.valueAt (8))), ((lock_type)(yystack.valueAt (7))), ((is_not_empty)(yystack.valueAt (6))), ((table_reference_list)(yystack.valueAt (5))), ((column_value_list_pair)(yystack.valueAt (3))).column_list, ((column_value_list_pair)(yystack.valueAt (3))).value_list,
//                                  ((item)(yystack.valueAt (2))), ((order)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1981: /* opt_with_clause: %empty */
//  if (yyn == 1981)
//    /* "sql_yacc.y":13398  */
//                 { yyval= nullptr; };
			break;

		case 1982: /* opt_with_clause: with_clause */
//  if (yyn == 1982)
//    /* "sql_yacc.y":13399  */
//                      { yyval= ((with_clause)(yystack.valueAt (0))); };
			break;

		case 1983: /* update_list: update_list ',' update_elem */
//  if (yyn == 1983)
//    /* "sql_yacc.y":13404  */
//          {
//            yyval= ((column_value_list_pair)(yystack.valueAt (2)));
//            if (yyval.column_list->push_back(((column_value_pair)(yystack.valueAt (0))).column) ||
//                yyval.value_list->push_back(((column_value_pair)(yystack.valueAt (0))).value))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1984: /* update_list: update_elem */
//  if (yyn == 1984)
//    /* "sql_yacc.y":13411  */
//          {
//            yyval.column_list= NEW_PTN PT_item_list((yyloc));
//            yyval.value_list= NEW_PTN PT_item_list((yyloc));
//            if (yyval.column_list == nullptr || yyval.value_list == nullptr ||
//                yyval.column_list->push_back(((column_value_pair)(yystack.valueAt (0))).column) ||
//                yyval.value_list->push_back(((column_value_pair)(yystack.valueAt (0))).value))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 1985: /* update_elem: simple_ident_nospvar equal expr_or_default */
//  if (yyn == 1985)
//    /* "sql_yacc.y":13423  */
//          {
//            yyval.column= ((item)(yystack.valueAt (2)));
//            yyval.value= ((item)(yystack.valueAt (0)));
//          };
			break;

		case 1986: /* opt_low_priority: %empty */
//  if (yyn == 1986)
//    /* "sql_yacc.y":13430  */
//                 { yyval= TL_WRITE_DEFAULT; };
			break;

		case 1987: /* opt_low_priority: LOW_PRIORITY */
//  if (yyn == 1987)
//    /* "sql_yacc.y":13431  */
//                       { yyval= TL_WRITE_LOW_PRIORITY; };
			break;

		case 1988: /*
					 * delete_stmt: opt_with_clause DELETE_SYM opt_delete_options FROM table_ident opt_table_alias opt_use_partition opt_where_clause opt_order_clause
					 * opt_simple_limit
					 */
//  if (yyn == 1988)
//    /* "sql_yacc.y":13447  */
//          {
//            yyval= NEW_PTN PT_delete((yyloc), ((with_clause)(yystack.valueAt (9))), ((lexer.optimizer_hints)(yystack.valueAt (8))), ((num)(yystack.valueAt (7))), ((table)(yystack.valueAt (5))), ((lex_cstr)(yystack.valueAt (4))), ((string_list)(yystack.valueAt (3))), ((item)(yystack.valueAt (2))), ((order)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1989: /* delete_stmt: opt_with_clause DELETE_SYM opt_delete_options table_alias_ref_list FROM table_reference_list opt_where_clause */
//  if (yyn == 1989)
//    /* "sql_yacc.y":13457  */
//          {
//            yyval= NEW_PTN PT_delete((yyloc), ((with_clause)(yystack.valueAt (6))), ((lexer.optimizer_hints)(yystack.valueAt (5))), ((num)(yystack.valueAt (4))), ((table_ident_list)(yystack.valueAt (3))), ((table_reference_list)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1990: /* delete_stmt: opt_with_clause DELETE_SYM opt_delete_options FROM table_alias_ref_list USING table_reference_list opt_where_clause */
//  if (yyn == 1990)
//    /* "sql_yacc.y":13468  */
//          {
//            yyval= NEW_PTN PT_delete((yyloc), ((with_clause)(yystack.valueAt (7))), ((lexer.optimizer_hints)(yystack.valueAt (6))), ((num)(yystack.valueAt (5))), ((table_ident_list)(yystack.valueAt (3))), ((table_reference_list)(yystack.valueAt (1))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 1993: /* opt_delete_options: %empty */
//  if (yyn == 1993)
//    /* "sql_yacc.y":13479  */
//                 { yyval= 0; };
			break;

		case 1994: /* opt_delete_options: opt_delete_option opt_delete_options */
//  if (yyn == 1994)
//    /* "sql_yacc.y":13480  */
//                                               { yyval= ((opt_delete_option)(yystack.valueAt (1))) | ((num)(yystack.valueAt (0))); };
			break;

		case 1995: /* opt_delete_option: QUICK */
//  if (yyn == 1995)
//    /* "sql_yacc.y":13484  */
//                       { yyval= DELETE_QUICK; };
			break;

		case 1996: /* opt_delete_option: LOW_PRIORITY */
//  if (yyn == 1996)
//    /* "sql_yacc.y":13485  */
//                       { yyval= DELETE_LOW_PRIORITY; };
			break;

		case 1997: /* opt_delete_option: IGNORE_SYM */
//  if (yyn == 1997)
//    /* "sql_yacc.y":13486  */
//                       { yyval= DELETE_IGNORE; };
			break;

		case 1998: /* truncate_stmt: TRUNCATE_SYM opt_table table_ident */
//  if (yyn == 1998)
//    /* "sql_yacc.y":13491  */
//          {
//            yyval= NEW_PTN PT_truncate_table_stmt((yyloc), ((table)(yystack.valueAt (0))));
//          };
			break;

		case 2001: /* opt_profile_defs: %empty */
//  if (yyn == 2001)
//    /* "sql_yacc.y":13502  */
//                 { yyval = 0; };
			break;

		case 2004: /* profile_defs: profile_defs ',' profile_def */
//  if (yyn == 2004)
//    /* "sql_yacc.y":13508  */
//                                        { yyval = ((ulong_num)(yystack.valueAt (2))) | ((ulong_num)(yystack.valueAt (0))); };
			break;

		case 2005: /* profile_def: CPU_SYM */
//  if (yyn == 2005)
//    /* "sql_yacc.y":13512  */
//                                    { yyval = PROFILE_CPU; };
			break;

		case 2006: /* profile_def: MEMORY_SYM */
//  if (yyn == 2006)
//    /* "sql_yacc.y":13513  */
//                                    { yyval = PROFILE_MEMORY; };
			break;

		case 2007: /* profile_def: BLOCK_SYM IO_SYM */
//  if (yyn == 2007)
//    /* "sql_yacc.y":13514  */
//                                    { yyval = PROFILE_BLOCK_IO; };
			break;

		case 2008: /* profile_def: CONTEXT_SYM SWITCHES_SYM */
//  if (yyn == 2008)
//    /* "sql_yacc.y":13515  */
//                                    { yyval = PROFILE_CONTEXT; };
			break;

		case 2009: /* profile_def: PAGE_SYM FAULTS_SYM */
//  if (yyn == 2009)
//    /* "sql_yacc.y":13516  */
//                                    { yyval = PROFILE_PAGE_FAULTS; };
			break;

		case 2010: /* profile_def: IPC_SYM */
//  if (yyn == 2010)
//    /* "sql_yacc.y":13517  */
//                                    { yyval = PROFILE_IPC; };
			break;

		case 2011: /* profile_def: SWAPS_SYM */
//  if (yyn == 2011)
//    /* "sql_yacc.y":13518  */
//                                    { yyval = PROFILE_SWAPS; };
			break;

		case 2012: /* profile_def: SOURCE_SYM */
//  if (yyn == 2012)
//    /* "sql_yacc.y":13519  */
//                                    { yyval = PROFILE_SOURCE; };
			break;

		case 2013: /* profile_def: ALL */
//  if (yyn == 2013)
//    /* "sql_yacc.y":13520  */
//                                    { yyval = PROFILE_ALL; };
			break;

		case 2014: /* opt_for_query: %empty */
//  if (yyn == 2014)
//    /* "sql_yacc.y":13524  */
//                 { yyval = 0; };
			break;

		case 2015: /* opt_for_query: FOR_SYM QUERY_SYM NUM */
//  if (yyn == 2015)
//    /* "sql_yacc.y":13526  */
//          {
//            int error;
//            yyval = static_cast<my_thread_id>(my_strtoll10(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, &error));
//            if (error != 0)
//              MYSQL_YYABORT;
//          };
			break;

		case 2016: /* show_databases_stmt: SHOW DATABASES opt_wild_or_where */
//  if (yyn == 2016)
//    /* "sql_yacc.y":13538  */
//           {
//             yyval = NEW_PTN PT_show_databases((yyloc), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//           };
			break;

		case 2017: /* show_tables_stmt: SHOW opt_show_cmd_type TABLES opt_db opt_wild_or_where */
//  if (yyn == 2017)
//    /* "sql_yacc.y":13544  */
//          {
//            yyval = NEW_PTN PT_show_tables((yyloc), ((show_cmd_type)(yystack.valueAt (3))), ((simple_string)(yystack.valueAt (1))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2018: /* show_triggers_stmt: SHOW opt_full TRIGGERS_SYM opt_db opt_wild_or_where */
//  if (yyn == 2018)
//    /* "sql_yacc.y":13551  */
//          {
//            yyval = NEW_PTN PT_show_triggers((yyloc), ((is_not_empty)(yystack.valueAt (3))), ((simple_string)(yystack.valueAt (1))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2019: /* show_events_stmt: SHOW EVENTS_SYM opt_db opt_wild_or_where */
//  if (yyn == 2019)
//    /* "sql_yacc.y":13558  */
//          {
//            yyval = NEW_PTN PT_show_events((yyloc), ((simple_string)(yystack.valueAt (1))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2020: /* show_table_status_stmt: SHOW TABLE_SYM STATUS_SYM opt_db opt_wild_or_where */
//  if (yyn == 2020)
//    /* "sql_yacc.y":13565  */
//          {
//            yyval = NEW_PTN PT_show_table_status((yyloc), ((simple_string)(yystack.valueAt (1))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2021: /* show_open_tables_stmt: SHOW OPEN_SYM TABLES opt_db opt_wild_or_where */
//  if (yyn == 2021)
//    /* "sql_yacc.y":13572  */
//          {
//             yyval = NEW_PTN PT_show_open_tables((yyloc), ((simple_string)(yystack.valueAt (1))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2022: /* show_plugins_stmt: SHOW PLUGINS_SYM */
//  if (yyn == 2022)
//    /* "sql_yacc.y":13579  */
//          {
//            yyval = NEW_PTN PT_show_plugins((yyloc));
//          };
			break;

		case 2023: /* show_engine_logs_stmt: SHOW ENGINE_SYM engine_or_all LOGS_SYM */
//  if (yyn == 2023)
//    /* "sql_yacc.y":13586  */
//          {
//            yyval = NEW_PTN PT_show_engine_logs((yyloc), ((lexer.lex_str)(yystack.valueAt (1))));
//          };
			break;

		case 2024: /* show_engine_mutex_stmt: SHOW ENGINE_SYM engine_or_all MUTEX_SYM */
//  if (yyn == 2024)
//    /* "sql_yacc.y":13593  */
//          {
//            yyval = NEW_PTN PT_show_engine_mutex((yyloc), ((lexer.lex_str)(yystack.valueAt (1))));
//          };
			break;

		case 2025: /* show_engine_status_stmt: SHOW ENGINE_SYM engine_or_all STATUS_SYM */
//  if (yyn == 2025)
//    /* "sql_yacc.y":13600  */
//          {
//            yyval = NEW_PTN PT_show_engine_status((yyloc), ((lexer.lex_str)(yystack.valueAt (1))));
//          };
			break;

		case 2026: /* show_columns_stmt: SHOW opt_show_cmd_type COLUMNS from_or_in table_ident opt_db opt_wild_or_where */
//  if (yyn == 2026)
//    /* "sql_yacc.y":13613  */
//          {
//            // TODO: error if table_ident is <db>.<table> and opt_db is set.
//            if (((simple_string)(yystack.valueAt (1))))
//              ((table)(yystack.valueAt (2)))->change_db(((simple_string)(yystack.valueAt (1))));

//            yyval = NEW_PTN PT_show_fields((yyloc), ((show_cmd_type)(yystack.valueAt (5))), ((table)(yystack.valueAt (2))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2027: /* show_binary_logs_stmt: SHOW BINARY_SYM LOGS_SYM */
//  if (yyn == 2027)
//    /* "sql_yacc.y":13624  */
//          {
//            yyval = NEW_PTN PT_show_binlogs((yyloc));
//          };
			break;

		case 2028: /* show_replicas_stmt: SHOW REPLICAS_SYM */
//  if (yyn == 2028)
//    /* "sql_yacc.y":13631  */
//          {
//            yyval = NEW_PTN PT_show_replicas((yyloc));
//          };
			break;

		case 2029: /* show_binlog_events_stmt: SHOW BINLOG_SYM EVENTS_SYM opt_binlog_in binlog_from opt_limit_clause */
//  if (yyn == 2029)
//    /* "sql_yacc.y":13638  */
//          {
//            yyval = NEW_PTN PT_show_binlog_events((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2030: /* show_relaylog_events_stmt: SHOW RELAYLOG_SYM EVENTS_SYM opt_binlog_in binlog_from opt_limit_clause opt_channel */
//  if (yyn == 2030)
//    /* "sql_yacc.y":13646  */
//          {
//            yyval = NEW_PTN PT_show_relaylog_events((yyloc), ((lexer.lex_str)(yystack.valueAt (3))), ((limit_clause)(yystack.valueAt (1))), ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 2031: /* show_keys_stmt: SHOW opt_extended keys_or_index from_or_in table_ident opt_db opt_where_clause */
//  if (yyn == 2031)
//    /* "sql_yacc.y":13659  */
//          {
//            // TODO: error if table_ident is <db>.<table> and opt_db is set.
//            if (((simple_string)(yystack.valueAt (1))))
//              ((table)(yystack.valueAt (2)))->change_db(((simple_string)(yystack.valueAt (1))));

//            yyval = NEW_PTN PT_show_keys((yyloc), ((is_not_empty)(yystack.valueAt (5))), ((table)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 2032: /* show_engines_stmt: SHOW opt_storage ENGINES_SYM */
//  if (yyn == 2032)
//    /* "sql_yacc.y":13670  */
//          {
//            yyval = NEW_PTN PT_show_engines((yyloc));
//          };
			break;

		case 2033: /* show_count_warnings_stmt: SHOW COUNT_SYM '(' '*' ')' WARNINGS */
//  if (yyn == 2033)
//    /* "sql_yacc.y":13677  */
//          {
//            yyval = NEW_PTN PT_show_count_warnings((yyloc));
//          };
			break;

		case 2034: /* show_count_errors_stmt: SHOW COUNT_SYM '(' '*' ')' ERRORS */
//  if (yyn == 2034)
//    /* "sql_yacc.y":13684  */
//          {
//            yyval = NEW_PTN PT_show_count_errors((yyloc));
//          };
			break;

		case 2035: /* show_warnings_stmt: SHOW WARNINGS opt_limit_clause */
//  if (yyn == 2035)
//    /* "sql_yacc.y":13691  */
//          {
//            yyval = NEW_PTN PT_show_warnings((yyloc), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2036: /* show_errors_stmt: SHOW ERRORS opt_limit_clause */
//  if (yyn == 2036)
//    /* "sql_yacc.y":13698  */
//          {
//            yyval = NEW_PTN PT_show_errors((yyloc), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2037: /* show_profiles_stmt: SHOW PROFILES_SYM */
//  if (yyn == 2037)
//    /* "sql_yacc.y":13705  */
//          {
//            push_warning_printf(YYTHD, Sql_condition::SL_WARNING,
//                                ER_WARN_DEPRECATED_SYNTAX,
//                                ER_THD(YYTHD, ER_WARN_DEPRECATED_SYNTAX),
//                                "SHOW PROFILES", "Performance Schema");
//            yyval = NEW_PTN PT_show_profiles((yyloc));
//          };
			break;

		case 2038: /* show_profile_stmt: SHOW PROFILE_SYM opt_profile_defs opt_for_query opt_limit_clause */
//  if (yyn == 2038)
//    /* "sql_yacc.y":13716  */
//          {
//            yyval = NEW_PTN PT_show_profile((yyloc), ((ulong_num)(yystack.valueAt (2))), ((query_id)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2039: /* show_status_stmt: SHOW opt_var_type STATUS_SYM opt_wild_or_where */
//  if (yyn == 2039)
//    /* "sql_yacc.y":13723  */
//          {
//             yyval = NEW_PTN PT_show_status((yyloc), ((var_type)(yystack.valueAt (2))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2040: /* show_processlist_stmt: SHOW opt_full PROCESSLIST_SYM */
//  if (yyn == 2040)
//    /* "sql_yacc.y":13730  */
//          {
//            yyval = NEW_PTN PT_show_processlist((yyloc), ((is_not_empty)(yystack.valueAt (1))));
//          };
			break;

		case 2041: /* show_variables_stmt: SHOW opt_var_type VARIABLES opt_wild_or_where */
//  if (yyn == 2041)
//    /* "sql_yacc.y":13737  */
//          {
//            yyval = NEW_PTN PT_show_variables((yyloc), ((var_type)(yystack.valueAt (2))), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2042: /* show_character_set_stmt: SHOW character_set opt_wild_or_where */
//  if (yyn == 2042)
//    /* "sql_yacc.y":13744  */
//          {
//            yyval = NEW_PTN PT_show_charsets((yyloc), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2043: /* show_collation_stmt: SHOW COLLATION_SYM opt_wild_or_where */
//  if (yyn == 2043)
//    /* "sql_yacc.y":13751  */
//          {
//            yyval = NEW_PTN PT_show_collations((yyloc), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2044: /* show_privileges_stmt: SHOW PRIVILEGES */
//  if (yyn == 2044)
//    /* "sql_yacc.y":13758  */
//          {
//            yyval = NEW_PTN PT_show_privileges((yyloc));
//          };
			break;

		case 2045: /* show_grants_stmt: SHOW GRANTS */
//  if (yyn == 2045)
//    /* "sql_yacc.y":13765  */
//          {
//            yyval = NEW_PTN PT_show_grants((yyloc), nullptr, nullptr);
//          };
			break;

		case 2046: /* show_grants_stmt: SHOW GRANTS FOR_SYM user */
//  if (yyn == 2046)
//    /* "sql_yacc.y":13769  */
//          {
//            yyval = NEW_PTN PT_show_grants((yyloc), ((lex_user)(yystack.valueAt (0))), nullptr);
//          };
			break;

		case 2047: /* show_grants_stmt: SHOW GRANTS FOR_SYM user USING user_list */
//  if (yyn == 2047)
//    /* "sql_yacc.y":13773  */
//          {
//            yyval = NEW_PTN PT_show_grants((yyloc), ((lex_user)(yystack.valueAt (2))), ((user_list)(yystack.valueAt (0))));
//          };
			break;

		case 2048: /* show_create_database_stmt: SHOW CREATE DATABASE opt_if_not_exists ident */
//  if (yyn == 2048)
//    /* "sql_yacc.y":13780  */
//          {
//            yyval = NEW_PTN PT_show_create_database((yyloc), ((is_not_empty)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2049: /* show_create_table_stmt: SHOW CREATE TABLE_SYM table_ident */
//  if (yyn == 2049)
//    /* "sql_yacc.y":13787  */
//          {
//            yyval = NEW_PTN PT_show_create_table((yyloc), ((table)(yystack.valueAt (0))));
//          };
			break;

		case 2050: /* show_create_view_stmt: SHOW CREATE VIEW_SYM table_ident */
//  if (yyn == 2050)
//    /* "sql_yacc.y":13794  */
//          {
//            yyval = NEW_PTN PT_show_create_view((yyloc), ((table)(yystack.valueAt (0))));
//          };
			break;

		case 2051: /* show_binary_log_status_stmt: SHOW BINARY_SYM LOG_SYM STATUS_SYM */
//  if (yyn == 2051)
//    /* "sql_yacc.y":13801  */
//          {
//            yyval = NEW_PTN PT_show_binary_log_status((yyloc));
//          };
			break;

		case 2052: /* show_replica_status_stmt: SHOW REPLICA_SYM STATUS_SYM opt_channel */
//  if (yyn == 2052)
//    /* "sql_yacc.y":13808  */
//          {
//            yyval = NEW_PTN PT_show_replica_status((yyloc), ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 2053: /* show_create_procedure_stmt: SHOW CREATE PROCEDURE_SYM sp_name */
//  if (yyn == 2053)
//    /* "sql_yacc.y":13815  */
//          {
//            yyval = NEW_PTN PT_show_create_procedure((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2054: /* show_create_function_stmt: SHOW CREATE FUNCTION_SYM sp_name */
//  if (yyn == 2054)
//    /* "sql_yacc.y":13822  */
//          {
//            yyval = NEW_PTN PT_show_create_function((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2055: /* show_create_trigger_stmt: SHOW CREATE TRIGGER_SYM sp_name */
//  if (yyn == 2055)
//    /* "sql_yacc.y":13829  */
//          {
//            yyval = NEW_PTN PT_show_create_trigger((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2056: /* show_procedure_status_stmt: SHOW PROCEDURE_SYM STATUS_SYM opt_wild_or_where */
//  if (yyn == 2056)
//    /* "sql_yacc.y":13836  */
//          {
//            yyval = NEW_PTN PT_show_status_proc((yyloc), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2057: /* show_function_status_stmt: SHOW FUNCTION_SYM STATUS_SYM opt_wild_or_where */
//  if (yyn == 2057)
//    /* "sql_yacc.y":13843  */
//          {
//            yyval = NEW_PTN PT_show_status_func((yyloc), ((wild_or_where)(yystack.valueAt (0))).wild, ((wild_or_where)(yystack.valueAt (0))).where);
//          };
			break;

		case 2058: /* show_procedure_code_stmt: SHOW PROCEDURE_SYM CODE_SYM sp_name */
//  if (yyn == 2058)
//    /* "sql_yacc.y":13850  */
//          {
//            yyval = NEW_PTN PT_show_procedure_code((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2059: /* show_function_code_stmt: SHOW FUNCTION_SYM CODE_SYM sp_name */
//  if (yyn == 2059)
//    /* "sql_yacc.y":13857  */
//          {
//            yyval = NEW_PTN PT_show_function_code((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2060: /* show_create_event_stmt: SHOW CREATE EVENT_SYM sp_name */
//  if (yyn == 2060)
//    /* "sql_yacc.y":13864  */
//          {
//            yyval = NEW_PTN PT_show_create_event((yyloc), ((spname)(yystack.valueAt (0))));
//          };
			break;

		case 2061: /* show_create_user_stmt: SHOW CREATE USER user */
//  if (yyn == 2061)
//    /* "sql_yacc.y":13871  */
//          {
//            yyval = NEW_PTN PT_show_create_user((yyloc), ((lex_user)(yystack.valueAt (0))));
//          };
			break;

		case 2062: /* show_parse_tree_stmt: SHOW PARSE_TREE_SYM simple_statement */
//  if (yyn == 2062)
//    /* "sql_yacc.y":13878  */
//          {
//#ifndef WITH_SHOW_PARSE_TREE
//            YYTHD->syntax_error_at(yystack.locationAt (1));
//            MYSQL_YYABORT;
//#endif
//            yyval = NEW_PTN PT_show_parse_tree((yyloc), ((top_level_node)(yystack.valueAt (0))));
//          };
			break;

		case 2064: /* engine_or_all: ALL */
//  if (yyn == 2064)
//    /* "sql_yacc.y":13889  */
//                        { yyval = {}; };
			break;

		case 2067: /* opt_db: %empty */
//  if (yyn == 2067)
//    /* "sql_yacc.y":13898  */
//                 { yyval= nullptr; };
			break;

		case 2068: /* opt_db: from_or_in ident */
//  if (yyn == 2068)
//    /* "sql_yacc.y":13899  */
//                           { yyval= ((lexer.lex_str)(yystack.valueAt (0))).str; };
			break;

		case 2069: /* opt_full: %empty */
//  if (yyn == 2069)
//    /* "sql_yacc.y":13903  */
//                      { yyval= 0; };
			break;

		case 2070: /* opt_full: FULL */
//  if (yyn == 2070)
//    /* "sql_yacc.y":13904  */
//                      { yyval= 1; };
			break;

		case 2071: /* opt_extended: %empty */
//  if (yyn == 2071)
//    /* "sql_yacc.y":13908  */
//                        { yyval= 0; };
			break;

		case 2072: /* opt_extended: EXTENDED_SYM */
//  if (yyn == 2072)
//    /* "sql_yacc.y":13909  */
//                        { yyval= 1; };
			break;

		case 2073: /* opt_show_cmd_type: %empty */
//  if (yyn == 2073)
//    /* "sql_yacc.y":13913  */
//                               { yyval= Show_cmd_type::STANDARD; };
			break;

		case 2074: /* opt_show_cmd_type: FULL */
//  if (yyn == 2074)
//    /* "sql_yacc.y":13914  */
//                               { yyval= Show_cmd_type::FULL_SHOW; };
			break;

		case 2075: /* opt_show_cmd_type: EXTENDED_SYM */
//  if (yyn == 2075)
//    /* "sql_yacc.y":13915  */
//                               { yyval= Show_cmd_type::EXTENDED_SHOW; };
			break;

		case 2076: /* opt_show_cmd_type: EXTENDED_SYM FULL */
//  if (yyn == 2076)
//    /* "sql_yacc.y":13916  */
//                               { yyval= Show_cmd_type::EXTENDED_FULL_SHOW; };
			break;

		case 2079: /* opt_binlog_in: %empty */
//  if (yyn == 2079)
//    /* "sql_yacc.y":13925  */
//                                 { yyval = {}; };
			break;

		case 2080: /* opt_binlog_in: IN_SYM TEXT_STRING_sys */
//  if (yyn == 2080)
//    /* "sql_yacc.y":13926  */
//                                 { yyval = ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 2081: /* binlog_from: %empty */
//  if (yyn == 2081)
//    /* "sql_yacc.y":13930  */
//                 { Lex->mi.pos = 4; /* skip magic number */ };
			break;

		case 2082: /* binlog_from: FROM ulonglong_num */
//  if (yyn == 2082)
//    /* "sql_yacc.y":13931  */
//                             { Lex->mi.pos = ((ulonglong_number)(yystack.valueAt (0))); };
			break;

		case 2083: /* opt_wild_or_where: %empty */
//  if (yyn == 2083)
//    /* "sql_yacc.y":13935  */
//                                        { yyval = {}; };
			break;

		case 2084: /* opt_wild_or_where: LIKE TEXT_STRING_literal */
//  if (yyn == 2084)
//    /* "sql_yacc.y":13936  */
//                                        { yyval = { ((lexer.lex_str)(yystack.valueAt (0))), {} }; };
			break;

		case 2085: /* opt_wild_or_where: where_clause */
//  if (yyn == 2085)
//    /* "sql_yacc.y":13937  */
//                                        { yyval = { {}, ((item)(yystack.valueAt (0))) }; };
			break;

		case 2086: /* describe_stmt: describe_command table_ident opt_describe_column */
//  if (yyn == 2086)
//    /* "sql_yacc.y":13943  */
//          {
//            yyval= NEW_PTN PT_show_fields((yyloc), Show_cmd_type::STANDARD, ((table)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2087: /* explain_stmt: describe_command opt_explain_options explainable_stmt */
//  if (yyn == 2087)
//    /* "sql_yacc.y":13950  */
//          {
//            yyval= NEW_PTN PT_explain((yyloc), ((explain_options_type)(yystack.valueAt (1))).explain_format_type, ((explain_options_type)(yystack.valueAt (1))).is_analyze,
//                  ((explain_options_type)(yystack.valueAt (1))).is_explicit, ((explainable_stmt)(yystack.valueAt (0))).statement,
//                  ((explain_options_type)(yystack.valueAt (1))).explain_into_variable_name.length ?
//                  std::optional<std::string_view>(
//                    to_string_view(((explain_options_type)(yystack.valueAt (1))).explain_into_variable_name)) :
//                  std::optional<std::string_view>(std::nullopt),
//                  ((explainable_stmt)(yystack.valueAt (0))).schema_name_for_explain);
//          };
			break;

		case 2088: /* explainable_stmt: opt_explain_for_schema select_stmt */
//  if (yyn == 2088)
//    /* "sql_yacc.y":13963  */
//          {
//            yyval.statement = ((top_level_node)(yystack.valueAt (0)));
//            yyval.schema_name_for_explain = ((lex_cstr)(yystack.valueAt (1)));
//          };
			break;

		case 2089: /* explainable_stmt: opt_explain_for_schema insert_stmt */
//  if (yyn == 2089)
//    /* "sql_yacc.y":13968  */
//          {
//            yyval.statement = ((top_level_node)(yystack.valueAt (0)));
//            yyval.schema_name_for_explain = ((lex_cstr)(yystack.valueAt (1)));
//          };
			break;

		case 2090: /* explainable_stmt: opt_explain_for_schema replace_stmt */
//  if (yyn == 2090)
//    /* "sql_yacc.y":13973  */
//          {
//            yyval.statement = ((top_level_node)(yystack.valueAt (0)));
//            yyval.schema_name_for_explain = ((lex_cstr)(yystack.valueAt (1)));
//          };
			break;

		case 2091: /* explainable_stmt: opt_explain_for_schema update_stmt */
//  if (yyn == 2091)
//    /* "sql_yacc.y":13978  */
//          {
//            yyval.statement = ((top_level_node)(yystack.valueAt (0)));
//            yyval.schema_name_for_explain = ((lex_cstr)(yystack.valueAt (1)));
//          };
			break;

		case 2092: /* explainable_stmt: opt_explain_for_schema delete_stmt */
//  if (yyn == 2092)
//    /* "sql_yacc.y":13983  */
//          {
//            yyval.statement = ((top_level_node)(yystack.valueAt (0)));
//            yyval.schema_name_for_explain = ((lex_cstr)(yystack.valueAt (1)));
//          };
			break;

		case 2093: /* explainable_stmt: FOR_SYM CONNECTION_SYM real_ulong_num */
//  if (yyn == 2093)
//    /* "sql_yacc.y":13988  */
//          {
//            yyval.statement = NEW_PTN PT_explain_for_connection((yyloc), static_cast<my_thread_id>(((ulong_num)(yystack.valueAt (0)))));
//            yyval.schema_name_for_explain = NULL_CSTR;
//          };
			break;

		case 2096: /* opt_explain_format: %empty */
//  if (yyn == 2096)
//    /* "sql_yacc.y":14001  */
//          {
//            yyval.is_explicit = false;
//            yyval.explain_format_type = YYTHD->variables.explain_format;
//          };
			break;

		case 2097: /* opt_explain_format: FORMAT_SYM EQ ident_or_text */
//  if (yyn == 2097)
//    /* "sql_yacc.y":14006  */
//          {
//            yyval.is_explicit = true;
//            if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "JSON"))
//              yyval.explain_format_type = Explain_format_type::JSON;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "TRADITIONAL"))
//              yyval.explain_format_type = Explain_format_type::TRADITIONAL;
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "TREE"))
//              yyval.explain_format_type = Explain_format_type::TREE;
//            else {
//              // This includes even TRADITIONAL_STRICT. Since this value is
//              // only meant for mtr infrastructure temporarily, we don't want
//              // the user to explicitly use this value in EXPLAIN statements.
//              // This results in having one less place to deprecate from.
//              my_error(ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2098: /* opt_explain_options: ANALYZE_SYM opt_explain_format */
//  if (yyn == 2098)
//    /* "sql_yacc.y":14027  */
//          {
//            yyval = ((explain_options_type)(yystack.valueAt (0)));
//            yyval.is_analyze = true;
//            yyval.explain_into_variable_name = NULL_STR;
//          };
			break;

		case 2099: /* opt_explain_options: opt_explain_format opt_explain_into */
//  if (yyn == 2099)
//    /* "sql_yacc.y":14033  */
//          {
//            yyval = ((explain_options_type)(yystack.valueAt (1)));
//            yyval.is_analyze = false;

//            if (((lexer.lex_str)(yystack.valueAt (0))).length) {
//              if (!yyval.is_explicit) {
//                MYSQL_YYABORT_ERROR(
//                  ER_EXPLAIN_INTO_IMPLICIT_FORMAT_NOT_SUPPORTED, MYF(0));
//              }
//              if (yyval.explain_format_type != Explain_format_type::JSON) {
//                if (yyval.explain_format_type == Explain_format_type::TREE) {
//                  MYSQL_YYABORT_ERROR(ER_EXPLAIN_INTO_FORMAT_NOT_SUPPORTED,
//                                      MYF(0), "TREE");
//                } else {
//                  MYSQL_YYABORT_ERROR(ER_EXPLAIN_INTO_FORMAT_NOT_SUPPORTED,
//                                      MYF(0), "TRADITIONAL");
//                }
//              }
//            }
//            yyval.explain_into_variable_name = ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 2100: /* opt_explain_into: %empty */
//  if (yyn == 2100)
//    /* "sql_yacc.y":14058  */
//          {
//            yyval = NULL_STR;
//          };
			break;

		case 2101: /* opt_explain_into: INTO '@' ident_or_text */
//  if (yyn == 2101)
//    /* "sql_yacc.y":14062  */
//          {
//            yyval = ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 2102: /* opt_explain_for_schema: %empty */
//  if (yyn == 2102)
//    /* "sql_yacc.y":14069  */
//          {
//            yyval = NULL_CSTR;
//          };
			break;

		case 2103: /* opt_explain_for_schema: FOR_SYM DATABASE ident_or_text */
//  if (yyn == 2103)
//    /* "sql_yacc.y":14073  */
//          {
//            yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2104: /* opt_describe_column: %empty */
//  if (yyn == 2104)
//    /* "sql_yacc.y":14079  */
//                 { yyval= LEX_STRING{ nullptr, 0 }; };
			break;

		case 2105: /* opt_describe_column: text_string */
//  if (yyn == 2105)
//    /* "sql_yacc.y":14081  */
//          {
//            if (((string)(yystack.valueAt (0))) != nullptr)
//              yyval= ((string)(yystack.valueAt (0)))->lex_string();
//          };
			break;

		case 2107: /* $@46: %empty */
			if (yyn == 2107)
			/* "sql_yacc.y":14093 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_FLUSH;
//            lex->type= 0;
//            lex->no_write_to_binlog= ((num)(yystack.valueAt (0)));
				thd.lex.sqlCommand = SQLCommand.SQLCOM_FLUSH;
			}
			;
			break;

		case 2108: /* flush: FLUSH_SYM opt_no_write_to_binlog $@46 flush_options */
//  if (yyn == 2108)
//    /* "sql_yacc.y":14100  */
//          {};
			break;

		case 2109: /* $@47: %empty */
//  if (yyn == 2109)
//    /* "sql_yacc.y":14105  */
//          {
//            Lex->type|= REFRESH_TABLES;
//            /*
//              Set type of metadata and table locks for
//              FLUSH TABLES table_list [WITH READ LOCK].
//            */
//            YYPS->m_lock_type= TL_READ_NO_INSERT;
//            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
//            if (Select->add_tables(YYTHD, ((table_list)(yystack.valueAt (0))), TL_OPTION_UPDATING,
//                                   YYPS->m_lock_type, YYPS->m_mdl_type))
//              MYSQL_YYABORT;
//          };
			break;

		case 2110: /* flush_options: table_or_tables opt_table_list $@47 opt_flush_lock */
//  if (yyn == 2110)
//    /* "sql_yacc.y":14117  */
//                         {};
			break;

		case 2112: /* opt_flush_lock: %empty */
//  if (yyn == 2112)
//    /* "sql_yacc.y":14122  */
//                 {};
			break;

		case 2113: /* opt_flush_lock: WITH READ_SYM LOCK_SYM */
//  if (yyn == 2113)
//    /* "sql_yacc.y":14124  */
//          {
//            Table_ref *tables= Lex->query_tables;
//            Lex->type|= REFRESH_READ_LOCK;
//            for (; tables; tables= tables->next_global)
//            {
//              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
//              /* Don't try to flush views. */
//              tables->required_type= dd::enum_table_type::BASE_TABLE;
//              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
//            }
//          };
			break;

		case 2114: /* $@48: %empty */
//  if (yyn == 2114)
//    /* "sql_yacc.y":14136  */
//          {
//            if (Lex->query_tables == nullptr) // Table list can't be empty
//            {
//              YYTHD->syntax_error(ER_NO_TABLES_USED);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2115: /* opt_flush_lock: FOR_SYM $@48 EXPORT_SYM */
//  if (yyn == 2115)
//    /* "sql_yacc.y":14144  */
//          {
//            Table_ref *tables= Lex->query_tables;
//            Lex->type|= REFRESH_FOR_EXPORT;
//            for (; tables; tables= tables->next_global)
//            {
//              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
//              /* Don't try to flush views. */
//              tables->required_type= dd::enum_table_type::BASE_TABLE;
//              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
//            }
//          };
			break;

		case 2117: /* flush_options_list: flush_option */
//  if (yyn == 2117)
//    /* "sql_yacc.y":14160  */
//          {};
			break;

		case 2118: /* flush_option: ERROR_SYM LOGS_SYM */
//  if (yyn == 2118)
//    /* "sql_yacc.y":14165  */
//          { Lex->type|= REFRESH_ERROR_LOG; };
			break;

		case 2119: /* flush_option: ENGINE_SYM LOGS_SYM */
//  if (yyn == 2119)
//    /* "sql_yacc.y":14167  */
//          { Lex->type|= REFRESH_ENGINE_LOG; };
			break;

		case 2120: /* flush_option: GENERAL LOGS_SYM */
//  if (yyn == 2120)
//    /* "sql_yacc.y":14169  */
//          { Lex->type|= REFRESH_GENERAL_LOG; };
			break;

		case 2121: /* flush_option: SLOW LOGS_SYM */
//  if (yyn == 2121)
//    /* "sql_yacc.y":14171  */
//          { Lex->type|= REFRESH_SLOW_LOG; };
			break;

		case 2122: /* flush_option: BINARY_SYM LOGS_SYM */
//  if (yyn == 2122)
//    /* "sql_yacc.y":14173  */
//          { Lex->type|= REFRESH_BINARY_LOG; };
			break;

		case 2123: /* flush_option: RELAY LOGS_SYM opt_channel */
//  if (yyn == 2123)
//    /* "sql_yacc.y":14175  */
//          {
//            Lex->type|= REFRESH_RELAY_LOG;
//            if (Lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 2124: /* flush_option: PRIVILEGES */
//  if (yyn == 2124)
//    /* "sql_yacc.y":14181  */
//          { Lex->type|= REFRESH_GRANT; };
			break;

		case 2125: /* flush_option: LOGS_SYM */
//  if (yyn == 2125)
//    /* "sql_yacc.y":14183  */
//          { Lex->type|= REFRESH_LOG; };
			break;

		case 2126: /* flush_option: STATUS_SYM */
//  if (yyn == 2126)
//    /* "sql_yacc.y":14185  */
//          { Lex->type|= REFRESH_STATUS; };
			break;

		case 2127: /* flush_option: RESOURCES */
//  if (yyn == 2127)
//    /* "sql_yacc.y":14187  */
//          { Lex->type|= REFRESH_USER_RESOURCES; };
			break;

		case 2128: /* flush_option: OPTIMIZER_COSTS_SYM */
//  if (yyn == 2128)
//    /* "sql_yacc.y":14189  */
//          { Lex->type|= REFRESH_OPTIMIZER_COSTS; };
			break;

		case 2129: /* opt_table_list: %empty */
//  if (yyn == 2129)
//    /* "sql_yacc.y":14193  */
//                 { yyval= nullptr; };
			break;

		case 2131: /* $@49: %empty */
			if (yyn == 2131)
			/* "sql_yacc.y":14199 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_RESET; lex->type=0;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RESET;
			}
			;
			break;

		case 2132: /* reset: RESET_SYM $@49 reset_options */
//  if (yyn == 2132)
//    /* "sql_yacc.y":14204  */
//          {};
			break;

		case 2133: /* reset: RESET_SYM PERSIST_SYM opt_if_exists_ident */
			if (yyn == 2133)
			/* "sql_yacc.y":14206 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_RESET;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RESET;
//            lex->type|= REFRESH_PERSIST;
//            lex->option_type= OPT_PERSIST;
			}
			;
			break;

		case 2136: /* opt_if_exists_ident: %empty */
//  if (yyn == 2136)
//    /* "sql_yacc.y":14221  */
//          {
//            LEX *lex=Lex;
//            lex->drop_if_exists= false;
//            lex->name= NULL_STR;
//          };
			break;

		case 2137: /* opt_if_exists_ident: if_exists persisted_variable_ident */
//  if (yyn == 2137)
//    /* "sql_yacc.y":14227  */
//          {
//            LEX *lex=Lex;
//            lex->drop_if_exists= ((num)(yystack.valueAt (1)));
//            lex->name= ((lexer.lex_str)(yystack.valueAt (0)));
//          };
			break;

		case 2139: /* persisted_variable_ident: ident '.' ident */
//  if (yyn == 2139)
//    /* "sql_yacc.y":14237  */
//          {
//            const LEX_STRING prefix = ((lexer.lex_str)(yystack.valueAt (2)));
//            const LEX_STRING suffix = ((lexer.lex_str)(yystack.valueAt (0)));
//            yyval.length = prefix.length + 1 + suffix.length + 1;
//            yyval.str = static_cast<char *>(YYTHD->alloc(yyval.length));
//            if (yyval.str == nullptr) YYABORT;  // OOM
//            strxnmov(yyval.str, yyval.length, prefix.str, ".", suffix.str, nullptr);
//          };
			break;

		case 2140: /* persisted_variable_ident: DEFAULT_SYM '.' ident */
//  if (yyn == 2140)
//    /* "sql_yacc.y":14246  */
//          {
//            const LEX_CSTRING prefix{STRING_WITH_LEN("default")};
//            const LEX_STRING suffix = ((lexer.lex_str)(yystack.valueAt (0)));
//            yyval.length = prefix.length + 1 + suffix.length + 1;
//            yyval.str = static_cast<char *>(YYTHD->alloc(yyval.length));
//            if (yyval.str == nullptr) YYABORT;  // OOM
//            strxnmov(yyval.str, yyval.length, prefix.str, ".", suffix.str, nullptr);
//          };
			break;

		case 2141: /* $@50: %empty */
//  if (yyn == 2141)
//    /* "sql_yacc.y":14258  */
//          { Lex->type|= REFRESH_REPLICA; };
			break;

		case 2142: /* reset_option: REPLICA_SYM $@50 opt_replica_reset_options opt_channel */
//  if (yyn == 2142)
//    /* "sql_yacc.y":14260  */
//          {
//          if (Lex->set_channel_name(((lex_cstr)(yystack.valueAt (0)))))
//            MYSQL_YYABORT;  // OOM
//          };
			break;

		case 2143: /* $@51: %empty */
//  if (yyn == 2143)
//    /* "sql_yacc.y":14265  */
//          {
//            Lex->type|= REFRESH_SOURCE;
//            /*
//              RESET BINARY LOGS AND GTIDS should acquire global read lock
//              in order to avoid any parallel transaction commits
//              while the reset operation is going on.

//              *Only if* the thread is not already acquired the global
//              read lock, server will acquire global read lock
//              during the operation and release it at the
//              end of the reset operation.
//            */
//            if (!(YYTHD)->global_read_lock.is_acquired())
//              Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK;
//          };
			break;

		case 2145: /* opt_replica_reset_options: %empty */
//  if (yyn == 2145)
//    /* "sql_yacc.y":14284  */
//                      { Lex->reset_replica_info.all= false; };
			break;

		case 2146: /* opt_replica_reset_options: ALL */
//  if (yyn == 2146)
//    /* "sql_yacc.y":14285  */
//                      { Lex->reset_replica_info.all= true; };
			break;

		case 2147: /* source_reset_options: %empty */
//  if (yyn == 2147)
//    /* "sql_yacc.y":14289  */
//                 {};
			break;

		case 2148: /* source_reset_options: TO_SYM real_ulonglong_num */
//  if (yyn == 2148)
//    /* "sql_yacc.y":14291  */
//          {
//            if (((ulonglong_number)(yystack.valueAt (0))) == 0 || ((ulonglong_number)(yystack.valueAt (0))) > MAX_ALLOWED_FN_EXT_RESET_BIN_LOGS)
//            {
//              my_error(ER_RESET_SOURCE_TO_VALUE_OUT_OF_RANGE, MYF(0),
//                       ((ulonglong_number)(yystack.valueAt (0))), MAX_ALLOWED_FN_EXT_RESET_BIN_LOGS);
//              MYSQL_YYABORT;
//            }
//            else
//              Lex->next_binlog_file_nr = ((ulonglong_number)(yystack.valueAt (0)));
//          };
			break;

		case 2149: /* $@52: %empty */
			if (yyn == 2149)
			/* "sql_yacc.y":14305 */
			{
//            LEX *lex=Lex;
//            lex->type=0;
//            lex->sql_command = SQLCOM_PURGE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_PURGE;
			}
			;
			break;

		case 2150: /* purge: PURGE $@52 purge_options */
//  if (yyn == 2150)
//    /* "sql_yacc.y":14311  */
//          {};
			break;

		case 2152: /* purge_option: TO_SYM TEXT_STRING_sys */
//  if (yyn == 2152)
//    /* "sql_yacc.y":14320  */
//          {
//            Lex->to_log = ((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 2153: /* purge_option: BEFORE_SYM expr */
			if (yyn == 2153)
			/* "sql_yacc.y":14324 */
			{
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));

//            LEX *lex= Lex;
//            lex->purge_value_list.clear();
//            lex->purge_value_list.push_front(((item)(yystack.valueAt (0))));
//            lex->sql_command= SQLCOM_PURGE_BEFORE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_PURGE_BEFORE;
			}
			;
			break;

		case 2154: /* kill: KILL_SYM kill_option expr */
			if (yyn == 2154)
			/* "sql_yacc.y":14338 */
			{
//            ITEMIZE(((item)(yystack.valueAt (0))), &((item)(yystack.valueAt (0))));

//            LEX *lex=Lex;
//            lex->kill_value_list.clear();
//            lex->kill_value_list.push_front(((item)(yystack.valueAt (0))));
//            lex->sql_command= SQLCOM_KILL;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_KILL;
			}
			;
			break;

		case 2155: /* kill_option: %empty */
//  if (yyn == 2155)
//    /* "sql_yacc.y":14349  */
//                         { Lex->type= 0; };
			break;

		case 2156: /* kill_option: CONNECTION_SYM */
//  if (yyn == 2156)
//    /* "sql_yacc.y":14350  */
//                         { Lex->type= 0; };
			break;

		case 2157: /* kill_option: QUERY_SYM */
//  if (yyn == 2157)
//    /* "sql_yacc.y":14351  */
//                         { Lex->type= ONLY_KILL_QUERY; };
			break;

		case 2158: /* use: USE_SYM ident */
			if (yyn == 2158)
			/* "sql_yacc.y":14358 */
			{
//            LEX *lex=Lex;
//            if (lex->sphead) {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
//              MYSQL_YYABORT;
//            }
//            lex->sql_command=SQLCOM_CHANGE_DB;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CHANGE_DB;
//            lex->query_block->db= ((lexer.lex_str)(yystack.valueAt (0))).str;
			}
			;
			break;

		case 2159: /*
					 * load_stmt: LOAD data_or_xml load_data_lock opt_from_keyword opt_local load_source_type TEXT_STRING_filesystem opt_source_count opt_source_order opt_duplicate
					 * INTO TABLE_SYM table_ident opt_use_partition opt_load_data_charset opt_compression_algorithm opt_xml_rows_identified_by opt_field_term opt_line_term
					 * opt_ignore_lines opt_field_or_var_spec opt_load_data_set_spec opt_load_parallel opt_load_memory opt_load_algorithm
					 */
//  if (yyn == 2159)
//    /* "sql_yacc.y":14397  */
//          {
//            yyval= NEW_PTN PT_load_table((yyloc), ((filetype)(yystack.valueAt (23))),  // data_or_xml
//                                      ((lock_type)(yystack.valueAt (22))),  // load_data_lock
//                                      ((is_not_empty)(yystack.valueAt (20))),  // opt_local
//                                      ((source_type)(yystack.valueAt (19))),  // source type
//                                      ((lexer.lex_str)(yystack.valueAt (18))),  // TEXT_STRING_filesystem
//                                      ((ulong_num)(yystack.valueAt (17))),  // opt_source_count
//                                      ((is_not_empty)(yystack.valueAt (16))),  // opt_source_order
//                                      ((on_duplicate)(yystack.valueAt (15))), // opt_duplicate
//                                      ((table)(yystack.valueAt (12))), // table_ident
//                                      ((string_list)(yystack.valueAt (11))), // opt_use_partition
//                                      ((lexer.charset)(yystack.valueAt (10))), // opt_load_data_charset
//                                      ((lex_cstr)(yystack.valueAt (9))), // opt_compression_algorithm
//                                      ((string)(yystack.valueAt (8))), // opt_xml_rows_identified_by
//                                      ((field_separators)(yystack.valueAt (7))), // opt_field_term
//                                      ((line_separators)(yystack.valueAt (6))), // opt_line_term
//                                      ((ulong_num)(yystack.valueAt (5))), // opt_ignore_lines
//                                      ((item_list2)(yystack.valueAt (4))), // opt_field_or_var_spec
//                                      ((load_set_list)(yystack.valueAt (3))).set_var_list,// opt_load_data_set_spec
//                                      ((load_set_list)(yystack.valueAt (3))).set_expr_list,
//                                      ((load_set_list)(yystack.valueAt (3))).set_expr_str_list,
//                                      ((ulong_num)(yystack.valueAt (2))),  // opt_load_parallel
//                                      ((ulonglong_number)(yystack.valueAt (1))),  // opt_load_memory
//                                      ((is_not_empty)(yystack.valueAt (0)))); // opt_load_algorithm
//          };
			break;

		case 2160: /* data_or_xml: DATA_SYM */
//  if (yyn == 2160)
//    /* "sql_yacc.y":14425  */
//                  { yyval= FILETYPE_CSV; };
			break;

		case 2161: /* data_or_xml: XML_SYM */
//  if (yyn == 2161)
//    /* "sql_yacc.y":14426  */
//                  { yyval= FILETYPE_XML; };
			break;

		case 2162: /* opt_local: %empty */
//  if (yyn == 2162)
//    /* "sql_yacc.y":14430  */
//                      { yyval= false; };
			break;

		case 2163: /* opt_local: LOCAL_SYM */
//  if (yyn == 2163)
//    /* "sql_yacc.y":14431  */
//                      { yyval= true; };
			break;

		case 2164: /* opt_from_keyword: %empty */
//  if (yyn == 2164)
//    /* "sql_yacc.y":14435  */
//                      {};
			break;

		case 2165: /* opt_from_keyword: FROM */
//  if (yyn == 2165)
//    /* "sql_yacc.y":14436  */
//                      {};
			break;

		case 2166: /* load_data_lock: %empty */
//  if (yyn == 2166)
//    /* "sql_yacc.y":14440  */
//                      { yyval= TL_WRITE_DEFAULT; };
			break;

		case 2167: /* load_data_lock: CONCURRENT */
//  if (yyn == 2167)
//    /* "sql_yacc.y":14441  */
//                      { yyval= TL_WRITE_CONCURRENT_INSERT; };
			break;

		case 2168: /* load_data_lock: LOW_PRIORITY */
//  if (yyn == 2168)
//    /* "sql_yacc.y":14442  */
//                       { yyval= TL_WRITE_LOW_PRIORITY; };
			break;

		case 2169: /* load_source_type: INFILE_SYM */
//  if (yyn == 2169)
//    /* "sql_yacc.y":14446  */
//                     { yyval = LOAD_SOURCE_FILE; };
			break;

		case 2170: /* load_source_type: URL_SYM */
//  if (yyn == 2170)
//    /* "sql_yacc.y":14447  */
//                     { yyval = LOAD_SOURCE_URL; };
			break;

		case 2171: /* load_source_type: S3_SYM */
//  if (yyn == 2171)
//    /* "sql_yacc.y":14448  */
//                     { yyval = LOAD_SOURCE_S3; };
			break;

		case 2172: /* opt_source_count: %empty */
//  if (yyn == 2172)
//    /* "sql_yacc.y":14452  */
//                 { yyval= 0; };
			break;

		case 2173: /* opt_source_count: IDENT_sys NUM */
//  if (yyn == 2173)
//    /* "sql_yacc.y":14454  */
//          {
//            const long n_files= atol(((lexer.lex_str)(yystack.valueAt (0))).str);
//            // COUNT can be key word or identifier based on SQL mode
//            if (my_strcasecmp(system_charset_info, ((lexer.lex_str)(yystack.valueAt (1))).str, "count") != 0) {
//              YYTHD->syntax_error_at(yystack.locationAt (1), "COUNT expected");
//              YYABORT;
//            }
//            if (n_files == 0) {
//              YYTHD->syntax_error_at(yystack.locationAt (0), "The number of files cannot be zero");
//              MYSQL_YYABORT;
//            }
//            yyval= n_files;
//          };
			break;

		case 2174: /* opt_source_order: %empty */
//  if (yyn == 2174)
//    /* "sql_yacc.y":14470  */
//                 { yyval= false; };
			break;

		case 2175: /* opt_source_order: IN_SYM PRIMARY_SYM KEY_SYM ORDER_SYM */
//  if (yyn == 2175)
//    /* "sql_yacc.y":14471  */
//                                               { yyval= true; };
			break;

		case 2176: /* opt_duplicate: %empty */
//  if (yyn == 2176)
//    /* "sql_yacc.y":14475  */
//                 { yyval= On_duplicate::ERROR; };
			break;

		case 2178: /* duplicate: REPLACE_SYM */
//  if (yyn == 2178)
//    /* "sql_yacc.y":14480  */
//                      { yyval= On_duplicate::REPLACE_DUP; };
			break;

		case 2179: /* duplicate: IGNORE_SYM */
//  if (yyn == 2179)
//    /* "sql_yacc.y":14481  */
//                      { yyval= On_duplicate::IGNORE_DUP; };
			break;

		case 2180: /* opt_field_term: %empty */
//  if (yyn == 2180)
//    /* "sql_yacc.y":14485  */
//                 { yyval.cleanup(); };
			break;

		case 2181: /* opt_field_term: COLUMNS field_term_list */
//  if (yyn == 2181)
//    /* "sql_yacc.y":14486  */
//                                  { yyval= ((field_separators)(yystack.valueAt (0))); };
			break;

		case 2182: /* field_term_list: field_term_list field_term */
//  if (yyn == 2182)
//    /* "sql_yacc.y":14491  */
//          {
//            yyval= ((field_separators)(yystack.valueAt (1)));
//            yyval.merge_field_separators(((field_separators)(yystack.valueAt (0))));
//          };
			break;

		case 2184: /* field_term: TERMINATED BY text_string */
//  if (yyn == 2184)
//    /* "sql_yacc.y":14500  */
//          {
//            yyval.cleanup();
//            yyval.field_term= ((string)(yystack.valueAt (0)));
//          };
			break;

		case 2185: /* field_term: OPTIONALLY ENCLOSED BY text_string */
//  if (yyn == 2185)
//    /* "sql_yacc.y":14505  */
//          {
//            yyval.cleanup();
//            yyval.enclosed= ((string)(yystack.valueAt (0)));
//            yyval.opt_enclosed= 1;
//          };
			break;

		case 2186: /* field_term: ENCLOSED BY text_string */
//  if (yyn == 2186)
//    /* "sql_yacc.y":14511  */
//          {
//            yyval.cleanup();
//            yyval.enclosed= ((string)(yystack.valueAt (0)));
//          };
			break;

		case 2187: /* field_term: ESCAPED BY text_string */
//  if (yyn == 2187)
//    /* "sql_yacc.y":14516  */
//          {
//            yyval.cleanup();
//            yyval.escaped= ((string)(yystack.valueAt (0)));
//          };
			break;

		case 2188: /* opt_line_term: %empty */
//  if (yyn == 2188)
//    /* "sql_yacc.y":14523  */
//                 { yyval.cleanup(); };
			break;

		case 2189: /* opt_line_term: LINES line_term_list */
//  if (yyn == 2189)
//    /* "sql_yacc.y":14524  */
//                               { yyval= ((line_separators)(yystack.valueAt (0))); };
			break;

		case 2190: /* line_term_list: line_term_list line_term */
//  if (yyn == 2190)
//    /* "sql_yacc.y":14529  */
//          {
//            yyval= ((line_separators)(yystack.valueAt (1)));
//            yyval.merge_line_separators(((line_separators)(yystack.valueAt (0))));
//          };
			break;

		case 2192: /* line_term: TERMINATED BY text_string */
//  if (yyn == 2192)
//    /* "sql_yacc.y":14538  */
//          {
//            yyval.cleanup();
//            yyval.line_term= ((string)(yystack.valueAt (0)));
//          };
			break;

		case 2193: /* line_term: STARTING BY text_string */
//  if (yyn == 2193)
//    /* "sql_yacc.y":14543  */
//          {
//            yyval.cleanup();
//            yyval.line_start= ((string)(yystack.valueAt (0)));
//          };
			break;

		case 2194: /* opt_xml_rows_identified_by: %empty */
//  if (yyn == 2194)
//    /* "sql_yacc.y":14550  */
//                 { yyval= nullptr; };
			break;

		case 2195: /* opt_xml_rows_identified_by: ROWS_SYM IDENTIFIED_SYM BY text_string */
//  if (yyn == 2195)
//    /* "sql_yacc.y":14551  */
//                                                 { yyval= ((string)(yystack.valueAt (0))); };
			break;

		case 2196: /* opt_ignore_lines: %empty */
//  if (yyn == 2196)
//    /* "sql_yacc.y":14555  */
//                 { yyval= 0; };
			break;

		case 2197: /* opt_ignore_lines: IGNORE_SYM NUM lines_or_rows */
//  if (yyn == 2197)
//    /* "sql_yacc.y":14556  */
//                                        { yyval= atol(((lexer.lex_str)(yystack.valueAt (1))).str); };
			break;

		case 2200: /* opt_field_or_var_spec: %empty */
//  if (yyn == 2200)
//    /* "sql_yacc.y":14565  */
//                                 { yyval= nullptr; };
			break;

		case 2201: /* opt_field_or_var_spec: '(' fields_or_vars ')' */
//  if (yyn == 2201)
//    /* "sql_yacc.y":14566  */
//                                 { yyval= ((item_list2)(yystack.valueAt (1))); };
			break;

		case 2202: /* opt_field_or_var_spec: '(' ')' */
//  if (yyn == 2202)
//    /* "sql_yacc.y":14567  */
//                                 { yyval= nullptr; };
			break;

		case 2203: /* fields_or_vars: fields_or_vars ',' field_or_var */
//  if (yyn == 2203)
//    /* "sql_yacc.y":14572  */
//          {
//            yyval= ((item_list2)(yystack.valueAt (2)));
//            if (yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//            yyval->m_pos = (yyloc);
//          };
			break;

		case 2204: /* fields_or_vars: field_or_var */
//  if (yyn == 2204)
//    /* "sql_yacc.y":14579  */
//          {
//            yyval= NEW_PTN PT_item_list((yyloc));
//            if (yyval == nullptr || yyval->push_back(((item)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2206: /* field_or_var: '@' ident_or_text */
//  if (yyn == 2206)
//    /* "sql_yacc.y":14589  */
//          {
//            yyval= NEW_PTN Item_user_var_as_out_param((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2207: /* opt_load_data_set_spec: %empty */
//  if (yyn == 2207)
//    /* "sql_yacc.y":14595  */
//                 { yyval= {nullptr, nullptr, nullptr}; };
			break;

		case 2208: /* opt_load_data_set_spec: SET_SYM load_data_set_list */
//  if (yyn == 2208)
//    /* "sql_yacc.y":14596  */
//                                     { yyval= ((load_set_list)(yystack.valueAt (0))); };
			break;

		case 2209: /* load_data_set_list: load_data_set_list ',' load_data_set_elem */
//  if (yyn == 2209)
//    /* "sql_yacc.y":14601  */
//          {
//            yyval= ((load_set_list)(yystack.valueAt (2)));
//            if (yyval.set_var_list->push_back(((load_set_element)(yystack.valueAt (0))).set_var) ||
//                yyval.set_expr_list->push_back(((load_set_element)(yystack.valueAt (0))).set_expr) ||
//                yyval.set_expr_str_list->push_back(((load_set_element)(yystack.valueAt (0))).set_expr_str))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2210: /* load_data_set_list: load_data_set_elem */
//  if (yyn == 2210)
//    /* "sql_yacc.y":14609  */
//          {
//            yyval.set_var_list= NEW_PTN PT_item_list((yyloc));
//            if (yyval.set_var_list == nullptr ||
//                yyval.set_var_list->push_back(((load_set_element)(yystack.valueAt (0))).set_var))
//              MYSQL_YYABORT; // OOM

//            yyval.set_expr_list= NEW_PTN PT_item_list((yyloc));
//            if (yyval.set_expr_list == nullptr ||
//                yyval.set_expr_list->push_back(((load_set_element)(yystack.valueAt (0))).set_expr))
//              MYSQL_YYABORT; // OOM

//            yyval.set_expr_str_list= NEW_PTN List<String>;
//            if (yyval.set_expr_str_list == nullptr ||
//                yyval.set_expr_str_list->push_back(((load_set_element)(yystack.valueAt (0))).set_expr_str))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2211: /* load_data_set_elem: simple_ident_nospvar equal expr_or_default */
//  if (yyn == 2211)
//    /* "sql_yacc.y":14629  */
//          {
//            size_t length= yystack.locationAt (0).cpp.end - yystack.locationAt (1).cpp.start;

//            if (((item)(yystack.valueAt (0))) == nullptr)
//              MYSQL_YYABORT; // OOM
//            ((item)(yystack.valueAt (0)))->item_name.copy(yystack.locationAt (1).cpp.start, length, YYTHD->charset());

//            yyval.set_var= ((item)(yystack.valueAt (2)));
//            yyval.set_expr= ((item)(yystack.valueAt (0)));
//            yyval.set_expr_str= NEW_PTN String(yystack.locationAt (1).cpp.start,
//                                            length,
//                                            YYTHD->charset());
//            if (yyval.set_expr_str == nullptr)
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2212: /* opt_load_algorithm: %empty */
//  if (yyn == 2212)
//    /* "sql_yacc.y":14647  */
//                                    { yyval = false; };
			break;

		case 2213: /* opt_load_algorithm: ALGORITHM_SYM EQ BULK_SYM */
//  if (yyn == 2213)
//    /* "sql_yacc.y":14648  */
//                                    { yyval = true; };
			break;

		case 2214: /* opt_compression_algorithm: %empty */
//  if (yyn == 2214)
//    /* "sql_yacc.y":14652  */
//                                    { yyval = {}; };
			break;

		case 2215: /* opt_compression_algorithm: COMPRESSION_SYM EQ TEXT_STRING_sys */
//  if (yyn == 2215)
//    /* "sql_yacc.y":14653  */
//                                             { yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 2216: /* opt_load_parallel: %empty */
//  if (yyn == 2216)
//    /* "sql_yacc.y":14658  */
//                              { yyval = 0; };
			break;

		case 2217: /* opt_load_parallel: PARALLEL_SYM EQ NUM */
//  if (yyn == 2217)
//    /* "sql_yacc.y":14659  */
//                              { yyval= atol(((lexer.lex_str)(yystack.valueAt (0))).str); };
			break;

		case 2218: /* opt_load_memory: %empty */
//  if (yyn == 2218)
//    /* "sql_yacc.y":14663  */
//                                    { yyval = 0; };
			break;

		case 2219: /* opt_load_memory: MEMORY_SYM EQ size_number */
//  if (yyn == 2219)
//    /* "sql_yacc.y":14664  */
//                                    { yyval = ((ulonglong_number)(yystack.valueAt (0))); };
			break;

		case 2220: /* text_literal: TEXT_STRING */
//  if (yyn == 2220)
//    /* "sql_yacc.y":14671  */
//          {
//            yyval= NEW_PTN PTI_text_literal_text_string((yyloc),
//                YYTHD->m_parser_state->m_lip.text_string_is_7bit(), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2221: /* text_literal: NCHAR_STRING */
//  if (yyn == 2221)
//    /* "sql_yacc.y":14676  */
//          {
//            yyval= NEW_PTN PTI_text_literal_nchar_string((yyloc),
//                YYTHD->m_parser_state->m_lip.text_string_is_7bit(), ((lexer.lex_str)(yystack.valueAt (0))));
//            warn_about_deprecated_national(YYTHD);
//          };
			break;

		case 2222: /* text_literal: UNDERSCORE_CHARSET TEXT_STRING */
//  if (yyn == 2222)
//    /* "sql_yacc.y":14682  */
//          {
//            yyval= NEW_PTN PTI_text_literal_underscore_charset((yyloc),
//                YYTHD->m_parser_state->m_lip.text_string_is_7bit(), ((lexer.charset)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2223: /* text_literal: text_literal TEXT_STRING_literal */
//  if (yyn == 2223)
//    /* "sql_yacc.y":14687  */
//          {
//            yyval= NEW_PTN PTI_text_literal_concat((yyloc),
//                YYTHD->m_parser_state->m_lip.text_string_is_7bit(), ((text_literal)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2224: /* text_string: TEXT_STRING_literal */
//  if (yyn == 2224)
//    /* "sql_yacc.y":14695  */
//          {
//            yyval= NEW_PTN String(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length,
//                               YYTHD->variables.collation_connection);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2225: /* text_string: HEX_NUM */
//  if (yyn == 2225)
//    /* "sql_yacc.y":14702  */
//          {
//            LEX_CSTRING s= Item_hex_string::make_hex_str(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//            yyval= NEW_PTN String(s.str, s.length, &my_charset_bin);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2226: /* text_string: BIN_NUM */
//  if (yyn == 2226)
//    /* "sql_yacc.y":14709  */
//          {
//            LEX_CSTRING s= Item_bin_string::make_bin_str(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//            yyval= NEW_PTN String(s.str, s.length, &my_charset_bin);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2227: /* param_marker: PARAM_MARKER */
//  if (yyn == 2227)
//    /* "sql_yacc.y":14719  */
//          {
//            auto *i= NEW_PTN Item_param((yyloc), YYMEM_ROOT,
//                                        (uint) (yystack.locationAt (0).raw.start - YYLIP->get_buf()));
//            if (i == nullptr)
//              MYSQL_YYABORT;
//            auto *lex= Lex;
//            /*
//              If we are not re-parsing a CTE definition, this is a
//              real parameter, so add it to param_list.
//            */
//            if (!lex->reparse_common_table_expr_at &&
//                lex->param_list.push_back(i))
//              MYSQL_YYABORT;
//            yyval= i;
//          };
			break;

		case 2229: /* signed_literal: '+' NUM_literal */
//  if (yyn == 2229)
//    /* "sql_yacc.y":14738  */
//                          { yyval= ((item_num)(yystack.valueAt (0))); };
			break;

		case 2230: /* signed_literal: '-' NUM_literal */
//  if (yyn == 2230)
//    /* "sql_yacc.y":14740  */
//          {
//            if (((item_num)(yystack.valueAt (0))) == nullptr)
//              MYSQL_YYABORT; // OOM
//            ((item_num)(yystack.valueAt (0)))->max_length++;
//            yyval= ((item_num)(yystack.valueAt (0)))->neg();
//          };
			break;

		case 2233: /* null_as_literal: NULL_SYM */
//  if (yyn == 2233)
//    /* "sql_yacc.y":14755  */
//          {
//            Lex_input_stream *lip= YYLIP;
//            /*
//              For the digest computation, in this context only,
//              NULL is considered a literal, hence reduced to '?'
//              REDUCE:
//                TOK_GENERIC_VALUE := NULL_SYM
//            */
//            lip->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
//            yyval= NEW_PTN Item_null((yyloc));
//          };
			break;

		case 2234: /* literal: text_literal */
//  if (yyn == 2234)
//    /* "sql_yacc.y":14769  */
//                       { yyval= ((text_literal)(yystack.valueAt (0))); };
			break;

		case 2235: /* literal: NUM_literal */
//  if (yyn == 2235)
//    /* "sql_yacc.y":14770  */
//                       { yyval= ((item_num)(yystack.valueAt (0))); };
			break;

		case 2237: /* literal: FALSE_SYM */
//  if (yyn == 2237)
//    /* "sql_yacc.y":14773  */
//          {
//            yyval= NEW_PTN Item_func_false((yyloc));
//          };
			break;

		case 2238: /* literal: TRUE_SYM */
//  if (yyn == 2238)
//    /* "sql_yacc.y":14777  */
//          {
//            yyval= NEW_PTN Item_func_true((yyloc));
//          };
			break;

		case 2239: /* literal: HEX_NUM */
//  if (yyn == 2239)
//    /* "sql_yacc.y":14781  */
//          {
//            yyval= NEW_PTN Item_hex_string((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2240: /* literal: BIN_NUM */
//  if (yyn == 2240)
//    /* "sql_yacc.y":14785  */
//          {
//            yyval= NEW_PTN Item_bin_string((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2241: /* literal: UNDERSCORE_CHARSET HEX_NUM */
			if (yyn == 2241)
			/* "sql_yacc.y":14789 */
			{
//	            yyval= NEW_PTN PTI_literal_underscore_charset_hex_num((yyloc), ((lexer.charset)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
				yyval = yystack.valueAt(0);
			}
			;
			break;

		case 2242: /* literal: UNDERSCORE_CHARSET BIN_NUM */
//  if (yyn == 2242)
//    /* "sql_yacc.y":14793  */
//          {
//            yyval= NEW_PTN PTI_literal_underscore_charset_bin_num((yyloc), ((lexer.charset)(yystack.valueAt (1))), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2246: /* NUM_literal: DECIMAL_NUM */
//  if (yyn == 2246)
//    /* "sql_yacc.y":14806  */
//          {
//            yyval= NEW_PTN Item_decimal((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, YYCSCL);
//          };
			break;

		case 2247: /* NUM_literal: FLOAT_NUM */
//  if (yyn == 2247)
//    /* "sql_yacc.y":14810  */
//          {
//            yyval= NEW_PTN Item_float((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length);
//          };
			break;

		case 2248: /* int64_literal: NUM */
//  if (yyn == 2248)
//    /* "sql_yacc.y":14820  */
//                        { yyval = NEW_PTN Item_int((yyloc), ((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 2249: /* int64_literal: LONG_NUM */
//  if (yyn == 2249)
//    /* "sql_yacc.y":14821  */
//                        { yyval = NEW_PTN Item_int((yyloc), ((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 2250: /* int64_literal: ULONGLONG_NUM */
//  if (yyn == 2250)
//    /* "sql_yacc.y":14822  */
//                        { yyval = NEW_PTN Item_uint((yyloc), ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length); };
			break;

		case 2251: /* temporal_literal: DATE_SYM TEXT_STRING */
//  if (yyn == 2251)
//    /* "sql_yacc.y":14828  */
//          {
//            yyval= NEW_PTN PTI_temporal_literal((yyloc), ((lexer.lex_str)(yystack.valueAt (0))), MYSQL_TYPE_DATE, YYCSCL);
//          };
			break;

		case 2252: /* temporal_literal: TIME_SYM TEXT_STRING */
//  if (yyn == 2252)
//    /* "sql_yacc.y":14832  */
//          {
//            yyval= NEW_PTN PTI_temporal_literal((yyloc), ((lexer.lex_str)(yystack.valueAt (0))), MYSQL_TYPE_TIME, YYCSCL);
//          };
			break;

		case 2253: /* temporal_literal: TIMESTAMP_SYM TEXT_STRING */
//  if (yyn == 2253)
//    /* "sql_yacc.y":14836  */
//          {
//            yyval= NEW_PTN PTI_temporal_literal((yyloc), ((lexer.lex_str)(yystack.valueAt (0))), MYSQL_TYPE_DATETIME, YYCSCL);
//          };
			break;

		case 2254: /* opt_interval: %empty */
//  if (yyn == 2254)
//    /* "sql_yacc.y":14842  */
//                        { yyval = false; };
			break;

		case 2255: /* opt_interval: INTERVAL_SYM */
//  if (yyn == 2255)
//    /* "sql_yacc.y":14843  */
//                        { yyval = true; };
			break;

		case 2257: /* table_wild: ident '.' '*' */
//  if (yyn == 2257)
//    /* "sql_yacc.y":14857  */
//          {
//            yyval = NEW_PTN Item_asterisk((yyloc), nullptr, ((lexer.lex_str)(yystack.valueAt (2))).str);
//          };
			break;

		case 2258: /* table_wild: ident '.' ident '.' '*' */
//  if (yyn == 2258)
//    /* "sql_yacc.y":14861  */
//          {
//            if (check_and_convert_db_name(&((lexer.lex_str)(yystack.valueAt (4))), false) != Ident_name_check::OK)
//              MYSQL_YYABORT;
//            auto schema_name = YYCLIENT_NO_SCHEMA ? nullptr : ((lexer.lex_str)(yystack.valueAt (4))).str;
//            yyval = NEW_PTN Item_asterisk((yyloc), schema_name, ((lexer.lex_str)(yystack.valueAt (2))).str);
//          };
			break;

		case 2259: /* order_expr: expr opt_ordering_direction */
//  if (yyn == 2259)
//    /* "sql_yacc.y":14871  */
//          {
//            yyval= NEW_PTN PT_order_expr((yyloc), ((item)(yystack.valueAt (1))), ((order_direction)(yystack.valueAt (0))));
//          };
			break;

		case 2260: /* grouping_expr: expr */
//  if (yyn == 2260)
//    /* "sql_yacc.y":14878  */
//          {
//            yyval= NEW_PTN PT_order_expr((yyloc), ((item)(yystack.valueAt (0))), ORDER_NOT_RELEVANT);
//          };
			break;

		case 2261: /* simple_ident: ident */
//  if (yyn == 2261)
//    /* "sql_yacc.y":14885  */
//          {
//            yyval= NEW_PTN PTI_simple_ident_ident((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 2263: /* simple_ident_nospvar: ident */
//  if (yyn == 2263)
//    /* "sql_yacc.y":14893  */
//          {
//            yyval= NEW_PTN PTI_simple_ident_nospvar_ident((yyloc), ((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		case 2265: /* simple_ident_q: ident '.' ident */
//  if (yyn == 2265)
//    /* "sql_yacc.y":14901  */
//          {
//            yyval= NEW_PTN PTI_simple_ident_q_2d((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 2266: /* simple_ident_q: ident '.' ident '.' ident */
//  if (yyn == 2266)
//    /* "sql_yacc.y":14905  */
//          {
//            if (check_and_convert_db_name(&((lexer.lex_str)(yystack.valueAt (4))), false) != Ident_name_check::OK)
//              MYSQL_YYABORT;
//            yyval= NEW_PTN PTI_simple_ident_q_3d((yyloc), ((lexer.lex_str)(yystack.valueAt (4))).str, ((lexer.lex_str)(yystack.valueAt (2))).str, ((lexer.lex_str)(yystack.valueAt (0))).str);
//          };
			break;

		case 2267: /* table_ident: ident */
//  if (yyn == 2267)
//    /* "sql_yacc.y":14914  */
//          {
//            yyval= NEW_PTN Table_ident(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2268: /* table_ident: ident '.' ident */
//  if (yyn == 2268)
//    /* "sql_yacc.y":14920  */
//          {
//            auto schema_name = YYCLIENT_NO_SCHEMA ? LEX_CSTRING{}
//                                                  : to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2))).str);
//            yyval= NEW_PTN Table_ident(schema_name, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2269: /* table_ident_opt_wild: ident opt_wild */
//  if (yyn == 2269)
//    /* "sql_yacc.y":14931  */
//          {
//            yyval= NEW_PTN Table_ident(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1)))));
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2270: /* table_ident_opt_wild: ident '.' ident opt_wild */
//  if (yyn == 2270)
//    /* "sql_yacc.y":14937  */
//          {
//            yyval= NEW_PTN Table_ident(YYTHD->get_protocol(),
//                                    to_lex_cstring(((lexer.lex_str)(yystack.valueAt (3)))),
//                                    to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1)))), 0);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 2271: /* IDENT_sys: IDENT */
//  if (yyn == 2271)
//    /* "sql_yacc.y":14947  */
//                { yyval= ((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 2272: /* IDENT_sys: IDENT_QUOTED */
//  if (yyn == 2272)
//    /* "sql_yacc.y":14949  */
//          {
//            THD *thd= YYTHD;

//            if (thd->charset_is_system_charset)
//            {
//              const CHARSET_INFO *cs= system_charset_info;
//              int dummy_error;
//              size_t wlen= cs->cset->well_formed_len(cs, ((lexer.lex_str)(yystack.valueAt (0))).str,
//                                                     ((lexer.lex_str)(yystack.valueAt (0))).str+((lexer.lex_str)(yystack.valueAt (0))).length,
//                                                     ((lexer.lex_str)(yystack.valueAt (0))).length, &dummy_error);
//              if (wlen < ((lexer.lex_str)(yystack.valueAt (0))).length)
//              {
//                ErrConvString err(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, &my_charset_bin);
//                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
//                         cs->csname, err.ptr());
//                MYSQL_YYABORT;
//              }
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            }
//            else
//            {
//              if (thd->convert_string(&yyval, system_charset_info,
//                                  ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, thd->charset()))
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 2273: /* TEXT_STRING_sys_nonewline: TEXT_STRING_sys */
//  if (yyn == 2273)
//    /* "sql_yacc.y":14979  */
//          {
//            if (!strcont(((lexer.lex_str)(yystack.valueAt (0))).str, "\n"))
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              my_error(ER_WRONG_VALUE, MYF(0), "argument contains not-allowed LF", ((lexer.lex_str)(yystack.valueAt (0))).str);
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2274: /* filter_wild_db_table_string: TEXT_STRING_sys_nonewline */
//  if (yyn == 2274)
//    /* "sql_yacc.y":14992  */
//          {
//            if (strcont(((lexer.lex_str)(yystack.valueAt (0))).str, "."))
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              my_error(ER_INVALID_RPL_WILD_TABLE_FILTER_PATTERN, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2275: /* TEXT_STRING_sys: TEXT_STRING */
//  if (yyn == 2275)
//    /* "sql_yacc.y":15005  */
//          {
//            THD *thd= YYTHD;

//            if (thd->charset_is_system_charset)
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              if (thd->convert_string(&yyval, system_charset_info,
//                                  ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, thd->charset()))
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 2276: /* TEXT_STRING_literal: TEXT_STRING */
//  if (yyn == 2276)
//    /* "sql_yacc.y":15021  */
//          {
//            THD *thd= YYTHD;

//            if (thd->charset_is_collation_connection)
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              if (thd->convert_string(&yyval, thd->variables.collation_connection,
//                                  ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, thd->charset()))
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 2277: /* TEXT_STRING_filesystem: TEXT_STRING */
//  if (yyn == 2277)
//    /* "sql_yacc.y":15037  */
//          {
//            THD *thd= YYTHD;

//            if (thd->charset_is_character_set_filesystem)
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              if (thd->convert_string(&yyval,
//                                      thd->variables.character_set_filesystem,
//                                      ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, thd->charset()))
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 2280: /* TEXT_STRING_hash: HEX_NUM */
//  if (yyn == 2280)
//    /* "sql_yacc.y":15059  */
//          {
//            yyval= to_lex_string(Item_hex_string::make_hex_str(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length));
//          };
			break;

		case 2281: /* TEXT_STRING_validated: TEXT_STRING */
//  if (yyn == 2281)
//    /* "sql_yacc.y":15066  */
//          {
//            THD *thd= YYTHD;

//            if (thd->charset_is_system_charset)
//              yyval= ((lexer.lex_str)(yystack.valueAt (0)));
//            else
//            {
//              if (thd->convert_string(&yyval, system_charset_info,
//                                  ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, thd->charset(), true))
//                MYSQL_YYABORT;
//            }
//          };
			break;

		case 2282: /* ident: IDENT_sys */
//  if (yyn == 2282)
//    /* "sql_yacc.y":15081  */
//                       { yyval=((lexer.lex_str)(yystack.valueAt (0))); };
			break;

		case 2283: /* ident: ident_keyword */
//  if (yyn == 2283)
//    /* "sql_yacc.y":15083  */
//          {
//            THD *thd= YYTHD;
//            yyval.str= thd->strmake(((lexer.keyword)(yystack.valueAt (0))).str, ((lexer.keyword)(yystack.valueAt (0))).length);
//            if (yyval.str == nullptr)
//              MYSQL_YYABORT;
//            yyval.length= ((lexer.keyword)(yystack.valueAt (0))).length;
//          };
			break;

		case 2285: /* role_ident: role_keyword */
//  if (yyn == 2285)
//    /* "sql_yacc.y":15095  */
//          {
//            yyval.str= YYTHD->strmake(((lexer.keyword)(yystack.valueAt (0))).str, ((lexer.keyword)(yystack.valueAt (0))).length);
//            if (yyval.str == nullptr)
//              MYSQL_YYABORT;
//            yyval.length= ((lexer.keyword)(yystack.valueAt (0))).length;
//          };
			break;

		case 2286: /* label_ident: IDENT_sys */
//  if (yyn == 2286)
//    /* "sql_yacc.y":15104  */
//                       { yyval=to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 2287: /* label_ident: label_keyword */
//  if (yyn == 2287)
//    /* "sql_yacc.y":15106  */
//          {
//            THD *thd= YYTHD;
//            yyval.str= thd->strmake(((lexer.keyword)(yystack.valueAt (0))).str, ((lexer.keyword)(yystack.valueAt (0))).length);
//            if (yyval.str == nullptr)
//              MYSQL_YYABORT;
//            yyval.length= ((lexer.keyword)(yystack.valueAt (0))).length;
//          };
			break;

		case 2289: /* lvalue_ident: lvalue_keyword */
//  if (yyn == 2289)
//    /* "sql_yacc.y":15118  */
//          {
//            yyval.str= YYTHD->strmake(((lexer.keyword)(yystack.valueAt (0))).str, ((lexer.keyword)(yystack.valueAt (0))).length);
//            if (yyval.str == nullptr)
//              MYSQL_YYABORT;
//            yyval.length= ((lexer.keyword)(yystack.valueAt (0))).length;
//          };
			break;

		case 2290: /* ident_or_text: ident */
//  if (yyn == 2290)
//    /* "sql_yacc.y":15127  */
//                          { yyval=((lexer.lex_str)(yystack.valueAt (0)));};
			break;

		case 2291: /* ident_or_text: TEXT_STRING_sys */
//  if (yyn == 2291)
//    /* "sql_yacc.y":15128  */
//                          { yyval=((lexer.lex_str)(yystack.valueAt (0)));};
			break;

		case 2292: /* ident_or_text: LEX_HOSTNAME */
//  if (yyn == 2292)
//    /* "sql_yacc.y":15129  */
//                       { yyval=((lexer.lex_str)(yystack.valueAt (0)));};
			break;

		case 2296: /* user_ident_or_text: ident_or_text */
//  if (yyn == 2296)
//    /* "sql_yacc.y":15140  */
//          {
//            if (!(yyval= LEX_USER::alloc(YYTHD, &((lexer.lex_str)(yystack.valueAt (0))), nullptr)))
//              MYSQL_YYABORT;
//          };
			break;

		case 2297: /* user_ident_or_text: ident_or_text '@' ident_or_text */
//  if (yyn == 2297)
//    /* "sql_yacc.y":15145  */
//          {
//            if (!(yyval= LEX_USER::alloc(YYTHD, &((lexer.lex_str)(yystack.valueAt (2))), &((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2298: /* user: user_ident_or_text */
//  if (yyn == 2298)
//    /* "sql_yacc.y":15153  */
//          {
//            yyval=((lex_user)(yystack.valueAt (0)));
//          };
			break;

		case 2299: /* user: CURRENT_USER optional_braces */
//  if (yyn == 2299)
//    /* "sql_yacc.y":15157  */
//          {
//            if (!(yyval= LEX_USER::alloc(YYTHD)))
//              MYSQL_YYABORT;
//            /*
//              empty LEX_USER means current_user and
//              will be handled in the  get_current_user() function
//              later
//            */
//          };
			break;

		case 2300: /* role: role_ident_or_text */
//  if (yyn == 2300)
//    /* "sql_yacc.y":15170  */
//          {
//            if (!(yyval= LEX_USER::alloc(YYTHD, &((lexer.lex_str)(yystack.valueAt (0))), nullptr)))
//              MYSQL_YYABORT;
//          };
			break;

		case 2301: /* role: role_ident_or_text '@' ident_or_text */
//  if (yyn == 2301)
//    /* "sql_yacc.y":15175  */
//          {
//            if (!(yyval= LEX_USER::alloc(YYTHD, &((lexer.lex_str)(yystack.valueAt (2))), &((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2302: /* schema: ident */
//  if (yyn == 2302)
//    /* "sql_yacc.y":15183  */
//          {
//            yyval = ((lexer.lex_str)(yystack.valueAt (0)));
//            if (check_and_convert_db_name(&yyval, false) != Ident_name_check::OK)
//              MYSQL_YYABORT;
//          };
			break;

		case 2470: /* ident_keywords_unambiguous: FULL */
//  if (yyn == 2470)
//    /* "sql_yacc.y":15413  */
//          {
//            THD *thd= YYTHD;
//            push_warning_printf(thd, Sql_condition::SL_WARNING,
//                                ER_WARN_DEPRECATED_IDENT,
//                                ER_THD(thd, ER_WARN_DEPRECATED_IDENT), "FULL");
//          };
			break;

		case 2778: /* set: SET_SYM start_option_value_list */
//  if (yyn == 2778)
//    /* "sql_yacc.y":15767  */
//          {
//            yyval= NEW_PTN PT_set((yyloc), yystack.locationAt (1), ((start_option_value_list)(yystack.valueAt (0))));
//          };
			break;

		case 2779: /* start_option_value_list: option_value_no_option_type option_value_list_continued */
//  if (yyn == 2779)
//    /* "sql_yacc.y":15776  */
//          {
//            yyval= NEW_PTN PT_start_option_value_list_no_type((yyloc), ((option_value_no_option_type)(yystack.valueAt (1))), yystack.locationAt (1), ((option_value_list)(yystack.valueAt (0))));
//          };
			break;

		case 2780: /* start_option_value_list: TRANSACTION_SYM transaction_characteristics */
//  if (yyn == 2780)
//    /* "sql_yacc.y":15780  */
//          {
//            yyval= NEW_PTN PT_start_option_value_list_transaction((yyloc), ((transaction_characteristics)(yystack.valueAt (0))), yystack.locationAt (0));
//          };
			break;

		case 2781: /* start_option_value_list: option_type start_option_value_list_following_option_type */
//  if (yyn == 2781)
//    /* "sql_yacc.y":15784  */
//          {
//            yyval= NEW_PTN PT_start_option_value_list_type((yyloc), ((var_type)(yystack.valueAt (1))), ((start_option_value_list_following_option_type)(yystack.valueAt (0))));
//          };
			break;

		case 2782: /* start_option_value_list: PASSWORD equal TEXT_STRING_password opt_replace_password opt_retain_current_password */
//  if (yyn == 2782)
//    /* "sql_yacc.y":15788  */
//          {
//            yyval= NEW_PTN PT_option_value_no_option_type_password((yyloc), ((lexer.lex_str)(yystack.valueAt (2))).str, ((lex_cstr)(yystack.valueAt (1))).str,
//                                                                ((is_not_empty)(yystack.valueAt (0))),
//                                                                false,
//                                                                yystack.locationAt (1));
//          };
			break;

		case 2783: /* start_option_value_list: PASSWORD TO_SYM RANDOM_SYM opt_replace_password opt_retain_current_password */
//  if (yyn == 2783)
//    /* "sql_yacc.y":15795  */
//          {
//            // RANDOM PASSWORD GENERATION AND RETURN RESULT SET...
//            yyval= NEW_PTN PT_option_value_no_option_type_password((yyloc), ((lexer.keyword)(yystack.valueAt (2))).str, ((lex_cstr)(yystack.valueAt (1))).str,
//                                                                ((is_not_empty)(yystack.valueAt (0))),
//                                                                true,
//                                                                yystack.locationAt (1));
//          };
			break;

		case 2784: /* start_option_value_list: PASSWORD FOR_SYM user equal TEXT_STRING_password opt_replace_password opt_retain_current_password */
//  if (yyn == 2784)
//    /* "sql_yacc.y":15803  */
//          {
//            yyval= NEW_PTN PT_option_value_no_option_type_password_for((yyloc), ((lex_user)(yystack.valueAt (4))), ((lexer.lex_str)(yystack.valueAt (2))).str,
//                                                                    ((lex_cstr)(yystack.valueAt (1))).str,
//                                                                    ((is_not_empty)(yystack.valueAt (0))),
//                                                                    false,
//                                                                    yystack.locationAt (1));
//          };
			break;

		case 2785: /* start_option_value_list: PASSWORD FOR_SYM user TO_SYM RANDOM_SYM opt_replace_password opt_retain_current_password */
//  if (yyn == 2785)
//    /* "sql_yacc.y":15811  */
//          {
//            // RANDOM PASSWORD GENERATION AND RETURN RESULT SET...
//            yyval= NEW_PTN PT_option_value_no_option_type_password_for((yyloc), ((lex_user)(yystack.valueAt (4))), ((lexer.keyword)(yystack.valueAt (2))).str,
//                                                                    ((lex_cstr)(yystack.valueAt (1))).str,
//                                                                    ((is_not_empty)(yystack.valueAt (0))),
//                                                                    true,
//                                                                    yystack.locationAt (1));
//          };
			break;

		case 2786: /* set_role_stmt: SET_SYM ROLE_SYM role_list */
//  if (yyn == 2786)
//    /* "sql_yacc.y":15823  */
//          {
//            yyval= NEW_PTN PT_set_role((yyloc), ((user_list)(yystack.valueAt (0))));
//          };
			break;

		case 2787: /* set_role_stmt: SET_SYM ROLE_SYM NONE_SYM */
			if (yyn == 2787)
			/* "sql_yacc.y":15827 */
			{
//            yyval= NEW_PTN PT_set_role((yyloc), role_enum::ROLE_NONE);
//            Lex->sql_command= SQLCOM_SET_ROLE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SET_ROLE;
			}
			;
			break;

		case 2788: /* set_role_stmt: SET_SYM ROLE_SYM DEFAULT_SYM */
			if (yyn == 2788)
			/* "sql_yacc.y":15832 */
			{
//            yyval= NEW_PTN PT_set_role((yyloc), role_enum::ROLE_DEFAULT);
//            Lex->sql_command= SQLCOM_SET_ROLE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SET_ROLE;
			}
			;
			break;

		case 2789: /* set_role_stmt: SET_SYM DEFAULT_SYM ROLE_SYM role_list TO_SYM role_list */
//  if (yyn == 2789)
//    /* "sql_yacc.y":15837  */
//          {
//            yyval= NEW_PTN PT_alter_user_default_role((yyloc), false, ((user_list)(yystack.valueAt (0))), ((user_list)(yystack.valueAt (2))),
//                                                    role_enum::ROLE_NAME);
//          };
			break;

		case 2790: /* set_role_stmt: SET_SYM DEFAULT_SYM ROLE_SYM NONE_SYM TO_SYM role_list */
//  if (yyn == 2790)
//    /* "sql_yacc.y":15842  */
//          {
//            yyval= NEW_PTN PT_alter_user_default_role((yyloc), false, ((user_list)(yystack.valueAt (0))), nullptr,
//                                                   role_enum::ROLE_NONE);
//          };
			break;

		case 2791: /* set_role_stmt: SET_SYM DEFAULT_SYM ROLE_SYM ALL TO_SYM role_list */
//  if (yyn == 2791)
//    /* "sql_yacc.y":15847  */
//          {
//            yyval= NEW_PTN PT_alter_user_default_role((yyloc), false, ((user_list)(yystack.valueAt (0))), nullptr,
//                                                   role_enum::ROLE_ALL);
//          };
			break;

		case 2792: /* set_role_stmt: SET_SYM ROLE_SYM ALL opt_except_role_list */
			if (yyn == 2792)
			/* "sql_yacc.y":15852 */
			{
//            yyval= NEW_PTN PT_set_role((yyloc), role_enum::ROLE_ALL, ((user_list)(yystack.valueAt (0))));
//            Lex->sql_command= SQLCOM_SET_ROLE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SET_ROLE;
			}
			;
			break;

		case 2793: /* opt_except_role_list: %empty */
//  if (yyn == 2793)
//    /* "sql_yacc.y":15859  */
//                               { yyval= nullptr; };
			break;

		case 2794: /* opt_except_role_list: EXCEPT_SYM role_list */
//  if (yyn == 2794)
//    /* "sql_yacc.y":15860  */
//                               { yyval= ((user_list)(yystack.valueAt (0))); };
			break;

		case 2795: /* set_resource_group_stmt: SET_SYM RESOURCE_SYM GROUP_SYM ident */
//  if (yyn == 2795)
//    /* "sql_yacc.y":15865  */
//          {
//            yyval= NEW_PTN PT_set_resource_group((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))), nullptr);
//          };
			break;

		case 2796: /* set_resource_group_stmt: SET_SYM RESOURCE_SYM GROUP_SYM ident FOR_SYM thread_id_list_options */
//  if (yyn == 2796)
//    /* "sql_yacc.y":15869  */
//          {
//            yyval= NEW_PTN PT_set_resource_group((yyloc), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), ((thread_id_list_type)(yystack.valueAt (0))));
//          };
			break;

		case 2797: /* thread_id_list: real_ulong_num */
//  if (yyn == 2797)
//    /* "sql_yacc.y":15876  */
//          {
//            yyval= NEW_PTN Mem_root_array<ulonglong>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((ulong_num)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2798: /* thread_id_list: thread_id_list opt_comma real_ulong_num */
//  if (yyn == 2798)
//    /* "sql_yacc.y":15882  */
//          {
//            yyval= ((thread_id_list_type)(yystack.valueAt (2)));
//            if (yyval->push_back(((ulong_num)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2799: /* thread_id_list_options: thread_id_list */
//  if (yyn == 2799)
//    /* "sql_yacc.y":15890  */
//                        { yyval= ((thread_id_list_type)(yystack.valueAt (0))); };
			break;

		case 2800: /* start_option_value_list_following_option_type: option_value_following_option_type option_value_list_continued */
//  if (yyn == 2800)
//    /* "sql_yacc.y":15896  */
//          {
//            yyval=
//              NEW_PTN PT_start_option_value_list_following_option_type_eq((yyloc), ((option_value_following_option_type)(yystack.valueAt (1))),
//                                                                          yystack.locationAt (1),
//                                                                          ((option_value_list)(yystack.valueAt (0))));
//          };
			break;

		case 2801: /* start_option_value_list_following_option_type: TRANSACTION_SYM transaction_characteristics */
//  if (yyn == 2801)
//    /* "sql_yacc.y":15903  */
//          {
//            yyval= NEW_PTN
//              PT_start_option_value_list_following_option_type_transaction((yyloc), ((transaction_characteristics)(yystack.valueAt (0))),
//                                                                           yystack.locationAt (0));
//          };
			break;

		case 2802: /* option_value_list_continued: %empty */
//  if (yyn == 2802)
//    /* "sql_yacc.y":15912  */
//                                { yyval= nullptr; };
			break;

		case 2803: /* option_value_list_continued: ',' option_value_list */
//  if (yyn == 2803)
//    /* "sql_yacc.y":15913  */
//                                { yyval= ((option_value_list)(yystack.valueAt (0))); };
			break;

		case 2804: /* option_value_list: option_value */
//  if (yyn == 2804)
//    /* "sql_yacc.y":15919  */
//          {
//            yyval= NEW_PTN PT_option_value_list_head((yyloc), yystack.locationAt (1), ((node)(yystack.valueAt (0))), yystack.locationAt (0));
//          };
			break;

		case 2805: /* option_value_list: option_value_list ',' option_value */
//  if (yyn == 2805)
//    /* "sql_yacc.y":15923  */
//          {
//            yyval= NEW_PTN PT_option_value_list((yyloc), ((option_value_list)(yystack.valueAt (2))), yystack.locationAt (1), ((node)(yystack.valueAt (0))), yystack.locationAt (0));
//          };
			break;

		case 2806: /* option_value: option_type option_value_following_option_type */
//  if (yyn == 2806)
//    /* "sql_yacc.y":15931  */
//          {
//            yyval= NEW_PTN PT_option_value_type((yyloc), ((var_type)(yystack.valueAt (1))), ((option_value_following_option_type)(yystack.valueAt (0))));
//          };
			break;

		case 2807: /* option_value: option_value_no_option_type */
//  if (yyn == 2807)
//    /* "sql_yacc.y":15934  */
//                                      { yyval= ((option_value_no_option_type)(yystack.valueAt (0))); };
			break;

		case 2808: /* option_type: GLOBAL_SYM */
//  if (yyn == 2808)
//    /* "sql_yacc.y":15938  */
//                      { yyval=OPT_GLOBAL; };
			break;

		case 2809: /* option_type: PERSIST_SYM */
//  if (yyn == 2809)
//    /* "sql_yacc.y":15939  */
//                      { yyval=OPT_PERSIST; };
			break;

		case 2810: /* option_type: PERSIST_ONLY_SYM */
//  if (yyn == 2810)
//    /* "sql_yacc.y":15940  */
//                           { yyval=OPT_PERSIST_ONLY; };
			break;

		case 2811: /* option_type: LOCAL_SYM */
//  if (yyn == 2811)
//    /* "sql_yacc.y":15941  */
//                      { yyval=OPT_SESSION; };
			break;

		case 2812: /* option_type: SESSION_SYM */
//  if (yyn == 2812)
//    /* "sql_yacc.y":15942  */
//                      { yyval=OPT_SESSION; };
			break;

		case 2813: /* opt_var_type: %empty */
//  if (yyn == 2813)
//    /* "sql_yacc.y":15946  */
//                      { yyval=OPT_SESSION; };
			break;

		case 2814: /* opt_var_type: GLOBAL_SYM */
//  if (yyn == 2814)
//    /* "sql_yacc.y":15947  */
//                      { yyval=OPT_GLOBAL; };
			break;

		case 2815: /* opt_var_type: LOCAL_SYM */
//  if (yyn == 2815)
//    /* "sql_yacc.y":15948  */
//                      { yyval=OPT_SESSION; };
			break;

		case 2816: /* opt_var_type: SESSION_SYM */
//  if (yyn == 2816)
//    /* "sql_yacc.y":15949  */
//                      { yyval=OPT_SESSION; };
			break;

		case 2817: /* opt_rvalue_system_variable_type: %empty */
//  if (yyn == 2817)
//    /* "sql_yacc.y":15953  */
//                          { yyval=OPT_DEFAULT; };
			break;

		case 2818: /* opt_rvalue_system_variable_type: GLOBAL_SYM '.' */
//  if (yyn == 2818)
//    /* "sql_yacc.y":15954  */
//                          { yyval=OPT_GLOBAL; };
			break;

		case 2819: /* opt_rvalue_system_variable_type: LOCAL_SYM '.' */
//  if (yyn == 2819)
//    /* "sql_yacc.y":15955  */
//                          { yyval=OPT_SESSION; };
			break;

		case 2820: /* opt_rvalue_system_variable_type: SESSION_SYM '.' */
//  if (yyn == 2820)
//    /* "sql_yacc.y":15956  */
//                          { yyval=OPT_SESSION; };
			break;

		case 2821: /* opt_set_var_ident_type: %empty */
//  if (yyn == 2821)
//    /* "sql_yacc.y":15960  */
//                          { yyval=OPT_DEFAULT; };
			break;

		case 2822: /* opt_set_var_ident_type: PERSIST_SYM '.' */
//  if (yyn == 2822)
//    /* "sql_yacc.y":15961  */
//                          { yyval=OPT_PERSIST; };
			break;

		case 2823: /* opt_set_var_ident_type: PERSIST_ONLY_SYM '.' */
//  if (yyn == 2823)
//    /* "sql_yacc.y":15962  */
//                               {yyval=OPT_PERSIST_ONLY; };
			break;

		case 2824: /* opt_set_var_ident_type: GLOBAL_SYM '.' */
//  if (yyn == 2824)
//    /* "sql_yacc.y":15963  */
//                          { yyval=OPT_GLOBAL; };
			break;

		case 2825: /* opt_set_var_ident_type: LOCAL_SYM '.' */
//  if (yyn == 2825)
//    /* "sql_yacc.y":15964  */
//                          { yyval=OPT_SESSION; };
			break;

		case 2826: /* opt_set_var_ident_type: SESSION_SYM '.' */
//  if (yyn == 2826)
//    /* "sql_yacc.y":15965  */
//                          { yyval=OPT_SESSION; };
			break;

		case 2827: /* option_value_following_option_type: lvalue_variable equal set_expr_or_default */
//  if (yyn == 2827)
//    /* "sql_yacc.y":15971  */
//          {
//            yyval = NEW_PTN PT_set_scoped_system_variable(
//                (yyloc), yystack.locationAt (2), ((bipartite_name)(yystack.valueAt (2))).prefix, ((bipartite_name)(yystack.valueAt (2))).name, ((item)(yystack.valueAt (0))));
//          };
			break;

		case 2828: /* option_value_no_option_type: lvalue_variable equal set_expr_or_default */
//  if (yyn == 2828)
//    /* "sql_yacc.y":15980  */
//          {
//            yyval = NEW_PTN PT_set_variable((yyloc), yystack.locationAt (2), ((bipartite_name)(yystack.valueAt (2))).prefix, ((bipartite_name)(yystack.valueAt (2))).name, yystack.locationAt (0), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 2829: /* option_value_no_option_type: '@' ident_or_text equal expr */
//  if (yyn == 2829)
//    /* "sql_yacc.y":15984  */
//          {
//            yyval= NEW_PTN PT_option_value_no_option_type_user_var((yyloc), ((lexer.lex_str)(yystack.valueAt (2))), ((item)(yystack.valueAt (0))));
//          };
			break;

		case 2830: /* option_value_no_option_type: '@' '@' opt_set_var_ident_type lvalue_variable equal set_expr_or_default */
//  if (yyn == 2830)
//    /* "sql_yacc.y":15989  */
//          {
//            yyval = NEW_PTN PT_set_system_variable(
//                (yyloc), ((var_type)(yystack.valueAt (3))), yystack.locationAt (2), ((bipartite_name)(yystack.valueAt (2))).prefix, ((bipartite_name)(yystack.valueAt (2))).name, ((item)(yystack.valueAt (0))));
//          };
			break;

		case 2831: /* option_value_no_option_type: character_set old_or_new_charset_name_or_default */
//  if (yyn == 2831)
//    /* "sql_yacc.y":15994  */
//          {
//            yyval= NEW_PTN PT_option_value_no_option_type_charset((yyloc), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 2832: /* option_value_no_option_type: NAMES_SYM equal expr */
//  if (yyn == 2832)
//    /* "sql_yacc.y":15998  */
//          {
//            /*
//              Bad syntax, always fails with an error
//            */
//            yyval= NEW_PTN PT_option_value_no_option_type_names((yyloc), yystack.locationAt (1));
//          };
			break;

		case 2833: /* option_value_no_option_type: NAMES_SYM charset_name opt_collate */
//  if (yyn == 2833)
//    /* "sql_yacc.y":16005  */
//          {
//            yyval= NEW_PTN PT_set_names((yyloc), ((lexer.charset)(yystack.valueAt (1))), ((lexer.charset)(yystack.valueAt (0))));
//          };
			break;

		case 2834: /* option_value_no_option_type: NAMES_SYM DEFAULT_SYM */
//  if (yyn == 2834)
//    /* "sql_yacc.y":16009  */
//          {
//            yyval = NEW_PTN PT_set_names((yyloc), nullptr, nullptr);
//          };
			break;

		case 2835: /* lvalue_variable: lvalue_ident */
//  if (yyn == 2835)
//    /* "sql_yacc.y":16016  */
//          {
//            yyval = Bipartite_name{{}, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))};
//          };
			break;

		case 2836: /* lvalue_variable: lvalue_ident '.' ident */
//  if (yyn == 2836)
//    /* "sql_yacc.y":16020  */
//          {
//            /*
//              Reject names prefixed by `GLOBAL.`, `LOCAL.`, or `SESSION.` --
//              if one of those prefixes is there then we are parsing something
//              like `GLOBAL.GLOBAL.foo` or `LOCAL.SESSION.bar` etc.
//            */
//            if (check_reserved_words(((lexer.lex_str)(yystack.valueAt (2))).str)) {
//              YYTHD->syntax_error_at(yystack.locationAt (2));
//              MYSQL_YYABORT;
//            }
//            yyval = Bipartite_name{to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))};
//          };
			break;

		case 2837: /* lvalue_variable: DEFAULT_SYM '.' ident */
//  if (yyn == 2837)
//    /* "sql_yacc.y":16033  */
//          {
//            yyval = Bipartite_name{{STRING_WITH_LEN("default")}, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))};
//          };
			break;

		case 2838: /* rvalue_system_variable: ident_or_text */
//  if (yyn == 2838)
//    /* "sql_yacc.y":16040  */
//          {
//            yyval = Bipartite_name{{}, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))};
//          };
			break;

		case 2839: /* rvalue_system_variable: ident_or_text '.' ident */
//  if (yyn == 2839)
//    /* "sql_yacc.y":16044  */
//          {
//            // disallow "SELECT @@global.global.variable"
//            if (check_reserved_words(((lexer.lex_str)(yystack.valueAt (2))).str)) {
//              YYTHD->syntax_error_at(yystack.locationAt (2));
//              MYSQL_YYABORT;
//            }
//            yyval = Bipartite_name{to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))};
//          };
			break;

		case 2840: /* transaction_characteristics: transaction_access_mode opt_isolation_level */
//  if (yyn == 2840)
//    /* "sql_yacc.y":16056  */
//          {
//            yyval= NEW_PTN PT_transaction_characteristics((yyloc), ((transaction_access_mode)(yystack.valueAt (1))), ((isolation_level)(yystack.valueAt (0))));
//          };
			break;

		case 2841: /* transaction_characteristics: isolation_level opt_transaction_access_mode */
//  if (yyn == 2841)
//    /* "sql_yacc.y":16060  */
//          {
//            yyval= NEW_PTN PT_transaction_characteristics((yyloc), ((isolation_level)(yystack.valueAt (1))), ((transaction_access_mode)(yystack.valueAt (0))));
//          };
			break;

		case 2842: /* transaction_access_mode: transaction_access_mode_types */
//  if (yyn == 2842)
//    /* "sql_yacc.y":16067  */
//          {
//            yyval= NEW_PTN PT_transaction_access_mode((yyloc), ((num)(yystack.valueAt (0))));
//          };
			break;

		case 2843: /* opt_transaction_access_mode: %empty */
//  if (yyn == 2843)
//    /* "sql_yacc.y":16073  */
//                 { yyval= nullptr; };
			break;

		case 2844: /* opt_transaction_access_mode: ',' transaction_access_mode */
//  if (yyn == 2844)
//    /* "sql_yacc.y":16074  */
//                                      { yyval= ((transaction_access_mode)(yystack.valueAt (0))); };
			break;

		case 2845: /* isolation_level: ISOLATION LEVEL_SYM isolation_types */
//  if (yyn == 2845)
//    /* "sql_yacc.y":16079  */
//          {
//            yyval= NEW_PTN PT_isolation_level((yyloc), ((tx_isolation)(yystack.valueAt (0))));
//          };
			break;

		case 2846: /* opt_isolation_level: %empty */
//  if (yyn == 2846)
//    /* "sql_yacc.y":16085  */
//                 { yyval= nullptr; };
			break;

		case 2847: /* opt_isolation_level: ',' isolation_level */
//  if (yyn == 2847)
//    /* "sql_yacc.y":16086  */
//                              { yyval= ((isolation_level)(yystack.valueAt (0))); };
			break;

		case 2848: /* transaction_access_mode_types: READ_SYM ONLY_SYM */
//  if (yyn == 2848)
//    /* "sql_yacc.y":16090  */
//                            { yyval= true; };
			break;

		case 2849: /* transaction_access_mode_types: READ_SYM WRITE_SYM */
//  if (yyn == 2849)
//    /* "sql_yacc.y":16091  */
//                             { yyval= false; };
			break;

		case 2850: /* isolation_types: READ_SYM UNCOMMITTED_SYM */
//  if (yyn == 2850)
//    /* "sql_yacc.y":16095  */
//                                   { yyval= ISO_READ_UNCOMMITTED; };
			break;

		case 2851: /* isolation_types: READ_SYM COMMITTED_SYM */
//  if (yyn == 2851)
//    /* "sql_yacc.y":16096  */
//                                   { yyval= ISO_READ_COMMITTED; };
			break;

		case 2852: /* isolation_types: REPEATABLE_SYM READ_SYM */
//  if (yyn == 2852)
//    /* "sql_yacc.y":16097  */
//                                   { yyval= ISO_REPEATABLE_READ; };
			break;

		case 2853: /* isolation_types: SERIALIZABLE_SYM */
//  if (yyn == 2853)
//    /* "sql_yacc.y":16098  */
//                                   { yyval= ISO_SERIALIZABLE; };
			break;

		case 2855: /* set_expr_or_default: DEFAULT_SYM */
//  if (yyn == 2855)
//    /* "sql_yacc.y":16103  */
//                      { yyval= nullptr; };
			break;

		case 2856: /* set_expr_or_default: ON_SYM */
//  if (yyn == 2856)
//    /* "sql_yacc.y":16105  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "ON", 2, system_charset_info);
//          };
			break;

		case 2857: /* set_expr_or_default: ALL */
//  if (yyn == 2857)
//    /* "sql_yacc.y":16109  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "ALL", 3, system_charset_info);
//          };
			break;

		case 2858: /* set_expr_or_default: BINARY_SYM */
//  if (yyn == 2858)
//    /* "sql_yacc.y":16113  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "binary", 6, system_charset_info);
//          };
			break;

		case 2859: /* set_expr_or_default: ROW_SYM */
//  if (yyn == 2859)
//    /* "sql_yacc.y":16117  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "ROW", 3, system_charset_info);
//          };
			break;

		case 2860: /* set_expr_or_default: SYSTEM_SYM */
//  if (yyn == 2860)
//    /* "sql_yacc.y":16121  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "SYSTEM", 6, system_charset_info);
//          };
			break;

		case 2861: /* $@53: %empty */
			if (yyn == 2861)
			/* "sql_yacc.y":16130 */
			{
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
//              MYSQL_YYABORT;
//            }
//            lex->sql_command= SQLCOM_LOCK_TABLES;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_LOCK_TABLES;
			}
			;
			break;

		case 2862: /* lock: LOCK_SYM table_or_tables $@53 table_lock_list */
//  if (yyn == 2862)
//    /* "sql_yacc.y":16141  */
//          {};
			break;

		case 2863: /* lock: LOCK_SYM INSTANCE_SYM FOR_SYM BACKUP_SYM */
			if (yyn == 2863)
			/* "sql_yacc.y":16143 */
			{
//            Lex->sql_command= SQLCOM_LOCK_INSTANCE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_LOCK_INSTANCE;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_lock_instance();
//            if (Lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT; // OOM
			}
			;
			break;

		case 2868: /* table_lock: table_ident opt_table_alias lock_option */
//  if (yyn == 2868)
//    /* "sql_yacc.y":16163  */
//          {
//            thr_lock_type lock_type= (thr_lock_type) ((num)(yystack.valueAt (0)));
//            enum_mdl_type mdl_lock_type;

//            if (lock_type >= TL_WRITE_ALLOW_WRITE)
//            {
//              /* LOCK TABLE ... WRITE */
//              mdl_lock_type= MDL_SHARED_NO_READ_WRITE;
//            }
//            else if (lock_type == TL_READ)
//            {
//              /* LOCK TABLE ... READ LOCAL */
//              mdl_lock_type= MDL_SHARED_READ;
//            }
//            else
//            {
//              /* LOCK TABLE ... READ */
//              mdl_lock_type= MDL_SHARED_READ_ONLY;
//            }

//            if (!Select->add_table_to_list(YYTHD, ((table)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (1))).str, 0, lock_type,
//                                           mdl_lock_type))
//              MYSQL_YYABORT;
//          };
			break;

		case 2869: /* lock_option: READ_SYM */
//  if (yyn == 2869)
//    /* "sql_yacc.y":16190  */
//                                 { yyval= TL_READ_NO_INSERT; };
			break;

		case 2870: /* lock_option: WRITE_SYM */
//  if (yyn == 2870)
//    /* "sql_yacc.y":16191  */
//                                 { yyval= TL_WRITE_DEFAULT; };
			break;

		case 2871: /* lock_option: READ_SYM LOCAL_SYM */
//  if (yyn == 2871)
//    /* "sql_yacc.y":16192  */
//                                 { yyval= TL_READ; };
			break;

		case 2872: /* $@54: %empty */
			if (yyn == 2872)
			/* "sql_yacc.y":16197 */
			{
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
//              MYSQL_YYABORT;
//            }
//            lex->sql_command= SQLCOM_UNLOCK_TABLES;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_UNLOCK_TABLES;
			}
			;
			break;

		case 2873: /* unlock: UNLOCK_SYM $@54 table_or_tables */
//  if (yyn == 2873)
//    /* "sql_yacc.y":16208  */
//          {};
			break;

		case 2874: /* unlock: UNLOCK_SYM INSTANCE_SYM */
			if (yyn == 2874)
			/* "sql_yacc.y":16210 */
			{
//            Lex->sql_command= SQLCOM_UNLOCK_INSTANCE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_UNLOCK_INSTANCE;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_unlock_instance();
//            if (Lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT; // OOM
			}
			;
			break;

		case 2875: /* shutdown_stmt: SHUTDOWN */
			if (yyn == 2875)
			/* "sql_yacc.y":16221 */
			{
//            Lex->sql_command= SQLCOM_SHUTDOWN;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SHUTDOWN;
//            yyval= NEW_PTN PT_shutdown();
			}
			;
			break;

		case 2876: /* restart_server_stmt: RESTART_SYM */
//  if (yyn == 2876)
//    /* "sql_yacc.y":16229  */
//          {
//            yyval= NEW_PTN PT_restart_server();
//          };
			break;

		case 2877: /* alter_instance_stmt: ALTER INSTANCE_SYM alter_instance_action */
			if (yyn == 2877)
			/* "sql_yacc.y":16236 */
			{
//            Lex->sql_command= SQLCOM_ALTER_INSTANCE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ALTER_INSTANCE;
//            yyval= ((alter_instance_cmd)(yystack.valueAt (0)));
			}
			;
			break;

		case 2878: /* alter_instance_action: ROTATE_SYM ident_or_text MASTER_SYM KEY_SYM */
//  if (yyn == 2878)
//    /* "sql_yacc.y":16243  */
//          {
//            if (is_identifier(((lexer.lex_str)(yystack.valueAt (2))), "INNODB"))
//            {
//              yyval= NEW_PTN PT_alter_instance((yyloc), ROTATE_INNODB_MASTER_KEY, EMPTY_CSTR);
//            }
//            else if (is_identifier(((lexer.lex_str)(yystack.valueAt (2))), "BINLOG"))
//            {
//              yyval= NEW_PTN PT_alter_instance((yyloc), ROTATE_BINLOG_MASTER_KEY, EMPTY_CSTR);
//            }
//            else
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (2));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2879: /* alter_instance_action: RELOAD TLS_SYM */
//  if (yyn == 2879)
//    /* "sql_yacc.y":16259  */
//          {
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_RELOAD_TLS_ROLLBACK_ON_ERROR, to_lex_cstring("mysql_main"));
//          };
			break;

		case 2880: /* alter_instance_action: RELOAD TLS_SYM NO_SYM ROLLBACK_SYM ON_SYM ERROR_SYM */
//  if (yyn == 2880)
//    /* "sql_yacc.y":16263  */
//          {
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_RELOAD_TLS, to_lex_cstring("mysql_main"));
//          };
			break;

		case 2881: /* alter_instance_action: RELOAD TLS_SYM FOR_SYM CHANNEL_SYM ident */
//  if (yyn == 2881)
//    /* "sql_yacc.y":16266  */
//                                                   {
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_RELOAD_TLS_ROLLBACK_ON_ERROR, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//          };
			break;

		case 2882: /* alter_instance_action: RELOAD TLS_SYM FOR_SYM CHANNEL_SYM ident NO_SYM ROLLBACK_SYM ON_SYM ERROR_SYM */
//  if (yyn == 2882)
//    /* "sql_yacc.y":16269  */
//                                                                                        {
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_RELOAD_TLS, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (4)))));
//          };
			break;

		case 2883: /* alter_instance_action: ENABLE_SYM ident ident */
//  if (yyn == 2883)
//    /* "sql_yacc.y":16273  */
//          {
//            if (!is_identifier(((lexer.lex_str)(yystack.valueAt (1))), "INNODB"))
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (1));
//              MYSQL_YYABORT;
//            }

//            if (!is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "REDO_LOG"))
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (0));
//              MYSQL_YYABORT;
//            }
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_ENABLE_INNODB_REDO, EMPTY_CSTR);
//          };
			break;

		case 2884: /* alter_instance_action: DISABLE_SYM ident ident */
//  if (yyn == 2884)
//    /* "sql_yacc.y":16288  */
//          {
//            if (!is_identifier(((lexer.lex_str)(yystack.valueAt (1))), "INNODB"))
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (1));
//              MYSQL_YYABORT;
//            }

//            if (!is_identifier(((lexer.lex_str)(yystack.valueAt (0))), "REDO_LOG"))
//            {
//              YYTHD->syntax_error_at(yystack.locationAt (0));
//              MYSQL_YYABORT;
//            }
//            yyval = NEW_PTN PT_alter_instance((yyloc), ALTER_INSTANCE_DISABLE_INNODB_REDO, EMPTY_CSTR);
//          };
			break;

		case 2885: /* alter_instance_action: RELOAD KEYRING_SYM */
//  if (yyn == 2885)
//    /* "sql_yacc.y":16302  */
//                             {
//            yyval = NEW_PTN PT_alter_instance((yyloc), RELOAD_KEYRING, EMPTY_CSTR);
//          };
			break;

		case 2886: /* handler_stmt: HANDLER_SYM table_ident OPEN_SYM opt_table_alias */
//  if (yyn == 2886)
//    /* "sql_yacc.y":16313  */
//          {
//            yyval= NEW_PTN PT_handler_open(((table)(yystack.valueAt (2))), ((lex_cstr)(yystack.valueAt (0))));
//          };
			break;

		case 2887: /* handler_stmt: HANDLER_SYM ident CLOSE_SYM */
//  if (yyn == 2887)
//    /* "sql_yacc.y":16317  */
//          {
//            yyval= NEW_PTN PT_handler_close(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1)))));
//          };
			break;

		case 2888: /* handler_stmt: HANDLER_SYM ident READ_SYM handler_scan_function opt_where_clause opt_limit_clause */
//  if (yyn == 2888)
//    /* "sql_yacc.y":16326  */
//          {
//            yyval= NEW_PTN PT_handler_table_scan(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (4)))), ((ha_read_mode)(yystack.valueAt (2))), ((item)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2889: /* handler_stmt: HANDLER_SYM ident READ_SYM ident handler_rkey_function opt_where_clause opt_limit_clause */
//  if (yyn == 2889)
//    /* "sql_yacc.y":16336  */
//          {
//            yyval= NEW_PTN PT_handler_index_scan(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (5)))),
//                                              to_lex_cstring(((lexer.lex_str)(yystack.valueAt (3)))), ((ha_read_mode)(yystack.valueAt (2))), ((item)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2890: /* handler_stmt: HANDLER_SYM ident READ_SYM ident handler_rkey_mode '(' values ')' opt_where_clause opt_limit_clause */
//  if (yyn == 2890)
//    /* "sql_yacc.y":16348  */
//          {
//            yyval= NEW_PTN PT_handler_index_range_scan(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (8)))),
//                                                    to_lex_cstring(((lexer.lex_str)(yystack.valueAt (6)))),
//                                                    ((ha_rkey_mode)(yystack.valueAt (5))), ((item_list2)(yystack.valueAt (3))), ((item)(yystack.valueAt (1))), ((limit_clause)(yystack.valueAt (0))));
//          };
			break;

		case 2891: /* handler_scan_function: FIRST_SYM */
//  if (yyn == 2891)
//    /* "sql_yacc.y":16356  */
//                    { yyval= enum_ha_read_modes::RFIRST; };
			break;

		case 2892: /* handler_scan_function: NEXT_SYM */
//  if (yyn == 2892)
//    /* "sql_yacc.y":16357  */
//                    { yyval= enum_ha_read_modes::RNEXT;  };
			break;

		case 2893: /* handler_rkey_function: FIRST_SYM */
//  if (yyn == 2893)
//    /* "sql_yacc.y":16361  */
//                    { yyval= enum_ha_read_modes::RFIRST; };
			break;

		case 2894: /* handler_rkey_function: NEXT_SYM */
//  if (yyn == 2894)
//    /* "sql_yacc.y":16362  */
//                    { yyval= enum_ha_read_modes::RNEXT;  };
			break;

		case 2895: /* handler_rkey_function: PREV_SYM */
//  if (yyn == 2895)
//    /* "sql_yacc.y":16363  */
//                    { yyval= enum_ha_read_modes::RPREV;  };
			break;

		case 2896: /* handler_rkey_function: LAST_SYM */
//  if (yyn == 2896)
//    /* "sql_yacc.y":16364  */
//                    { yyval= enum_ha_read_modes::RLAST;  };
			break;

		case 2897: /* handler_rkey_mode: EQ */
//  if (yyn == 2897)
//    /* "sql_yacc.y":16368  */
//                 { yyval=HA_READ_KEY_EXACT;   };
			break;

		case 2898: /* handler_rkey_mode: GE */
//  if (yyn == 2898)
//    /* "sql_yacc.y":16369  */
//                 { yyval=HA_READ_KEY_OR_NEXT; };
			break;

		case 2899: /* handler_rkey_mode: LE */
//  if (yyn == 2899)
//    /* "sql_yacc.y":16370  */
//                 { yyval=HA_READ_KEY_OR_PREV; };
			break;

		case 2900: /* handler_rkey_mode: GT_SYM */
//  if (yyn == 2900)
//    /* "sql_yacc.y":16371  */
//                 { yyval=HA_READ_AFTER_KEY;   };
			break;

		case 2901: /* handler_rkey_mode: LT */
//  if (yyn == 2901)
//    /* "sql_yacc.y":16372  */
//                 { yyval=HA_READ_BEFORE_KEY;  };
			break;

		case 2902: /* revoke: REVOKE if_exists role_or_privilege_list FROM user_list opt_ignore_unknown_user */
//  if (yyn == 2902)
//    /* "sql_yacc.y":16379  */
//          {
//            Lex->grant_if_exists = ((num)(yystack.valueAt (4)));
//            Lex->ignore_unknown_user = ((num)(yystack.valueAt (0)));
//            auto *tmp= NEW_PTN PT_revoke_roles((yyloc), ((role_or_privilege_list)(yystack.valueAt (3))), ((user_list)(yystack.valueAt (1))));
//            MAKE_CMD(tmp);
//          };
			break;

		case 2903: /* revoke: REVOKE if_exists role_or_privilege_list ON_SYM opt_acl_type grant_ident FROM user_list opt_ignore_unknown_user */
//  if (yyn == 2903)
//    /* "sql_yacc.y":16386  */
//          {
//            LEX *lex= Lex;
//            lex->grant_if_exists = ((num)(yystack.valueAt (7)));
//            Lex->ignore_unknown_user = ((num)(yystack.valueAt (0)));
//            if (apply_privileges(YYTHD, *((role_or_privilege_list)(yystack.valueAt (6)))))
//              MYSQL_YYABORT;
//            lex->sql_command= (lex->grant == GLOBAL_ACLS) ? SQLCOM_REVOKE_ALL
//                                                          : SQLCOM_REVOKE;
//            if (((acl_type)(yystack.valueAt (4))) != Acl_type::TABLE && !lex->columns.is_empty())
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            lex->type= static_cast<ulong>(((acl_type)(yystack.valueAt (4))));
//            lex->users_list= *((user_list)(yystack.valueAt (1)));
//            MAKE_CMD_DCL_DUMMY();
//          };
			break;

		case 2904: /* $@55: %empty */
//  if (yyn == 2904)
//    /* "sql_yacc.y":16404  */
//          {
//            Lex->grant_if_exists = ((num)(yystack.valueAt (2)));
//            Lex->all_privileges= 1;
//            Lex->grant= GLOBAL_ACLS;
//          };
			break;

		case 2905: /* revoke: REVOKE if_exists ALL opt_privileges $@55 ON_SYM opt_acl_type grant_ident FROM user_list opt_ignore_unknown_user */
//  if (yyn == 2905)
//    /* "sql_yacc.y":16410  */
//          {
//            LEX *lex= Lex;
//            lex->sql_command= (lex->grant == (GLOBAL_ACLS & ~GRANT_ACL)) ?
//                                                            SQLCOM_REVOKE_ALL
//                                                          : SQLCOM_REVOKE;
//            if (((acl_type)(yystack.valueAt (4))) != Acl_type::TABLE && !lex->columns.is_empty())
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            lex->type= static_cast<ulong>(((acl_type)(yystack.valueAt (4))));
//            lex->users_list= *((user_list)(yystack.valueAt (1)));
//            lex->ignore_unknown_user = ((num)(yystack.valueAt (0)));
//            MAKE_CMD_DCL_DUMMY();
//          };
			break;

		case 2906: /* revoke: REVOKE if_exists ALL opt_privileges ',' GRANT OPTION FROM user_list opt_ignore_unknown_user */
			if (yyn == 2906)
			/* "sql_yacc.y":16426 */
			{
//            Lex->grant_if_exists = ((num)(yystack.valueAt (8)));
//            Lex->ignore_unknown_user = ((num)(yystack.valueAt (0)));
//            Lex->sql_command = SQLCOM_REVOKE_ALL;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_REVOKE_ALL;
//            Lex->users_list= *((user_list)(yystack.valueAt (1)));
//            MAKE_CMD_DCL_DUMMY();
			}
			;
			break;

		case 2907: /* revoke: REVOKE if_exists PROXY_SYM ON_SYM user FROM user_list opt_ignore_unknown_user */
			if (yyn == 2907)
			/* "sql_yacc.y":16434 */
			{
//            LEX *lex= Lex;
//            lex->grant_if_exists = ((num)(yystack.valueAt (6)));
//            lex->ignore_unknown_user = ((num)(yystack.valueAt (0)));
//            lex->sql_command= SQLCOM_REVOKE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_REVOKE;
//            lex->users_list= *((user_list)(yystack.valueAt (1)));
//            lex->users_list.push_front (((lex_user)(yystack.valueAt (3))));
//            lex->type= TYPE_ENUM_PROXY;
//            MAKE_CMD_DCL_DUMMY();
			}
			;
			break;

		case 2908: /* grant: GRANT role_or_privilege_list TO_SYM user_list opt_with_admin_option */
//  if (yyn == 2908)
//    /* "sql_yacc.y":16448  */
//          {
//            auto *tmp= NEW_PTN PT_grant_roles((yyloc), ((role_or_privilege_list)(yystack.valueAt (3))), ((user_list)(yystack.valueAt (1))), ((is_not_empty)(yystack.valueAt (0))));
//            MAKE_CMD(tmp);
//          };
			break;

		case 2909: /* grant: GRANT role_or_privilege_list ON_SYM opt_acl_type grant_ident TO_SYM user_list grant_options opt_grant_as */
			if (yyn == 2909)
			/* "sql_yacc.y":16454 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_GRANT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_GRANT;
//            if (apply_privileges(YYTHD, *((role_or_privilege_list)(yystack.valueAt (7)))))
//              MYSQL_YYABORT;

//            if (((acl_type)(yystack.valueAt (5))) != Acl_type::TABLE && !lex->columns.is_empty())
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            lex->type= static_cast<ulong>(((acl_type)(yystack.valueAt (5))));
//            lex->users_list= *((user_list)(yystack.valueAt (2)));
//            MAKE_CMD_DCL_DUMMY();
			}
			;
			break;

		case 2910: /* $@56: %empty */
//  if (yyn == 2910)
//    /* "sql_yacc.y":16470  */
//          {
//            Lex->all_privileges= 1;
//            Lex->grant= GLOBAL_ACLS;
//          };
			break;

		case 2911: /* grant: GRANT ALL opt_privileges $@56 ON_SYM opt_acl_type grant_ident TO_SYM user_list grant_options opt_grant_as */
			if (yyn == 2911)
			/* "sql_yacc.y":16475 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_GRANT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_GRANT;
//            if (((acl_type)(yystack.valueAt (5))) != Acl_type::TABLE && !lex->columns.is_empty())
//            {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }
//            lex->type= static_cast<ulong>(((acl_type)(yystack.valueAt (5))));
//            lex->users_list= *((user_list)(yystack.valueAt (2)));
//            MAKE_CMD_DCL_DUMMY();
			}
			;
			break;

		case 2912: /* grant: GRANT PROXY_SYM ON_SYM user TO_SYM user_list opt_grant_option */
			if (yyn == 2912)
			/* "sql_yacc.y":16488 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_GRANT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_GRANT;
//            if (((is_not_empty)(yystack.valueAt (0))))
//              lex->grant |= GRANT_ACL;
//            lex->users_list= *((user_list)(yystack.valueAt (1)));
//            lex->users_list.push_front (((lex_user)(yystack.valueAt (3))));
//            lex->type= TYPE_ENUM_PROXY;
//            MAKE_CMD_DCL_DUMMY();
			}
			;
			break;

		case 2913: /* opt_acl_type: %empty */
//  if (yyn == 2913)
//    /* "sql_yacc.y":16501  */
//                        { yyval= Acl_type::TABLE; };
			break;

		case 2914: /* opt_acl_type: TABLE_SYM */
//  if (yyn == 2914)
//    /* "sql_yacc.y":16502  */
//                        { yyval= Acl_type::TABLE; };
			break;

		case 2915: /* opt_acl_type: FUNCTION_SYM */
//  if (yyn == 2915)
//    /* "sql_yacc.y":16503  */
//                        { yyval= Acl_type::FUNCTION; };
			break;

		case 2916: /* opt_acl_type: PROCEDURE_SYM */
//  if (yyn == 2916)
//    /* "sql_yacc.y":16504  */
//                        { yyval= Acl_type::PROCEDURE; };
			break;

		case 2919: /* role_or_privilege_list: role_or_privilege */
//  if (yyn == 2919)
//    /* "sql_yacc.y":16514  */
//          {
//            yyval= NEW_PTN Mem_root_array<PT_role_or_privilege *>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(((role_or_privilege)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2920: /* role_or_privilege_list: role_or_privilege_list ',' role_or_privilege */
//  if (yyn == 2920)
//    /* "sql_yacc.y":16520  */
//          {
//            yyval= ((role_or_privilege_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((role_or_privilege)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 2921: /* role_or_privilege: role_ident_or_text opt_column_list */
//  if (yyn == 2921)
//    /* "sql_yacc.y":16529  */
//          {
//            if (((lex_cstring_list)(yystack.valueAt (0))) == nullptr)
//              yyval= NEW_PTN PT_role_or_dynamic_privilege((yyloc), yystack.locationAt (1), ((lexer.lex_str)(yystack.valueAt (1))));
//            else
//              yyval= NEW_PTN PT_dynamic_privilege((yyloc), yystack.locationAt (1), ((lexer.lex_str)(yystack.valueAt (1))));
//          };
			break;

		case 2922: /* role_or_privilege: role_ident_or_text '@' ident_or_text */
//  if (yyn == 2922)
//    /* "sql_yacc.y":16536  */
//          { yyval= NEW_PTN PT_role_at_host((yyloc), yystack.locationAt (2), ((lexer.lex_str)(yystack.valueAt (2))), ((lexer.lex_str)(yystack.valueAt (0)))); };
			break;

		case 2923: /* role_or_privilege: SELECT_SYM opt_column_list */
//  if (yyn == 2923)
//    /* "sql_yacc.y":16538  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), SELECT_ACL, ((lex_cstring_list)(yystack.valueAt (0)))); };
			break;

		case 2924: /* role_or_privilege: INSERT_SYM opt_column_list */
//  if (yyn == 2924)
//    /* "sql_yacc.y":16540  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), INSERT_ACL, ((lex_cstring_list)(yystack.valueAt (0)))); };
			break;

		case 2925: /* role_or_privilege: UPDATE_SYM opt_column_list */
//  if (yyn == 2925)
//    /* "sql_yacc.y":16542  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), UPDATE_ACL, ((lex_cstring_list)(yystack.valueAt (0)))); };
			break;

		case 2926: /* role_or_privilege: REFERENCES opt_column_list */
//  if (yyn == 2926)
//    /* "sql_yacc.y":16544  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), REFERENCES_ACL, ((lex_cstring_list)(yystack.valueAt (0)))); };
			break;

		case 2927: /* role_or_privilege: DELETE_SYM */
//  if (yyn == 2927)
//    /* "sql_yacc.y":16546  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), DELETE_ACL); };
			break;

		case 2928: /* role_or_privilege: USAGE */
//  if (yyn == 2928)
//    /* "sql_yacc.y":16548  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), 0); };
			break;

		case 2929: /* role_or_privilege: INDEX_SYM */
//  if (yyn == 2929)
//    /* "sql_yacc.y":16550  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), INDEX_ACL); };
			break;

		case 2930: /* role_or_privilege: ALTER */
//  if (yyn == 2930)
//    /* "sql_yacc.y":16552  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), ALTER_ACL); };
			break;

		case 2931: /* role_or_privilege: CREATE */
//  if (yyn == 2931)
//    /* "sql_yacc.y":16554  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), CREATE_ACL); };
			break;

		case 2932: /* role_or_privilege: DROP */
//  if (yyn == 2932)
//    /* "sql_yacc.y":16556  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), DROP_ACL); };
			break;

		case 2933: /* role_or_privilege: EXECUTE_SYM */
//  if (yyn == 2933)
//    /* "sql_yacc.y":16558  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), EXECUTE_ACL); };
			break;

		case 2934: /* role_or_privilege: RELOAD */
//  if (yyn == 2934)
//    /* "sql_yacc.y":16560  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), RELOAD_ACL); };
			break;

		case 2935: /* role_or_privilege: SHUTDOWN */
//  if (yyn == 2935)
//    /* "sql_yacc.y":16562  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), SHUTDOWN_ACL); };
			break;

		case 2936: /* role_or_privilege: PROCESS */
//  if (yyn == 2936)
//    /* "sql_yacc.y":16564  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), PROCESS_ACL); };
			break;

		case 2937: /* role_or_privilege: FILE_SYM */
//  if (yyn == 2937)
//    /* "sql_yacc.y":16566  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), FILE_ACL); };
			break;

		case 2938: /* role_or_privilege: GRANT OPTION */
//  if (yyn == 2938)
//    /* "sql_yacc.y":16568  */
//          {
//            yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), GRANT_ACL);
//            Lex->grant_privilege= true;
//          };
			break;

		case 2939: /* role_or_privilege: SHOW DATABASES */
//  if (yyn == 2939)
//    /* "sql_yacc.y":16573  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), SHOW_DB_ACL); };
			break;

		case 2940: /* role_or_privilege: SUPER_SYM */
//  if (yyn == 2940)
//    /* "sql_yacc.y":16575  */
//          {
//            /* DEPRECATED */
//            yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), SUPER_ACL);
//            if (Lex->grant != GLOBAL_ACLS)
//            {
//              /*
//                 An explicit request was made for the SUPER priv id
//              */
//              push_warning(Lex->thd, Sql_condition::SL_WARNING,
//                           ER_WARN_DEPRECATED_SYNTAX,
//                           "The SUPER privilege identifier is deprecated");
//            }
//          };
			break;

		case 2941: /* role_or_privilege: CREATE TEMPORARY TABLES */
//  if (yyn == 2941)
//    /* "sql_yacc.y":16589  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (2), CREATE_TMP_ACL); };
			break;

		case 2942: /* role_or_privilege: LOCK_SYM TABLES */
//  if (yyn == 2942)
//    /* "sql_yacc.y":16591  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), LOCK_TABLES_ACL); };
			break;

		case 2943: /* role_or_privilege: REPLICATION SLAVE */
//  if (yyn == 2943)
//    /* "sql_yacc.y":16593  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), REPL_SLAVE_ACL); };
			break;

		case 2944: /* role_or_privilege: REPLICATION CLIENT_SYM */
//  if (yyn == 2944)
//    /* "sql_yacc.y":16595  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), REPL_CLIENT_ACL); };
			break;

		case 2945: /* role_or_privilege: CREATE VIEW_SYM */
//  if (yyn == 2945)
//    /* "sql_yacc.y":16597  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), CREATE_VIEW_ACL); };
			break;

		case 2946: /* role_or_privilege: SHOW VIEW_SYM */
//  if (yyn == 2946)
//    /* "sql_yacc.y":16599  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), SHOW_VIEW_ACL); };
			break;

		case 2947: /* role_or_privilege: CREATE ROUTINE_SYM */
//  if (yyn == 2947)
//    /* "sql_yacc.y":16601  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), CREATE_PROC_ACL); };
			break;

		case 2948: /* role_or_privilege: ALTER ROUTINE_SYM */
//  if (yyn == 2948)
//    /* "sql_yacc.y":16603  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), ALTER_PROC_ACL); };
			break;

		case 2949: /* role_or_privilege: CREATE USER */
//  if (yyn == 2949)
//    /* "sql_yacc.y":16605  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), CREATE_USER_ACL); };
			break;

		case 2950: /* role_or_privilege: EVENT_SYM */
//  if (yyn == 2950)
//    /* "sql_yacc.y":16607  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), EVENT_ACL); };
			break;

		case 2951: /* role_or_privilege: TRIGGER_SYM */
//  if (yyn == 2951)
//    /* "sql_yacc.y":16609  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (0), TRIGGER_ACL); };
			break;

		case 2952: /* role_or_privilege: CREATE TABLESPACE_SYM */
//  if (yyn == 2952)
//    /* "sql_yacc.y":16611  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), CREATE_TABLESPACE_ACL); };
			break;

		case 2953: /* role_or_privilege: CREATE ROLE_SYM */
//  if (yyn == 2953)
//    /* "sql_yacc.y":16613  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), CREATE_ROLE_ACL); };
			break;

		case 2954: /* role_or_privilege: DROP ROLE_SYM */
//  if (yyn == 2954)
//    /* "sql_yacc.y":16615  */
//          { yyval= NEW_PTN PT_static_privilege((yyloc), yystack.locationAt (1), DROP_ROLE_ACL); };
			break;

		case 2955: /* opt_with_admin_option: %empty */
//  if (yyn == 2955)
//    /* "sql_yacc.y":16619  */
//                                { yyval= false; };
			break;

		case 2956: /* opt_with_admin_option: WITH ADMIN_SYM OPTION */
//  if (yyn == 2956)
//    /* "sql_yacc.y":16620  */
//                                { yyval= true; };
			break;

		case 2961: /* require_list_element: SUBJECT_SYM TEXT_STRING */
//  if (yyn == 2961)
//    /* "sql_yacc.y":16635  */
//          {
//            LEX *lex=Lex;
//            if (lex->x509_subject)
//            {
//              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
//              MYSQL_YYABORT;
//            }
//            lex->x509_subject=((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 2962: /* require_list_element: ISSUER_SYM TEXT_STRING */
//  if (yyn == 2962)
//    /* "sql_yacc.y":16645  */
//          {
//            LEX *lex=Lex;
//            if (lex->x509_issuer)
//            {
//              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
//              MYSQL_YYABORT;
//            }
//            lex->x509_issuer=((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 2963: /* require_list_element: CIPHER_SYM TEXT_STRING */
//  if (yyn == 2963)
//    /* "sql_yacc.y":16655  */
//          {
//            LEX *lex=Lex;
//            if (lex->ssl_cipher)
//            {
//              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
//              MYSQL_YYABORT;
//            }
//            lex->ssl_cipher=((lexer.lex_str)(yystack.valueAt (0))).str;
//          };
			break;

		case 2964: /* grant_ident: '*' */
//  if (yyn == 2964)
//    /* "sql_yacc.y":16668  */
//          {
//            LEX *lex= Lex;
//            size_t dummy;
//            if (lex->copy_db_to(&lex->current_query_block()->db, &dummy))
//              MYSQL_YYABORT;
//            if (lex->grant == GLOBAL_ACLS)
//              lex->grant = DB_OP_ACLS;
//            else if (lex->columns.elements)
//            {
//              my_error(ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2965: /* grant_ident: schema '.' '*' */
//  if (yyn == 2965)
//    /* "sql_yacc.y":16682  */
//          {
//            LEX *lex= Lex;
//            lex->current_query_block()->db = ((lexer.lex_str)(yystack.valueAt (2))).str;
//            if (lex->grant == GLOBAL_ACLS)
//              lex->grant = DB_OP_ACLS;
//            else if (lex->columns.elements)
//            {
//              my_error(ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2966: /* grant_ident: '*' '.' '*' */
//  if (yyn == 2966)
//    /* "sql_yacc.y":16694  */
//          {
//            LEX *lex= Lex;
//            lex->current_query_block()->db = nullptr;
//            if (lex->grant == GLOBAL_ACLS)
//              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
//            else if (lex->columns.elements)
//            {
//              my_error(ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0));
//              MYSQL_YYABORT;
//            }
//          };
			break;

		case 2967: /* grant_ident: ident */
//  if (yyn == 2967)
//    /* "sql_yacc.y":16706  */
//          {
//            auto tmp = NEW_PTN Table_ident(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//            if (tmp == nullptr)
//              MYSQL_YYABORT;
//            LEX *lex=Lex;
//            if (!lex->current_query_block()->add_table_to_list(lex->thd, tmp, nullptr,
//                                                        TL_OPTION_UPDATING))
//              MYSQL_YYABORT;
//            if (lex->grant == GLOBAL_ACLS)
//              lex->grant =  TABLE_OP_ACLS;
//          };
			break;

		case 2968: /* grant_ident: schema '.' ident */
//  if (yyn == 2968)
//    /* "sql_yacc.y":16718  */
//          {
//            auto schema_name = YYCLIENT_NO_SCHEMA ? LEX_CSTRING{}
//                                                  : to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2))).str);
//            auto tmp = NEW_PTN Table_ident(schema_name, to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//            if (tmp == nullptr)
//              MYSQL_YYABORT;
//            LEX *lex=Lex;
//            if (!lex->current_query_block()->add_table_to_list(lex->thd, tmp, nullptr,
//                                                        TL_OPTION_UPDATING))
//              MYSQL_YYABORT;
//            if (lex->grant == GLOBAL_ACLS)
//              lex->grant =  TABLE_OP_ACLS;
//          };
			break;

		case 2969: /* user_list: user */
//  if (yyn == 2969)
//    /* "sql_yacc.y":16735  */
//          {
//            yyval= new (YYMEM_ROOT) List<LEX_USER>;
//            if (yyval == nullptr || yyval->push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2970: /* user_list: user_list ',' user */
//  if (yyn == 2970)
//    /* "sql_yacc.y":16741  */
//          {
//            yyval= ((user_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2971: /* role_list: role */
//  if (yyn == 2971)
//    /* "sql_yacc.y":16750  */
//          {
//            yyval= new (YYMEM_ROOT) List<LEX_USER>;
//            if (yyval == nullptr || yyval->push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2972: /* role_list: role_list ',' role */
//  if (yyn == 2972)
//    /* "sql_yacc.y":16756  */
//          {
//            yyval= ((user_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 2973: /* opt_retain_current_password: %empty */
//  if (yyn == 2973)
//    /* "sql_yacc.y":16764  */
//                 { yyval= false; };
			break;

		case 2974: /* opt_retain_current_password: RETAIN_SYM CURRENT_SYM PASSWORD */
//  if (yyn == 2974)
//    /* "sql_yacc.y":16765  */
//                                          { yyval= true; };
			break;

		case 2975: /* opt_discard_old_password: %empty */
//  if (yyn == 2975)
//    /* "sql_yacc.y":16769  */
//                 { yyval= false; };
			break;

		case 2976: /* opt_discard_old_password: DISCARD_SYM OLD_SYM PASSWORD */
//  if (yyn == 2976)
//    /* "sql_yacc.y":16770  */
//                                       { yyval= true; };
			break;

		case 2977: /* opt_user_registration: factor INITIATE_SYM REGISTRATION_SYM */
//  if (yyn == 2977)
//    /* "sql_yacc.y":16775  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->nth_factor= ((ulong_num)(yystack.valueAt (2)));
//            m->init_registration= true;
//            m->requires_registration= true;
//            yyval = m;
//          };
			break;

		case 2978: /* opt_user_registration: factor UNREGISTER_SYM */
//  if (yyn == 2978)
//    /* "sql_yacc.y":16785  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->nth_factor= ((ulong_num)(yystack.valueAt (1)));
//            m->unregister= true;
//            yyval = m;
//          };
			break;

		case 2979: /* opt_user_registration: factor FINISH_SYM REGISTRATION_SYM SET_SYM CHALLENGE_RESPONSE_SYM AS TEXT_STRING_hash */
//  if (yyn == 2979)
//    /* "sql_yacc.y":16794  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->nth_factor= ((ulong_num)(yystack.valueAt (6)));
//            m->finish_registration= true;
//            m->requires_registration= true;
//            m->challenge_response= to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//            yyval = m;
//          };
			break;

		case 2980: /* create_user: user identification opt_create_user_with_mfa */
//  if (yyn == 2980)
//    /* "sql_yacc.y":16808  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            yyval->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            if (yyval->add_mfa_identifications(((lex_mfas)(yystack.valueAt (0))).mfa2, ((lex_mfas)(yystack.valueAt (0))).mfa3))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 2981: /* create_user: user identified_with_plugin opt_initial_auth */
//  if (yyn == 2981)
//    /* "sql_yacc.y":16815  */
//          {
//            yyval= ((lex_user)(yystack.valueAt (2)));
//            /* set $3 as first factor auth method */
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 1;
//            ((lex_mfa)(yystack.valueAt (0)))->passwordless = false;
//            yyval->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (0)));
//            /* set $2 as second factor auth method */
//            ((lex_mfa)(yystack.valueAt (1)))->nth_factor = 2;
//            ((lex_mfa)(yystack.valueAt (1)))->passwordless = true;
//            if (yyval->mfa_list.push_back(((lex_mfa)(yystack.valueAt (1)))))
//              MYSQL_YYABORT;  // OOM
//            yyval->with_initial_auth = true;
//          };
			break;

		case 2982: /* create_user: user opt_create_user_with_mfa */
//  if (yyn == 2982)
//    /* "sql_yacc.y":16829  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (1)));
//            if (yyval->add_mfa_identifications(((lex_mfas)(yystack.valueAt (0))).mfa2, ((lex_mfas)(yystack.valueAt (0))).mfa3))
//              MYSQL_YYABORT;  // OOM
//          };
			break;

		case 2983: /* opt_create_user_with_mfa: %empty */
//  if (yyn == 2983)
//    /* "sql_yacc.y":16837  */
//                 { yyval = {}; };
			break;

		case 2984: /* opt_create_user_with_mfa: AND_SYM identification */
//  if (yyn == 2984)
//    /* "sql_yacc.y":16839  */
//          {
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 2;
//            yyval = {((lex_mfa)(yystack.valueAt (0))), nullptr};
//          };
			break;

		case 2985: /* opt_create_user_with_mfa: AND_SYM identification AND_SYM identification */
//  if (yyn == 2985)
//    /* "sql_yacc.y":16844  */
//          {
//            ((lex_mfa)(yystack.valueAt (2)))->nth_factor = 2;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 3;
//            yyval = {((lex_mfa)(yystack.valueAt (2))), ((lex_mfa)(yystack.valueAt (0)))};
//          };
			break;

		case 2992: /* identified_by_password: IDENTIFIED_SYM BY TEXT_STRING_password */
//  if (yyn == 2992)
//    /* "sql_yacc.y":16862  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//            m->uses_identified_by_clause = true;
//            yyval = m;
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 2993: /* identified_by_random_password: IDENTIFIED_SYM BY RANDOM_SYM PASSWORD */
//  if (yyn == 2993)
//    /* "sql_yacc.y":16875  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->auth = EMPTY_CSTR;
//            m->has_password_generator = true;
//            m->uses_identified_by_clause = true;
//            yyval = m;
//            Lex->contains_plaintext_password = true;
//          };
			break;

		case 2994: /* identified_with_plugin: IDENTIFIED_SYM WITH ident_or_text */
//  if (yyn == 2994)
//    /* "sql_yacc.y":16889  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->plugin = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//            m->auth = EMPTY_CSTR;
//            m->uses_identified_by_clause = false;
//            m->uses_identified_with_clause = true;
//            yyval = m;
//          };
			break;

		case 2995: /* identified_with_plugin_as_auth: IDENTIFIED_SYM WITH ident_or_text AS TEXT_STRING_hash */
//  if (yyn == 2995)
//    /* "sql_yacc.y":16903  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->plugin = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2))));
//            m->auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//            m->uses_authentication_string_clause = true;
//            m->uses_identified_with_clause = true;
//            yyval = m;
//          };
			break;

		case 2996: /* identified_with_plugin_by_password: IDENTIFIED_SYM WITH ident_or_text BY TEXT_STRING_password */
//  if (yyn == 2996)
//    /* "sql_yacc.y":16917  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->plugin = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2))));
//            m->auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//            m->uses_identified_by_clause = true;
//            m->uses_identified_with_clause = true;
//            yyval = m;
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 2997: /* identified_with_plugin_by_random_password: IDENTIFIED_SYM WITH ident_or_text BY RANDOM_SYM PASSWORD */
//  if (yyn == 2997)
//    /* "sql_yacc.y":16932  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->plugin = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (3))));
//            m->uses_identified_by_clause = true;
//            m->uses_identified_with_clause = true;
//            m->has_password_generator = true;
//            yyval = m;
//            Lex->contains_plaintext_password= true;
//          };
			break;

		case 2998: /* opt_initial_auth: INITIAL_SYM AUTHENTICATION_SYM identified_by_random_password */
//  if (yyn == 2998)
//    /* "sql_yacc.y":16947  */
//           {
//            yyval = ((lex_mfa)(yystack.valueAt (0)));
//            ((lex_mfa)(yystack.valueAt (0)))->passwordless = true;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 2;
//          };
			break;

		case 2999: /* opt_initial_auth: INITIAL_SYM AUTHENTICATION_SYM identified_with_plugin_as_auth */
//  if (yyn == 2999)
//    /* "sql_yacc.y":16953  */
//          {
//            yyval = ((lex_mfa)(yystack.valueAt (0)));
//            ((lex_mfa)(yystack.valueAt (0)))->passwordless = true;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 2;
//          };
			break;

		case 3000: /* opt_initial_auth: INITIAL_SYM AUTHENTICATION_SYM identified_by_password */
//  if (yyn == 3000)
//    /* "sql_yacc.y":16959  */
//          {
//            yyval = ((lex_mfa)(yystack.valueAt (0)));
//            ((lex_mfa)(yystack.valueAt (0)))->passwordless = true;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = 2;
//          };
			break;

		case 3001: /* alter_user: user identified_by_password REPLACE_SYM TEXT_STRING_password opt_retain_current_password */
//  if (yyn == 3001)
//    /* "sql_yacc.y":16970  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (4)));
//            ((lex_user)(yystack.valueAt (4)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (3)));
//            ((lex_user)(yystack.valueAt (4)))->current_auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1))));
//            ((lex_user)(yystack.valueAt (4)))->uses_replace_clause = true;
//            ((lex_user)(yystack.valueAt (4)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (4)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3002: /* alter_user: user identified_with_plugin_by_password REPLACE_SYM TEXT_STRING_password opt_retain_current_password */
//  if (yyn == 3002)
//    /* "sql_yacc.y":16981  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (4)));
//            ((lex_user)(yystack.valueAt (4)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (3)));
//            ((lex_user)(yystack.valueAt (4)))->current_auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1))));
//            ((lex_user)(yystack.valueAt (4)))->uses_replace_clause = true;
//            ((lex_user)(yystack.valueAt (4)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (4)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3003: /* alter_user: user identified_by_password opt_retain_current_password */
//  if (yyn == 3003)
//    /* "sql_yacc.y":16990  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            ((lex_user)(yystack.valueAt (2)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (2)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (2)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3004: /* alter_user: user identified_by_random_password opt_retain_current_password */
//  if (yyn == 3004)
//    /* "sql_yacc.y":16997  */
//           {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            ((lex_user)(yystack.valueAt (2)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (2)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (2)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3005: /* alter_user: user identified_by_random_password REPLACE_SYM TEXT_STRING_password opt_retain_current_password */
//  if (yyn == 3005)
//    /* "sql_yacc.y":17006  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (4)));
//            ((lex_user)(yystack.valueAt (4)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (3)));
//            ((lex_user)(yystack.valueAt (4)))->uses_replace_clause = true;
//            ((lex_user)(yystack.valueAt (4)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (4)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//            ((lex_user)(yystack.valueAt (4)))->current_auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1))));
//          };
			break;

		case 3006: /* alter_user: user identified_with_plugin */
//  if (yyn == 3006)
//    /* "sql_yacc.y":17015  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (1)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (0)));
//            ((lex_user)(yystack.valueAt (1)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (1)))->retain_current_password = false;
//          };
			break;

		case 3007: /* alter_user: user identified_with_plugin_as_auth opt_retain_current_password */
//  if (yyn == 3007)
//    /* "sql_yacc.y":17022  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            ((lex_user)(yystack.valueAt (2)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (2)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (2)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3008: /* alter_user: user identified_with_plugin_by_password opt_retain_current_password */
//  if (yyn == 3008)
//    /* "sql_yacc.y":17029  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            ((lex_user)(yystack.valueAt (2)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (2)))->discard_old_password = false;
//            ((lex_user)(yystack.valueAt (2)))->retain_current_password = ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3009: /* alter_user: user identified_with_plugin_by_random_password opt_retain_current_password */
//  if (yyn == 3009)
//    /* "sql_yacc.y":17037  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (2)));
//            ((lex_user)(yystack.valueAt (2)))->first_factor_auth_info = *((lex_mfa)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (2)))->discard_old_password= false;
//            ((lex_user)(yystack.valueAt (2)))->retain_current_password= ((is_not_empty)(yystack.valueAt (0)));
//          };
			break;

		case 3010: /* alter_user: user opt_discard_old_password */
//  if (yyn == 3010)
//    /* "sql_yacc.y":17044  */
//          {
//            yyval = ((lex_user)(yystack.valueAt (1)));
//            ((lex_user)(yystack.valueAt (1)))->discard_old_password = ((is_not_empty)(yystack.valueAt (0)));
//            ((lex_user)(yystack.valueAt (1)))->retain_current_password = false;
//          };
			break;

		case 3011: /* alter_user: user ADD factor identification */
//  if (yyn == 3011)
//    /* "sql_yacc.y":17050  */
//          {
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = ((ulong_num)(yystack.valueAt (1)));
//            ((lex_mfa)(yystack.valueAt (0)))->add_factor = true;
//            if (((lex_user)(yystack.valueAt (3)))->add_mfa_identifications(((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (3)));
//           };
			break;

		case 3012: /* alter_user: user ADD factor identification ADD factor identification */
//  if (yyn == 3012)
//    /* "sql_yacc.y":17058  */
//          {
//            if (((ulong_num)(yystack.valueAt (4))) == ((ulong_num)(yystack.valueAt (1)))) {
//              my_error(ER_MFA_METHODS_IDENTICAL, MYF(0));
//              MYSQL_YYABORT;
//            } else if (((ulong_num)(yystack.valueAt (4))) > ((ulong_num)(yystack.valueAt (1)))) {
//              my_error(ER_MFA_METHODS_INVALID_ORDER, MYF(0), ((ulong_num)(yystack.valueAt (1))), ((ulong_num)(yystack.valueAt (4))));
//              MYSQL_YYABORT;
//            }
//            ((lex_mfa)(yystack.valueAt (3)))->nth_factor = ((ulong_num)(yystack.valueAt (4)));
//            ((lex_mfa)(yystack.valueAt (3)))->add_factor = true;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = ((ulong_num)(yystack.valueAt (1)));
//            ((lex_mfa)(yystack.valueAt (0)))->add_factor = true;
//            if (((lex_user)(yystack.valueAt (6)))->add_mfa_identifications(((lex_mfa)(yystack.valueAt (3))), ((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (6)));
//          };
			break;

		case 3013: /* alter_user: user MODIFY_SYM factor identification */
//  if (yyn == 3013)
//    /* "sql_yacc.y":17075  */
//          {
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = ((ulong_num)(yystack.valueAt (1)));
//            ((lex_mfa)(yystack.valueAt (0)))->modify_factor = true;
//            if (((lex_user)(yystack.valueAt (3)))->add_mfa_identifications(((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (3)));
//           };
			break;

		case 3014: /* alter_user: user MODIFY_SYM factor identification MODIFY_SYM factor identification */
//  if (yyn == 3014)
//    /* "sql_yacc.y":17083  */
//          {
//            if (((ulong_num)(yystack.valueAt (4))) == ((ulong_num)(yystack.valueAt (1)))) {
//              my_error(ER_MFA_METHODS_IDENTICAL, MYF(0));
//              MYSQL_YYABORT;
//            }
//            ((lex_mfa)(yystack.valueAt (3)))->nth_factor = ((ulong_num)(yystack.valueAt (4)));
//            ((lex_mfa)(yystack.valueAt (3)))->modify_factor = true;
//            ((lex_mfa)(yystack.valueAt (0)))->nth_factor = ((ulong_num)(yystack.valueAt (1)));
//            ((lex_mfa)(yystack.valueAt (0)))->modify_factor = true;
//            if (((lex_user)(yystack.valueAt (6)))->add_mfa_identifications(((lex_mfa)(yystack.valueAt (3))), ((lex_mfa)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (6)));
//          };
			break;

		case 3015: /* alter_user: user DROP factor */
//  if (yyn == 3015)
//    /* "sql_yacc.y":17097  */
//          {
//            LEX_MFA *m = NEW_PTN LEX_MFA;
//            if (m == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m->nth_factor = ((ulong_num)(yystack.valueAt (0)));
//            m->drop_factor = true;
//            if (((lex_user)(yystack.valueAt (2)))->add_mfa_identifications(m))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (2)));
//           };
			break;

		case 3016: /* alter_user: user DROP factor DROP factor */
//  if (yyn == 3016)
//    /* "sql_yacc.y":17108  */
//          {
//            if (((ulong_num)(yystack.valueAt (2))) == ((ulong_num)(yystack.valueAt (0)))) {
//              my_error(ER_MFA_METHODS_IDENTICAL, MYF(0));
//              MYSQL_YYABORT;
//            }
//            LEX_MFA *m1 = NEW_PTN LEX_MFA;
//            if (m1 == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m1->nth_factor = ((ulong_num)(yystack.valueAt (2)));
//            m1->drop_factor = true;
//            LEX_MFA *m2 = NEW_PTN LEX_MFA;
//            if (m2 == nullptr)
//              MYSQL_YYABORT;  // OOM
//            m2->nth_factor = ((ulong_num)(yystack.valueAt (0)));
//            m2->drop_factor = true;
//            if (((lex_user)(yystack.valueAt (4)))->add_mfa_identifications(m1, m2))
//              MYSQL_YYABORT;  // OOM
//            yyval = ((lex_user)(yystack.valueAt (4)));
//           };
			break;

		case 3017: /* factor: NUM FACTOR_SYM */
//  if (yyn == 3017)
//    /* "sql_yacc.y":17131  */
//          {
//            if (my_strcasecmp(system_charset_info, ((lexer.lex_str)(yystack.valueAt (1))).str, "2") == 0) {
//              yyval = 2;
//            } else if (my_strcasecmp(system_charset_info, ((lexer.lex_str)(yystack.valueAt (1))).str, "3") == 0) {
//              yyval = 3;
//            } else {
//               my_error(ER_WRONG_VALUE, MYF(0), "nth factor", ((lexer.lex_str)(yystack.valueAt (1))).str);
//               MYSQL_YYABORT;
//            }
//          };
			break;

		case 3018: /* create_user_list: create_user */
//  if (yyn == 3018)
//    /* "sql_yacc.y":17145  */
//          {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 3019: /* create_user_list: create_user_list ',' create_user */
//  if (yyn == 3019)
//    /* "sql_yacc.y":17150  */
//          {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 3020: /* alter_user_list: alter_user */
//  if (yyn == 3020)
//    /* "sql_yacc.y":17158  */
//         {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//         };
			break;

		case 3021: /* alter_user_list: alter_user_list ',' alter_user */
//  if (yyn == 3021)
//    /* "sql_yacc.y":17163  */
//          {
//            if (Lex->users_list.push_back(((lex_user)(yystack.valueAt (0)))))
//              MYSQL_YYABORT;
//          };
			break;

		case 3022: /* opt_column_list: %empty */
//  if (yyn == 3022)
//    /* "sql_yacc.y":17170  */
//                 { yyval= nullptr; };
			break;

		case 3023: /* opt_column_list: '(' column_list ')' */
//  if (yyn == 3023)
//    /* "sql_yacc.y":17171  */
//                              { yyval= ((lex_cstring_list)(yystack.valueAt (1))); };
			break;

		case 3024: /* column_list: ident */
//  if (yyn == 3024)
//    /* "sql_yacc.y":17176  */
//          {
//            yyval= NEW_PTN Mem_root_array<LEX_CSTRING>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3025: /* column_list: column_list ',' ident */
//  if (yyn == 3025)
//    /* "sql_yacc.y":17182  */
//          {
//            yyval= ((lex_cstring_list)(yystack.valueAt (2)));
//            if (yyval->push_back(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3027: /* require_clause: REQUIRE_SYM require_list */
//  if (yyn == 3027)
//    /* "sql_yacc.y":17192  */
//          {
//            Lex->ssl_type=SSL_TYPE_SPECIFIED;
//          };
			break;

		case 3028: /* require_clause: REQUIRE_SYM SSL_SYM */
//  if (yyn == 3028)
//    /* "sql_yacc.y":17196  */
//          {
//            Lex->ssl_type=SSL_TYPE_ANY;
//          };
			break;

		case 3029: /* require_clause: REQUIRE_SYM X509_SYM */
//  if (yyn == 3029)
//    /* "sql_yacc.y":17200  */
//          {
//            Lex->ssl_type=SSL_TYPE_X509;
//          };
			break;

		case 3030: /* require_clause: REQUIRE_SYM NONE_SYM */
//  if (yyn == 3030)
//    /* "sql_yacc.y":17204  */
//          {
//            Lex->ssl_type=SSL_TYPE_NONE;
//          };
			break;

		case 3031: /* grant_options: %empty */
//  if (yyn == 3031)
//    /* "sql_yacc.y":17210  */
//                 {};
			break;

		case 3032: /* grant_options: WITH GRANT OPTION */
//  if (yyn == 3032)
//    /* "sql_yacc.y":17212  */
//          { Lex->grant |= GRANT_ACL;};
			break;

		case 3033: /* opt_grant_option: %empty */
//  if (yyn == 3033)
//    /* "sql_yacc.y":17216  */
//                 { yyval= false; };
			break;

		case 3034: /* opt_grant_option: WITH GRANT OPTION */
//  if (yyn == 3034)
//    /* "sql_yacc.y":17217  */
//                            { yyval= true; };
			break;

		case 3035: /* opt_with_roles: %empty */
//  if (yyn == 3035)
//    /* "sql_yacc.y":17220  */
//                 { Lex->grant_as.role_type = role_enum::ROLE_NONE; };
			break;

		case 3036: /* opt_with_roles: WITH ROLE_SYM role_list */
//  if (yyn == 3036)
//    /* "sql_yacc.y":17222  */
//          { Lex->grant_as.role_type = role_enum::ROLE_NAME;
//            Lex->grant_as.role_list = ((user_list)(yystack.valueAt (0)));
//          };
			break;

		case 3037: /* opt_with_roles: WITH ROLE_SYM ALL opt_except_role_list */
//  if (yyn == 3037)
//    /* "sql_yacc.y":17226  */
//          {
//            Lex->grant_as.role_type = role_enum::ROLE_ALL;
//            Lex->grant_as.role_list = ((user_list)(yystack.valueAt (0)));
//          };
			break;

		case 3038: /* opt_with_roles: WITH ROLE_SYM NONE_SYM */
//  if (yyn == 3038)
//    /* "sql_yacc.y":17231  */
//          { Lex->grant_as.role_type = role_enum::ROLE_NONE; };
			break;

		case 3039: /* opt_with_roles: WITH ROLE_SYM DEFAULT_SYM */
//  if (yyn == 3039)
//    /* "sql_yacc.y":17233  */
//          { Lex->grant_as.role_type = role_enum::ROLE_DEFAULT; };
			break;

		case 3040: /* opt_grant_as: %empty */
//  if (yyn == 3040)
//    /* "sql_yacc.y":17236  */
//                 { Lex->grant_as.grant_as_used = false; };
			break;

		case 3041: /* opt_grant_as: AS user opt_with_roles */
//  if (yyn == 3041)
//    /* "sql_yacc.y":17238  */
//          {
//            Lex->grant_as.grant_as_used = true;
//            Lex->grant_as.user = ((lex_user)(yystack.valueAt (1)));
//          };
			break;

		case 3042: /* $@57: %empty */
			if (yyn == 3042)
			/* "sql_yacc.y":17245 */
			{
//            LEX *lex=Lex;
//            lex->sql_command = SQLCOM_BEGIN;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_BEGIN;
//            lex->start_transaction_opt= 0;
			}
			;
			break;

		case 3043: /* begin_stmt: BEGIN_SYM $@57 opt_work */
//  if (yyn == 3043)
//    /* "sql_yacc.y":17250  */
//                   {};
			break;

		case 3044: /* opt_work: %empty */
//  if (yyn == 3044)
//    /* "sql_yacc.y":17254  */
//                 {};
			break;

		case 3045: /* opt_work: WORK_SYM */
//  if (yyn == 3045)
//    /* "sql_yacc.y":17255  */
//                    {};
			break;

		case 3046: /* opt_chain: %empty */
//  if (yyn == 3046)
//    /* "sql_yacc.y":17259  */
//                                   { yyval= TVL_UNKNOWN; };
			break;

		case 3047: /* opt_chain: AND_SYM NO_SYM CHAIN_SYM */
//  if (yyn == 3047)
//    /* "sql_yacc.y":17260  */
//                                   { yyval= TVL_NO; };
			break;

		case 3048: /* opt_chain: AND_SYM CHAIN_SYM */
//  if (yyn == 3048)
//    /* "sql_yacc.y":17261  */
//                                   { yyval= TVL_YES; };
			break;

		case 3049: /* opt_release: %empty */
//  if (yyn == 3049)
//    /* "sql_yacc.y":17265  */
//                             { yyval= TVL_UNKNOWN; };
			break;

		case 3050: /* opt_release: RELEASE_SYM */
//  if (yyn == 3050)
//    /* "sql_yacc.y":17266  */
//                             { yyval= TVL_YES; };
			break;

		case 3051: /* opt_release: NO_SYM RELEASE_SYM */
//  if (yyn == 3051)
//    /* "sql_yacc.y":17267  */
//                             { yyval= TVL_NO; };
			break;

		case 3052: /* opt_savepoint: %empty */
//  if (yyn == 3052)
//    /* "sql_yacc.y":17271  */
//                 {};
			break;

		case 3053: /* opt_savepoint: SAVEPOINT_SYM */
//  if (yyn == 3053)
//    /* "sql_yacc.y":17272  */
//                        {};
			break;

		case 3054: /* commit: COMMIT_SYM opt_work opt_chain opt_release */
			if (yyn == 3054)
			/* "sql_yacc.y":17277 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_COMMIT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_COMMIT;
//            /* Don't allow AND CHAIN RELEASE. */
//            MYSQL_YYABORT_UNLESS(((m_yes_no_unk)(yystack.valueAt (1))) != TVL_YES || ((m_yes_no_unk)(yystack.valueAt (0))) != TVL_YES);
//            lex->tx_chain= ((m_yes_no_unk)(yystack.valueAt (1)));
//            lex->tx_release= ((m_yes_no_unk)(yystack.valueAt (0)));
			}
			;
			break;

		case 3055: /* rollback: ROLLBACK_SYM opt_work opt_chain opt_release */
			if (yyn == 3055)
			/* "sql_yacc.y":17289 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_ROLLBACK;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ROLLBACK;
//            /* Don't allow AND CHAIN RELEASE. */
//            MYSQL_YYABORT_UNLESS(((m_yes_no_unk)(yystack.valueAt (1))) != TVL_YES || ((m_yes_no_unk)(yystack.valueAt (0))) != TVL_YES);
//            lex->tx_chain= ((m_yes_no_unk)(yystack.valueAt (1)));
//            lex->tx_release= ((m_yes_no_unk)(yystack.valueAt (0)));
			}
			;
			break;

		case 3056: /* rollback: ROLLBACK_SYM opt_work TO_SYM opt_savepoint ident */
			if (yyn == 3056)
			/* "sql_yacc.y":17299 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_ROLLBACK_TO_SAVEPOINT;
//            lex->ident= ((lexer.lex_str)(yystack.valueAt (0)));
			}
			;
			break;

		case 3057: /* savepoint: SAVEPOINT_SYM ident */
			if (yyn == 3057)
			/* "sql_yacc.y":17308 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_SAVEPOINT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_SAVEPOINT;
//            lex->ident= ((lexer.lex_str)(yystack.valueAt (0)));
			}
			;
			break;

		case 3058: /* release: RELEASE_SYM SAVEPOINT_SYM ident */
			if (yyn == 3058)
			/* "sql_yacc.y":17317 */
			{
//            LEX *lex=Lex;
//            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_RELEASE_SAVEPOINT;
//            lex->ident= ((lexer.lex_str)(yystack.valueAt (0)));
			}
			;
			break;

		case 3059: /* union_option: %empty */
//  if (yyn == 3059)
//    /* "sql_yacc.y":17330  */
//                    { yyval=1; };
			break;

		case 3060: /* union_option: DISTINCT */
//  if (yyn == 3060)
//    /* "sql_yacc.y":17331  */
//                    { yyval=1; };
			break;

		case 3061: /* union_option: ALL */
//  if (yyn == 3061)
//    /* "sql_yacc.y":17332  */
//                    { yyval=0; };
			break;

		case 3064: /* subquery: query_expression_parens */
//  if (yyn == 3064)
//    /* "sql_yacc.y":17345  */
//          {
//            yyval= NEW_PTN PT_subquery((yyloc), ((query_expression_body)(yystack.valueAt (0))));
//          };
			break;

		case 3065: /* query_spec_option: STRAIGHT_JOIN */
//  if (yyn == 3065)
//    /* "sql_yacc.y":17351  */
//                              { yyval= SELECT_STRAIGHT_JOIN; };
			break;

		case 3066: /* query_spec_option: HIGH_PRIORITY */
//  if (yyn == 3066)
//    /* "sql_yacc.y":17352  */
//                              { yyval= SELECT_HIGH_PRIORITY; };
			break;

		case 3067: /* query_spec_option: DISTINCT */
//  if (yyn == 3067)
//    /* "sql_yacc.y":17353  */
//                              { yyval= SELECT_DISTINCT; };
			break;

		case 3068: /* query_spec_option: SQL_SMALL_RESULT */
//  if (yyn == 3068)
//    /* "sql_yacc.y":17354  */
//                              { yyval= SELECT_SMALL_RESULT; };
			break;

		case 3069: /* query_spec_option: SQL_BIG_RESULT */
//  if (yyn == 3069)
//    /* "sql_yacc.y":17355  */
//                              { yyval= SELECT_BIG_RESULT; };
			break;

		case 3070: /* query_spec_option: SQL_BUFFER_RESULT */
//  if (yyn == 3070)
//    /* "sql_yacc.y":17356  */
//                              { yyval= OPTION_BUFFER_RESULT; };
			break;

		case 3071: /* query_spec_option: SQL_CALC_FOUND_ROWS */
//  if (yyn == 3071)
//    /* "sql_yacc.y":17357  */
//                              {
//            push_warning(YYTHD, Sql_condition::SL_WARNING,
//                         ER_WARN_DEPRECATED_SYNTAX,
//                         ER_THD(YYTHD, ER_WARN_DEPRECATED_SQL_CALC_FOUND_ROWS));
//            yyval= OPTION_FOUND_ROWS;
//          };
			break;

		case 3072: /* query_spec_option: ALL */
//  if (yyn == 3072)
//    /* "sql_yacc.y":17363  */
//                              { yyval= SELECT_ALL; };
			break;

		case 3073: /* init_lex_create_info: %empty */
//  if (yyn == 3073)
//    /* "sql_yacc.y":17374  */
//          {
//            // Initialize context for 'CREATE view_or_trigger_or_sp_or_event'
//            Lex->create_info= YYTHD->alloc_typed<HA_CREATE_INFO>();
//            if (Lex->create_info == nullptr)
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3074: /* view_or_trigger_or_sp_or_event: definer init_lex_create_info definer_tail */
//  if (yyn == 3074)
//    /* "sql_yacc.y":17384  */
//          {};
			break;

		case 3075: /* view_or_trigger_or_sp_or_event: no_definer init_lex_create_info no_definer_tail */
//  if (yyn == 3075)
//    /* "sql_yacc.y":17386  */
//          {};
			break;

		case 3076: /* view_or_trigger_or_sp_or_event: view_replace_or_algorithm definer_opt init_lex_create_info view_tail */
//  if (yyn == 3076)
//    /* "sql_yacc.y":17388  */
//          {};
			break;

		case 3090: /* no_definer: %empty */
//  if (yyn == 3090)
//    /* "sql_yacc.y":17421  */
//          {
//            /*
//              We have to distinguish missing DEFINER-clause from case when
//              CURRENT_USER specified as definer explicitly in order to properly
//              handle CREATE TRIGGER statements which come to replication thread
//              from older source servers (i.e. to create non-suid trigger in this
//              case).
//            */
//            YYTHD->lex->definer= nullptr;
//          };
			break;

		case 3091: /* definer: DEFINER_SYM EQ user */
//  if (yyn == 3091)
//    /* "sql_yacc.y":17435  */
//          {
//            YYTHD->lex->definer= get_current_user(YYTHD, ((lex_user)(yystack.valueAt (0))));
//          };
			break;

		case 3092: /* view_replace_or_algorithm: view_replace */
//  if (yyn == 3092)
//    /* "sql_yacc.y":17448  */
//          {};
			break;

		case 3093: /* view_replace_or_algorithm: view_replace view_algorithm */
//  if (yyn == 3093)
//    /* "sql_yacc.y":17450  */
//          {};
			break;

		case 3094: /* view_replace_or_algorithm: view_algorithm */
//  if (yyn == 3094)
//    /* "sql_yacc.y":17452  */
//          {};
			break;

		case 3095: /* view_replace: OR_SYM REPLACE_SYM */
//  if (yyn == 3095)
//    /* "sql_yacc.y":17457  */
//          { Lex->create_view_mode= enum_view_create_mode::VIEW_CREATE_OR_REPLACE; };
			break;

		case 3096: /* view_algorithm: ALGORITHM_SYM EQ UNDEFINED_SYM */
//  if (yyn == 3096)
//    /* "sql_yacc.y":17462  */
//          { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; };
			break;

		case 3097: /* view_algorithm: ALGORITHM_SYM EQ MERGE_SYM */
//  if (yyn == 3097)
//    /* "sql_yacc.y":17464  */
//          { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; };
			break;

		case 3098: /* view_algorithm: ALGORITHM_SYM EQ TEMPTABLE_SYM */
//  if (yyn == 3098)
//    /* "sql_yacc.y":17466  */
//          { Lex->create_view_algorithm= VIEW_ALGORITHM_TEMPTABLE; };
			break;

		case 3099: /* view_suid: %empty */
//  if (yyn == 3099)
//    /* "sql_yacc.y":17470  */
//                 { Lex->create_view_suid= VIEW_SUID_DEFAULT; };
			break;

		case 3100: /* view_suid: SQL_SYM SECURITY_SYM DEFINER_SYM */
//  if (yyn == 3100)
//    /* "sql_yacc.y":17472  */
//          { Lex->create_view_suid= VIEW_SUID_DEFINER; };
			break;

		case 3101: /* view_suid: SQL_SYM SECURITY_SYM INVOKER_SYM */
//  if (yyn == 3101)
//    /* "sql_yacc.y":17474  */
//          { Lex->create_view_suid= VIEW_SUID_INVOKER; };
			break;

		case 3102: /* $@58: %empty */
			if (yyn == 3102)
			/* "sql_yacc.y":17479 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            lex->sql_command= SQLCOM_CREATE_VIEW;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_VIEW;
//            /* first table in list is target VIEW name */
//            if (!lex->query_block->add_table_to_list(thd, ((table)(yystack.valueAt (1))), nullptr,
//                                                    TL_OPTION_UPDATING,
//                                                    TL_IGNORE,
//                                                    MDL_EXCLUSIVE))
//              MYSQL_YYABORT;
//            lex->query_tables->open_strategy= Table_ref::OPEN_STUB;
//            thd->parsing_system_view= lex->query_tables->is_system_view;
//            if (((simple_ident_list)(yystack.valueAt (0))).size())
//            {
//              for (auto column_alias : ((simple_ident_list)(yystack.valueAt (0))))
//              {
//                // Report error if the column name/length is incorrect.
//                if (check_column_name(column_alias.str))
//                {
//                  my_error(ER_WRONG_COLUMN_NAME, MYF(0), column_alias.str);
//                  MYSQL_YYABORT;
//                }
//              }
//              /*
//                The $4 object is short-lived (its 'm_array' is not);
//                so we have to duplicate it, and then we can store a
//                pointer.
//              */
//              void *rawmem= thd->memdup(&(((simple_ident_list)(yystack.valueAt (0)))), sizeof(((simple_ident_list)(yystack.valueAt (0)))));
//              if (!rawmem)
//                MYSQL_YYABORT; /* purecov: inspected */
//              lex->query_tables->
//                set_derived_column_names(static_cast<Create_col_name_list* >(rawmem));
//            }
			}
			;
			break;

		case 3104: /* view_query_block: query_expression_with_opt_locking_clauses view_check_option */
//  if (yyn == 3104)
//    /* "sql_yacc.y":17519  */
//          {
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            lex->parsing_options.allows_variable= false;
//            lex->parsing_options.allows_select_into= false;

//            /*
//              In CREATE VIEW v ... the m_table_list initially contains
//              here a table entry for the destination "table" `v'.
//              Backup it and clean the table list for the processing of
//              the query expression and push `v' back to the beginning of the
//              m_table_list finally.

//              @todo: Don't save the CREATE destination table in
//                     Query_block::m_table_list and remove this backup & restore.

//              The following work only with the local list, the global list
//              is created correctly in this case
//            */
//            SQL_I_List<Table_ref> save_list;
//            Query_block * const save_query_block= Select;
//            save_query_block->m_table_list.save_and_clear(&save_list);

//            CONTEXTUALIZE_VIEW(((query_expression_body)(yystack.valueAt (1))));

//            /*
//              The following work only with the local list, the global list
//              is created correctly in this case
//            */
//            save_query_block->m_table_list.push_front(&save_list);

//            Lex->create_view_check= ((num)(yystack.valueAt (0)));

//            /*
//              It's simpler to use @$ to grab the whole rule text, OTOH  it's
//              also simple to lose something that way when changing this rule,
//              so let use explicit @1 and @2 to memdup this view definition:
//            */
//            const size_t len= yystack.locationAt (0).cpp.end - yystack.locationAt (1).cpp.start;
//            lex->create_view_query_block.str=
//              static_cast<char *>(thd->memdup(yystack.locationAt (1).cpp.start, len));
//            lex->create_view_query_block.length= len;
//            trim_whitespace(thd->charset(), &lex->create_view_query_block);

//            lex->parsing_options.allows_variable= true;
//            lex->parsing_options.allows_select_into= true;
//          };
			break;

		case 3105: /* view_check_option: %empty */
//  if (yyn == 3105)
//    /* "sql_yacc.y":17569  */
//                                          { yyval= VIEW_CHECK_NONE; };
			break;

		case 3106: /* view_check_option: WITH CHECK_SYM OPTION */
//  if (yyn == 3106)
//    /* "sql_yacc.y":17570  */
//                                          { yyval= VIEW_CHECK_CASCADED; };
			break;

		case 3107: /* view_check_option: WITH CASCADED CHECK_SYM OPTION */
//  if (yyn == 3107)
//    /* "sql_yacc.y":17571  */
//                                          { yyval= VIEW_CHECK_CASCADED; };
			break;

		case 3108: /* view_check_option: WITH LOCAL_SYM CHECK_SYM OPTION */
//  if (yyn == 3108)
//    /* "sql_yacc.y":17572  */
//                                          { yyval= VIEW_CHECK_LOCAL; };
			break;

		case 3109: /* trigger_action_order: FOLLOWS_SYM */
//  if (yyn == 3109)
//    /* "sql_yacc.y":17583  */
//            { yyval= TRG_ORDER_FOLLOWS; };
			break;

		case 3110: /* trigger_action_order: PRECEDES_SYM */
//  if (yyn == 3110)
//    /* "sql_yacc.y":17585  */
//            { yyval= TRG_ORDER_PRECEDES; };
			break;

		case 3111: /* trigger_follows_precedes_clause: %empty */
//  if (yyn == 3111)
//    /* "sql_yacc.y":17590  */
//            {
//              yyval.ordering_clause= TRG_ORDER_NONE;
//              yyval.anchor_trigger_name= NULL_CSTR;
//            };
			break;

		case 3112: /* trigger_follows_precedes_clause: trigger_action_order ident_or_text */
//  if (yyn == 3112)
//    /* "sql_yacc.y":17596  */
//            {
//              yyval.ordering_clause= ((trigger_action_order_type)(yystack.valueAt (1)));
//              yyval.anchor_trigger_name= { ((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length };
//            };
			break;

		case 3113: /* $@59: %empty */
//  if (yyn == 3113)
//    /* "sql_yacc.y":17614  */
//          {                               /* $12 */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
//              MYSQL_YYABORT;
//            }

//            sp_head *sp= sp_start_parsing(thd, enum_sp_type::TRIGGER, ((spname)(yystack.valueAt (8))));

//            if (!sp)
//              MYSQL_YYABORT;

//            sp->m_trg_chistics.action_time= (enum enum_trigger_action_time_type) ((num)(yystack.valueAt (7)));
//            sp->m_trg_chistics.event= (enum enum_trigger_event_type) ((num)(yystack.valueAt (6)));
//            sp->m_trg_chistics.ordering_clause= ((trg_characteristics)(yystack.valueAt (0))).ordering_clause;
//            sp->m_trg_chistics.anchor_trigger_name= ((trg_characteristics)(yystack.valueAt (0))).anchor_trigger_name;

//            lex->stmt_definition_begin= yystack.locationAt (10).cpp.start;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (9))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//            lex->ident.str= const_cast<char *>(yystack.locationAt (4).cpp.start);
//            lex->ident.length= yystack.locationAt (2).cpp.start - yystack.locationAt (4).cpp.start;

//            lex->sphead= sp;
//            lex->spname= ((spname)(yystack.valueAt (8)));

//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));
//            sp->m_chistics= &lex->sp_chistics;

//            // Default language is SQL
//            lex->sp_chistics.language = {"SQL",3};

//            sp->set_body_start(thd, yystack.locationAt (0).cpp.end);
//          };
			break;

		case 3114: /*
					 * trigger_tail: TRIGGER_SYM opt_if_not_exists sp_name trg_action_time trg_event ON_SYM table_ident FOR_SYM EACH_SYM ROW_SYM trigger_follows_precedes_clause
					 * $@59 sp_proc_stmt
					 */
			if (yyn == 3114)
			/* "sql_yacc.y":17651 */
			{ /* $14 */
//            THD *thd= YYTHD;
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;

//            sp_finish_parsing(thd);

//            lex->sql_command= SQLCOM_CREATE_TRIGGER;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_TRIGGER;

//            if (sp->is_not_allowed_in_function("trigger"))
//              MYSQL_YYABORT;

//            /*
//              We have to do it after parsing trigger body, because some of
//              sp_proc_stmt alternatives are not saving/restoring LEX, so
//              lex->query_tables can be wiped out.
//            */
//            if (!lex->query_block->add_table_to_list(thd, ((table)(yystack.valueAt (6))),
//                                                    nullptr,
//                                                    TL_OPTION_UPDATING,
//                                                    TL_READ_NO_INSERT,
//                                                    MDL_SHARED_NO_WRITE))
//              MYSQL_YYABORT;

//            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_create_trigger();
			}
			;
			break;

		case 3115: /* udf_tail: AGGREGATE_SYM FUNCTION_SYM opt_if_not_exists ident RETURNS_SYM udf_type SONAME_SYM TEXT_STRING_sys */
			if (yyn == 3115)
			/* "sql_yacc.y":17694 */
			{ /* $9 */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            if (is_native_function(((lexer.lex_str)(yystack.valueAt (4)))))
//            {
//              if(((is_not_empty)(yystack.valueAt (5))))
//              {
//                /*
//                  IF NOT EXISTS clause is unsupported when creating a UDF with
//                  the same name as a native function
//                */
//                my_error(ER_IF_NOT_EXISTS_UNSUPPORTED_UDF_NATIVE_FCT_NAME_COLLISION, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//              }
//              else
//                my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//              MYSQL_YYABORT;
//            }
//            lex->sql_command = SQLCOM_CREATE_FUNCTION;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_FUNCTION;
//            lex->udf.type= UDFTYPE_AGGREGATE;
//            lex->stmt_definition_begin= yystack.locationAt (6).cpp.start;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (5))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//            lex->udf.name = ((lexer.lex_str)(yystack.valueAt (4)));
//            lex->udf.returns=(Item_result) ((num)(yystack.valueAt (2)));
//            lex->udf.dl=((lexer.lex_str)(yystack.valueAt (0))).str;
			}
			;
			break;

		case 3116: /* udf_tail: FUNCTION_SYM opt_if_not_exists ident RETURNS_SYM udf_type SONAME_SYM TEXT_STRING_sys */
			if (yyn == 3116)
			/* "sql_yacc.y":17727 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            if (is_native_function(((lexer.lex_str)(yystack.valueAt (4)))))
//            {
//              if(((is_not_empty)(yystack.valueAt (5))))
//              {
//                /*
//                  IF NOT EXISTS clause is unsupported when creating a UDF with
//                  the same name as a native function
//                */
//                my_error(ER_IF_NOT_EXISTS_UNSUPPORTED_UDF_NATIVE_FCT_NAME_COLLISION, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//              }
//              else
//                my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0), ((lexer.lex_str)(yystack.valueAt (4))).str);
//              MYSQL_YYABORT;
//            }
//            lex->sql_command = SQLCOM_CREATE_FUNCTION;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_FUNCTION;
//            lex->udf.type= UDFTYPE_FUNCTION;
//            lex->stmt_definition_begin= yystack.locationAt (6).cpp.start;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (5))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//            lex->udf.name = ((lexer.lex_str)(yystack.valueAt (4)));
//            lex->udf.returns=(Item_result) ((num)(yystack.valueAt (2)));
//            lex->udf.dl=((lexer.lex_str)(yystack.valueAt (0))).str;
			}
			;
			break;

		case 3117: /* $@60: %empty */
//  if (yyn == 3117)
//    /* "sql_yacc.y":17760  */
//          {                     /* $5 */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            lex->stmt_definition_begin= yystack.locationAt (3).cpp.start;
//            lex->spname= ((spname)(yystack.valueAt (1)));

//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
//              MYSQL_YYABORT;
//            }

//            sp_head *sp= sp_start_parsing(thd, enum_sp_type::FUNCTION, lex->spname);

//            if (!sp)
//              MYSQL_YYABORT;

//            lex->sphead= sp;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (2))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;

//            sp->m_parser_data.set_parameter_start_ptr(yystack.locationAt (0).cpp.end);
//          };
			break;

		case 3118: /* $@61: %empty */
//  if (yyn == 3118)
//    /* "sql_yacc.y":17786  */
//          {                     /* $8 */
//            Lex->sphead->m_parser_data.set_parameter_end_ptr(yystack.locationAt (0).cpp.start);
//          };
			break;

		case 3119: /* $@62: %empty */
//  if (yyn == 3119)
//    /* "sql_yacc.y":17792  */
//          {                     /* $12 */
//            LEX *lex= Lex;
//            sp_head *sp= lex->sphead;

//            CONTEXTUALIZE(((type)(yystack.valueAt (1))));
//            enum_field_types field_type= ((type)(yystack.valueAt (1)))->type;
//            const CHARSET_INFO *cs= ((type)(yystack.valueAt (1)))->get_charset();
//            if (merge_sp_var_charset_and_collation(cs, ((lexer.charset)(yystack.valueAt (0))), &cs))
//              MYSQL_YYABORT;

//            /*
//              This was disabled in 5.1.12. See bug #20701
//              When collation support in SP is implemented, then this test
//              should be removed.
//            */
//            if ((field_type == MYSQL_TYPE_STRING || field_type == MYSQL_TYPE_VARCHAR)
//                && (((type)(yystack.valueAt (1)))->get_type_flags() & BINCMP_FLAG))
//            {
//              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
//              MYSQL_YYABORT;
//            }

//            if (sp->m_return_field_def.init(YYTHD, "", field_type,
//                                            ((type)(yystack.valueAt (1)))->get_length(), ((type)(yystack.valueAt (1)))->get_dec(),
//                                            ((type)(yystack.valueAt (1)))->get_type_flags(), nullptr, nullptr, &NULL_CSTR, nullptr,
//                                            ((type)(yystack.valueAt (1)))->get_interval_list(),
//                                            cs ? cs : YYTHD->variables.collation_database,
//                                            ((lexer.charset)(yystack.valueAt (0))) != nullptr, ((type)(yystack.valueAt (1)))->get_uint_geom_type(),
//                                            nullptr, nullptr, {},
//                                            dd::Column::enum_hidden_type::HT_VISIBLE))
//            {
//              MYSQL_YYABORT;
//            }

//            if (prepare_sp_create_field(YYTHD,
//                                        &sp->m_return_field_def))
//              MYSQL_YYABORT;

//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));

//            // Default language is SQL
//            lex->sp_chistics.language = {"SQL",3};
//          };
			break;

		case 3120: /* $@63: %empty */
//  if (yyn == 3120)
//    /* "sql_yacc.y":17836  */
//          {                     /* $14 */
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            lex->sphead->m_chistics= &lex->sp_chistics;
//            lex->sphead->set_body_start(thd, yylloc.cpp.start);
//          };
			break;

		case 3121: /* sf_tail: FUNCTION_SYM opt_if_not_exists sp_name '(' $@60 sp_fdparam_list ')' $@61 RETURNS_SYM type opt_collate $@62 sp_c_chistics $@63 stored_routine_body */
			if (yyn == 3121)
			/* "sql_yacc.y":17844 */
			{
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;
//            sp_head *sp= lex->sphead;

//            if (sp->is_not_allowed_in_function("function"))
//              MYSQL_YYABORT;

//            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_SPFUNCTION;

//            if (sp->is_sql() && !(sp->m_flags & sp_head::HAS_RETURN)) {
//              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
//              MYSQL_YYABORT;
//            }

//            if (is_native_function(sp->m_name))
//            {
//              /*
//                This warning will be printed when
//                [1] A client query is parsed,
//                [2] A stored function is loaded by db_load_routine.
//                Printing the warning for [2] is intentional, to cover the
//                following scenario:
//                - A user define a SF 'foo' using MySQL 5.N
//                - An application uses select foo(), and works.
//                - MySQL 5.{N+1} defines a new native function 'foo', as
//                part of a new feature.
//                - MySQL 5.{N+1} documentation is updated, and should mention
//                that there is a potential incompatible change in case of
//                existing stored function named 'foo'.
//                - The user deploys 5.{N+1}. At this point, 'select foo()'
//                means something different, and the user code is most likely
//                broken (it's only safe if the code is 'select db.foo()').
//                With a warning printed when the SF is loaded (which has to occur
//                before the call), the warning will provide a hint explaining
//                the root cause of a later failure of 'select foo()'.
//                With no warning printed, the user code will fail with no
//                apparent reason.
//                Printing a warning each time db_load_routine is executed for
//                an ambiguous function is annoying, since that can happen a lot,
//                but in practice should not happen unless there *are* name
//                collisions.
//                If a collision exists, it should not be silenced but fixed.
//              */
//              push_warning_printf(thd,
//                                  Sql_condition::SL_NOTE,
//                                  ER_NATIVE_FCT_NAME_COLLISION,
//                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
//                                  sp->m_name.str);
//            }
			}
			;
			break;

		case 3124: /* stored_routine_body: AS routine_string */
//  if (yyn == 3124)
//    /* "sql_yacc.y":17903  */
//          {
//            sp_head *sp = Lex->sphead;
//            if (sp->is_sql()) {
//               YYTHD->syntax_error();
//               MYSQL_YYABORT;
//            }
//            sp->code = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));

//            THD *thd = YYTHD;
//            sp_finish_parsing(thd);
//          };
			break;

		case 3125: /* stored_routine_body: sp_proc_stmt */
//  if (yyn == 3125)
//    /* "sql_yacc.y":17915  */
//          {
//            if (!Lex->sphead->is_sql()) {
//              YYTHD->syntax_error();
//              MYSQL_YYABORT;
//            }

//            THD *thd = YYTHD;
//            sp_finish_parsing(thd);
//          };
			break;

		case 3126: /* $@64: %empty */
//  if (yyn == 3126)
//    /* "sql_yacc.y":17930  */
//          {                     /*$4*/
//            THD *thd= YYTHD;
//            LEX *lex= Lex;

//            if (lex->sphead)
//            {
//              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
//              MYSQL_YYABORT;
//            }

//            lex->stmt_definition_begin= yystack.locationAt (2).cpp.start;

//            sp_head *sp= sp_start_parsing(thd, enum_sp_type::PROCEDURE, ((spname)(yystack.valueAt (0))));

//            if (!sp)
//              MYSQL_YYABORT;

//            lex->sphead= sp;
//            lex->create_info->options= ((is_not_empty)(yystack.valueAt (1))) ? HA_LEX_CREATE_IF_NOT_EXISTS : 0;
//          };
			break;

		case 3127: /* $@65: %empty */
//  if (yyn == 3127)
//    /* "sql_yacc.y":17951  */
//          {                     /*$6*/
//            Lex->sphead->m_parser_data.set_parameter_start_ptr(yystack.locationAt (0).cpp.end);
//          };
			break;

		case 3128: /* $@66: %empty */
//  if (yyn == 3128)
//    /* "sql_yacc.y":17956  */
//          {                     /*$9*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            lex->sphead->m_parser_data.set_parameter_end_ptr(yystack.locationAt (0).cpp.start);
//            memset(&lex->sp_chistics, 0, sizeof(st_sp_chistics));

//            // Default language is SQL
//            lex->sp_chistics.language = {"SQL",3};
//          };
			break;

		case 3129: /* $@67: %empty */
//  if (yyn == 3129)
//    /* "sql_yacc.y":17967  */
//          {                     /*$11*/
//            THD *thd= YYTHD;
//            LEX *lex= thd->lex;

//            lex->sphead->m_chistics= &lex->sp_chistics;
//            lex->sphead->set_body_start(thd, yylloc.cpp.start);
//          };
			break;

		case 3130: /* sp_tail: PROCEDURE_SYM opt_if_not_exists sp_name $@64 '(' $@65 sp_pdparam_list ')' $@66 sp_c_chistics $@67 stored_routine_body */
			if (yyn == 3130)
			/* "sql_yacc.y":17975 */
			{ /* $13 */
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CREATE_PROCEDURE;
			}
			;
			break;

		case 3131: /* xa: XA_SYM begin_or_start xid opt_join_or_resume */
			if (yyn == 3131)
			/* "sql_yacc.y":17985 */
			{
//            Lex->sql_command = SQLCOM_XA_START;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_START;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_start(((xid)(yystack.valueAt (1))), ((xa_option_type)(yystack.valueAt (0))));
			}
			;
			break;

		case 3132: /* xa: XA_SYM END xid opt_suspend */
//  if (yyn == 3132)
		/* "sql_yacc.y":17990 */
		{
//            Lex->sql_command = SQLCOM_XA_END;
			thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_END;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_end(((xid)(yystack.valueAt (1))), ((xa_option_type)(yystack.valueAt (0))));
		}
			;
			break;

		case 3133: /* xa: XA_SYM PREPARE_SYM xid */
			if (yyn == 3133)
			/* "sql_yacc.y":17995 */
			{
//            Lex->sql_command = SQLCOM_XA_PREPARE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_PREPARE;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_prepare(((xid)(yystack.valueAt (0))));
			}
			;
			break;

		case 3134: /* xa: XA_SYM COMMIT_SYM xid opt_one_phase */
			if (yyn == 3134)
			/* "sql_yacc.y":18000 */
			{
//            Lex->sql_command = SQLCOM_XA_COMMIT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_COMMIT;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_commit(((xid)(yystack.valueAt (1))), ((xa_option_type)(yystack.valueAt (0))));
			}
			;
			break;

		case 3135: /* xa: XA_SYM ROLLBACK_SYM xid */
			if (yyn == 3135)
			/* "sql_yacc.y":18005 */
			{
//            Lex->sql_command = SQLCOM_XA_ROLLBACK;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_ROLLBACK;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_rollback(((xid)(yystack.valueAt (0))));
			}
			;
			break;

		case 3136: /* xa: XA_SYM RECOVER_SYM opt_convert_xid */
			if (yyn == 3136)
			/* "sql_yacc.y":18010 */
			{
//            Lex->sql_command = SQLCOM_XA_RECOVER;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_XA_RECOVER;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_xa_recover(((is_not_empty)(yystack.valueAt (0))));
			}
			;
			break;

		case 3137: /* opt_convert_xid: %empty */
//  if (yyn == 3137)
//    /* "sql_yacc.y":18017  */
//                               { yyval= false; };
			break;

		case 3138: /* opt_convert_xid: CONVERT_SYM XID_SYM */
//  if (yyn == 3138)
//    /* "sql_yacc.y":18018  */
//                               { yyval= true; };
			break;

		case 3139: /* xid: text_string */
//  if (yyn == 3139)
//    /* "sql_yacc.y":18022  */
//          {
//            MYSQL_YYABORT_UNLESS(((string)(yystack.valueAt (0)))->length() <= MAXGTRIDSIZE);
//            XID *xid;
//            if (!(xid= (XID *)YYTHD->alloc(sizeof(XID))))
//              MYSQL_YYABORT;
//            xid->set(1L, ((string)(yystack.valueAt (0)))->ptr(), ((string)(yystack.valueAt (0)))->length(), nullptr, 0);
//            yyval= xid;
//          };
			break;

		case 3140: /* xid: text_string ',' text_string */
//  if (yyn == 3140)
//    /* "sql_yacc.y":18031  */
//          {
//            MYSQL_YYABORT_UNLESS(((string)(yystack.valueAt (2)))->length() <= MAXGTRIDSIZE &&
//                                 ((string)(yystack.valueAt (0)))->length() <= MAXBQUALSIZE);
//            XID *xid;
//            if (!(xid= (XID *)YYTHD->alloc(sizeof(XID))))
//              MYSQL_YYABORT;
//            xid->set(1L, ((string)(yystack.valueAt (2)))->ptr(), ((string)(yystack.valueAt (2)))->length(), ((string)(yystack.valueAt (0)))->ptr(), ((string)(yystack.valueAt (0)))->length());
//            yyval= xid;
//          };
			break;

		case 3141: /* xid: text_string ',' text_string ',' ulong_num */
//  if (yyn == 3141)
//    /* "sql_yacc.y":18041  */
//          {
//            // check for overwflow of xid format id
//            bool format_id_overflow_detected= (((ulong_num)(yystack.valueAt (0))) > LONG_MAX);

//            MYSQL_YYABORT_UNLESS(((string)(yystack.valueAt (4)))->length() <= MAXGTRIDSIZE &&
//                                 ((string)(yystack.valueAt (2)))->length() <= MAXBQUALSIZE
//                                 && !format_id_overflow_detected);

//            XID *xid;
//            if (!(xid= (XID *)YYTHD->alloc(sizeof(XID))))
//              MYSQL_YYABORT;
//            xid->set(((ulong_num)(yystack.valueAt (0))), ((string)(yystack.valueAt (4)))->ptr(), ((string)(yystack.valueAt (4)))->length(), ((string)(yystack.valueAt (2)))->ptr(), ((string)(yystack.valueAt (2)))->length());
//            yyval= xid;
//          };
			break;

		case 3142: /* begin_or_start: BEGIN_SYM */
//  if (yyn == 3142)
//    /* "sql_yacc.y":18058  */
//                    {};
			break;

		case 3143: /* begin_or_start: START_SYM */
//  if (yyn == 3143)
//    /* "sql_yacc.y":18059  */
//                    {};
			break;

		case 3144: /* opt_join_or_resume: %empty */
//  if (yyn == 3144)
//    /* "sql_yacc.y":18063  */
//                        { yyval= XA_NONE;        };
			break;

		case 3145: /* opt_join_or_resume: JOIN_SYM */
//  if (yyn == 3145)
//    /* "sql_yacc.y":18064  */
//                        { yyval= XA_JOIN;        };
			break;

		case 3146: /* opt_join_or_resume: RESUME_SYM */
//  if (yyn == 3146)
//    /* "sql_yacc.y":18065  */
//                        { yyval= XA_RESUME;      };
			break;

		case 3147: /* opt_one_phase: %empty */
//  if (yyn == 3147)
//    /* "sql_yacc.y":18069  */
//                            { yyval= XA_NONE;        };
			break;

		case 3148: /* opt_one_phase: ONE_SYM PHASE_SYM */
//  if (yyn == 3148)
//    /* "sql_yacc.y":18070  */
//                            { yyval= XA_ONE_PHASE;   };
			break;

		case 3149: /* opt_suspend: %empty */
//  if (yyn == 3149)
//    /* "sql_yacc.y":18074  */
//                 { yyval= XA_NONE;        };
			break;

		case 3150: /* opt_suspend: SUSPEND_SYM */
//  if (yyn == 3150)
//    /* "sql_yacc.y":18076  */
//          { yyval= XA_SUSPEND;     };
			break;

		case 3151: /* opt_suspend: SUSPEND_SYM FOR_SYM MIGRATE_SYM */
//  if (yyn == 3151)
//    /* "sql_yacc.y":18078  */
//          { yyval= XA_FOR_MIGRATE; };
			break;

		case 3152: /* install_option_type: %empty */
//  if (yyn == 3152)
//    /* "sql_yacc.y":18082  */
//                      { yyval=OPT_GLOBAL; };
			break;

		case 3153: /* install_option_type: GLOBAL_SYM */
//  if (yyn == 3153)
//    /* "sql_yacc.y":18083  */
//                      { yyval=OPT_GLOBAL; };
			break;

		case 3154: /* install_option_type: PERSIST_SYM */
//  if (yyn == 3154)
//    /* "sql_yacc.y":18084  */
//                      { yyval=OPT_PERSIST; };
			break;

		case 3156: /* install_set_rvalue: ON_SYM */
//  if (yyn == 3156)
//    /* "sql_yacc.y":18090  */
//          {
//            yyval= NEW_PTN Item_string((yyloc), "ON", 2, system_charset_info);
//          };
			break;

		case 3157: /* install_set_value: install_option_type lvalue_variable equal install_set_rvalue */
//  if (yyn == 3157)
//    /* "sql_yacc.y":18097  */
//        {
//          yyval = NEW_PTN PT_install_component_set_element {((var_type)(yystack.valueAt (3))), ((bipartite_name)(yystack.valueAt (2))), ((item)(yystack.valueAt (0)))};
//        };
			break;

		case 3158: /* install_set_value_list: install_set_value */
//  if (yyn == 3158)
//    /* "sql_yacc.y":18104  */
//          {
//            yyval = NEW_PTN List<PT_install_component_set_element>;
//            if (!yyval)
//              MYSQL_YYABORT; // OOM
//            if (yyval->push_back(((install_component_set_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3159: /* install_set_value_list: install_set_value_list ',' install_set_value */
//  if (yyn == 3159)
//    /* "sql_yacc.y":18112  */
//          {
//            yyval = ((install_component_set_list)(yystack.valueAt (2)));
//            if (yyval->push_back(((install_component_set_element)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3160: /* opt_install_set_value_list: %empty */
//  if (yyn == 3160)
//    /* "sql_yacc.y":18121  */
//          {
//            yyval = NEW_PTN List<PT_install_component_set_element>;
//          };
			break;

		case 3161: /* opt_install_set_value_list: SET_SYM install_set_value_list */
//  if (yyn == 3161)
//    /* "sql_yacc.y":18124  */
//                                         { yyval = ((install_component_set_list)(yystack.valueAt (0))); };
			break;

		case 3162: /* install_stmt: INSTALL_SYM PLUGIN_SYM ident SONAME_SYM TEXT_STRING_sys */
			if (yyn == 3162)
			/* "sql_yacc.y":18129 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_INSTALL_PLUGIN;
//            lex->m_sql_cmd= new (YYMEM_ROOT) Sql_cmd_install_plugin(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (2)))), ((lexer.lex_str)(yystack.valueAt (0))));
//            yyval = nullptr;
			}
			;
			break;

		case 3163: /* install_stmt: INSTALL_SYM COMPONENT_SYM TEXT_STRING_sys_list opt_install_set_value_list */
//  if (yyn == 3163)
//    /* "sql_yacc.y":18136  */
//          {
//            yyval = NEW_PTN PT_install_component((yyloc), YYTHD, ((lex_str_list)(yystack.valueAt (1))), ((install_component_set_list)(yystack.valueAt (0))));
//          };
			break;

		case 3164: /* uninstall: UNINSTALL_SYM PLUGIN_SYM ident */
			if (yyn == 3164)
			/* "sql_yacc.y":18143 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_UNINSTALL_PLUGIN;
//            lex->m_sql_cmd= new (YYMEM_ROOT) Sql_cmd_uninstall_plugin(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
			}
			;
			break;

		case 3165: /* uninstall: UNINSTALL_SYM COMPONENT_SYM TEXT_STRING_sys_list */
			if (yyn == 3165)
			/* "sql_yacc.y":18149 */
			{
//            LEX *lex= Lex;
//            lex->sql_command= SQLCOM_UNINSTALL_COMPONENT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_UNINSTALL_COMPONENT;
//            lex->m_sql_cmd= new (YYMEM_ROOT) Sql_cmd_uninstall_component(((lex_str_list)(yystack.valueAt (0))));
			}
			;
			break;

		case 3166: /* TEXT_STRING_sys_list: TEXT_STRING_sys */
//  if (yyn == 3166)
//    /* "sql_yacc.y":18158  */
//          {
//            yyval.init(YYTHD->mem_root);
//            if (yyval.push_back(((lexer.lex_str)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3167: /* TEXT_STRING_sys_list: TEXT_STRING_sys_list ',' TEXT_STRING_sys */
//  if (yyn == 3167)
//    /* "sql_yacc.y":18164  */
//          {
//            yyval= ((lex_str_list)(yystack.valueAt (2)));
//            if (yyval.push_back(((lexer.lex_str)(yystack.valueAt (0)))))
//              MYSQL_YYABORT; // OOM
//          };
			break;

		case 3168: /* import_stmt: IMPORT TABLE_SYM FROM TEXT_STRING_sys_list */
			if (yyn == 3168)
			/* "sql_yacc.y":18173 */
			{
//            LEX *lex= Lex;
//            lex->m_sql_cmd=
//              new (YYTHD->mem_root) Sql_cmd_import_table(((lex_str_list)(yystack.valueAt (0))));
//            if (lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
//            lex->sql_command= SQLCOM_IMPORT;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_IMPORT;
			}
			;
			break;

		case 3169: /* clone_stmt: CLONE_SYM LOCAL_SYM DATA_SYM DIRECTORY_SYM opt_equal TEXT_STRING_filesystem */
			if (yyn == 3169)
			/* "sql_yacc.y":18191 */
			{
//            Lex->sql_command= SQLCOM_CLONE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CLONE;
//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_clone(to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));
//            if (Lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
			}
			;
			break;

		case 3170: /* clone_stmt: CLONE_SYM INSTANCE_SYM FROM user ':' ulong_num IDENTIFIED_SYM BY TEXT_STRING_sys opt_datadir_ssl */
			if (yyn == 3170)
			/* "sql_yacc.y":18201 */
			{
//            Lex->sql_command= SQLCOM_CLONE;
				thd.lex.sqlCommand = SQLCommand.SQLCOM_CLONE;
//            /* Reject space characters around ':' */
//            if (yystack.locationAt (4).raw.start - yystack.locationAt (6).raw.end != 1) {
//              YYTHD->syntax_error_at(yystack.locationAt (5));
//              MYSQL_YYABORT;
//            }
//            ((lex_user)(yystack.valueAt (6)))->first_factor_auth_info.auth = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (1))));
//            ((lex_user)(yystack.valueAt (6)))->first_factor_auth_info.uses_identified_by_clause = true;
//            Lex->contains_plaintext_password= true;

//            Lex->m_sql_cmd= NEW_PTN Sql_cmd_clone(((lex_user)(yystack.valueAt (6))), ((ulong_num)(yystack.valueAt (4))), to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0)))));

//            if (Lex->m_sql_cmd == nullptr)
//              MYSQL_YYABORT;
			}
			;
			break;

		case 3171: /* opt_datadir_ssl: opt_ssl */
//  if (yyn == 3171)
//    /* "sql_yacc.y":18221  */
//          {
//            yyval= null_lex_str;
//          };
			break;

		case 3172: /* opt_datadir_ssl: DATA_SYM DIRECTORY_SYM opt_equal TEXT_STRING_filesystem opt_ssl */
//  if (yyn == 3172)
//    /* "sql_yacc.y":18225  */
//          {
//            yyval= ((lexer.lex_str)(yystack.valueAt (1)));
//          };
			break;

		case 3173: /* opt_ssl: %empty */
//  if (yyn == 3173)
//    /* "sql_yacc.y":18232  */
//          {
//            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
//          };
			break;

		case 3174: /* opt_ssl: REQUIRE_SYM SSL_SYM */
//  if (yyn == 3174)
//    /* "sql_yacc.y":18236  */
//          {
//            Lex->ssl_type= SSL_TYPE_SPECIFIED;
//          };
			break;

		case 3175: /* opt_ssl: REQUIRE_SYM NO_SYM SSL_SYM */
//  if (yyn == 3175)
//    /* "sql_yacc.y":18240  */
//          {
//            Lex->ssl_type= SSL_TYPE_NONE;
//          };
			break;

		case 3176: /* resource_group_types: USER */
//  if (yyn == 3176)
//    /* "sql_yacc.y":18246  */
//               { yyval= resourcegroups::Type::USER_RESOURCE_GROUP; };
			break;

		case 3177: /* resource_group_types: SYSTEM_SYM */
//  if (yyn == 3177)
//    /* "sql_yacc.y":18247  */
//                     { yyval= resourcegroups::Type::SYSTEM_RESOURCE_GROUP; };
			break;

		case 3178: /* opt_resource_group_vcpu_list: %empty */
//  if (yyn == 3178)
//    /* "sql_yacc.y":18252  */
//          {
//            /* Make an empty list. */
//            yyval= NEW_PTN Mem_root_array<resourcegroups::Range>(YYMEM_ROOT);
//            if (yyval == nullptr)
//              MYSQL_YYABORT;
//          };
			break;

		case 3179: /* opt_resource_group_vcpu_list: VCPU_SYM opt_equal vcpu_range_spec_list */
//  if (yyn == 3179)
//    /* "sql_yacc.y":18258  */
//                                                  { yyval= ((resource_group_vcpu_list_type)(yystack.valueAt (0))); };
			break;

		case 3180: /* vcpu_range_spec_list: vcpu_num_or_range */
//  if (yyn == 3180)
//    /* "sql_yacc.y":18263  */
//          {
//            resourcegroups::Range r(((vcpu_range_type)(yystack.valueAt (0))).start, ((vcpu_range_type)(yystack.valueAt (0))).end);
//            yyval= NEW_PTN Mem_root_array<resourcegroups::Range>(YYMEM_ROOT);
//            if (yyval == nullptr || yyval->push_back(r))
//              MYSQL_YYABORT;
//          };
			break;

		case 3181: /* vcpu_range_spec_list: vcpu_range_spec_list opt_comma vcpu_num_or_range */
//  if (yyn == 3181)
//    /* "sql_yacc.y":18270  */
//          {
//            resourcegroups::Range r(((vcpu_range_type)(yystack.valueAt (0))).start, ((vcpu_range_type)(yystack.valueAt (0))).end);
//            yyval= ((resource_group_vcpu_list_type)(yystack.valueAt (2)));
//            if (yyval == nullptr || yyval->push_back(r))
//              MYSQL_YYABORT;
//          };
			break;

		case 3182: /* vcpu_num_or_range: NUM */
//  if (yyn == 3182)
//    /* "sql_yacc.y":18280  */
//          {
//            auto cpu_id= my_strtoull(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 10);
//            yyval.start= yyval.end=
//              static_cast<resourcegroups::platform::cpu_id_t>(cpu_id);
//            assert(yyval.start == cpu_id); // truncation check
//          };
			break;

		case 3183: /* vcpu_num_or_range: NUM '-' NUM */
//  if (yyn == 3183)
//    /* "sql_yacc.y":18287  */
//          {
//            auto start= my_strtoull(((lexer.lex_str)(yystack.valueAt (2))).str, nullptr, 10);
//            yyval.start= static_cast<resourcegroups::platform::cpu_id_t>(start);
//            assert(yyval.start == start); // truncation check

//            auto end= my_strtoull(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 10);
//            yyval.end= static_cast<resourcegroups::platform::cpu_id_t>(end);
//            assert(yyval.end == end); // truncation check
//          };
			break;

		case 3184: /* signed_num: NUM */
//  if (yyn == 3184)
//    /* "sql_yacc.y":18299  */
//                  { yyval= static_cast<int>(my_strtoll(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 10)); };
			break;

		case 3185: /* signed_num: '-' NUM */
//  if (yyn == 3185)
//    /* "sql_yacc.y":18300  */
//                  { yyval= -static_cast<int>(my_strtoll(((lexer.lex_str)(yystack.valueAt (0))).str, nullptr, 10)); };
			break;

		case 3186: /* opt_resource_group_priority: %empty */
//  if (yyn == 3186)
//    /* "sql_yacc.y":18304  */
//                 { yyval.is_default= true; };
			break;

		case 3187: /* opt_resource_group_priority: THREAD_PRIORITY_SYM opt_equal signed_num */
//  if (yyn == 3187)
//    /* "sql_yacc.y":18306  */
//          {
//            yyval.is_default= false;
//            yyval.value= ((num)(yystack.valueAt (0)));
//          };
			break;

		case 3188: /* opt_resource_group_enable_disable: %empty */
//  if (yyn == 3188)
//    /* "sql_yacc.y":18313  */
//                 { yyval.is_default= true; };
			break;

		case 3189: /* opt_resource_group_enable_disable: ENABLE_SYM */
//  if (yyn == 3189)
//    /* "sql_yacc.y":18315  */
//          {
//            yyval.is_default= false;
//            yyval.value= true;
//          };
			break;

		case 3190: /* opt_resource_group_enable_disable: DISABLE_SYM */
//  if (yyn == 3190)
//    /* "sql_yacc.y":18320  */
//          {
//            yyval.is_default= false;
//            yyval.value= false;
//          };
			break;

		case 3191: /* opt_force: %empty */
//  if (yyn == 3191)
//    /* "sql_yacc.y":18327  */
//                      { yyval= false; };
			break;

		case 3192: /* opt_force: FORCE_SYM */
//  if (yyn == 3192)
//    /* "sql_yacc.y":18328  */
//                      { yyval= true; };
			break;

		case 3193: /* json_attribute: TEXT_STRING_sys */
//  if (yyn == 3193)
//    /* "sql_yacc.y":18334  */
//          {
//            if (((lexer.lex_str)(yystack.valueAt (0))).str[0] != '\0') {
//              size_t eoff = 0;
//              std::string emsg;
//              if (!is_valid_json_syntax(((lexer.lex_str)(yystack.valueAt (0))).str, ((lexer.lex_str)(yystack.valueAt (0))).length, &eoff, &emsg,
//                  JsonDepthErrorHandler)) {
//                my_error(ER_INVALID_JSON_ATTRIBUTE, MYF(0),
//                         emsg.c_str(), eoff, ((lexer.lex_str)(yystack.valueAt (0))).str+eoff);
//                MYSQL_YYABORT;
//              }
//            }
//            yyval = to_lex_cstring(((lexer.lex_str)(yystack.valueAt (0))));
//          };
			break;

		/* "sql_yacc.java":30554 */

		default:
			break;
		}

		yystack.pop(yylen);
		yylen = 0;
		/* Shift the result of the reduction. */
		int yystate = yyLRGotoState(yystack.stateAt(0), yyr1_[yyn]);
		yystack.push(yystate, yyval, yyloc);
		return YYNEWSTATE;
	}

	/**
	 * Parse input from the scanner that was specified at object construction time. Return whether the end of the input was reached successfully.
	 *
	 * @return <tt>true</tt> if the parsing succeeds. Note that this does not imply that there were no syntax errors.
	 */
	public boolean myParse(MySQLThread thd) throws java.io.IOException {
		/* @$. */
		Location yyloc;

		/* Lookahead token kind. */
		int yychar = YYEMPTY_;
		/* Lookahead symbol kind. */
		SymbolKind yytoken = null;

		/* State. */
		int yyn = 0;
		int yylen = 0;
		int yystate = 0;
		YYStack yystack = new YYStack();
		int label = YYNEWSTATE;

		/* The location where the error started. */
		Location yyerrloc = null;

		/* Location. */
		Location yylloc = new Location(new Position(0));

		/* Semantic value of the lookahead. */
		Object yylval = null;

		LOGGER.debug("Starting parse");

		yyerrstatus_ = 0;
		yynerrs = 0;

		/* Initialize the stack. */
		yystack.push(yystate, yylval, yylloc);

		for (;;)
			switch (label) {
			/*
			 * New state. Unlike in the C/C++ skeletons, the state is already pushed when we come here.
			 */
			case YYNEWSTATE:
				LOGGER.debug("Entering state {}", yystate);
				/* Accept? */
				if (yystate == YYFINAL_)
					return true;

				/* Take a decision. First try without lookahead. */
				yyn = yypact_[yystate];
				if (yyPactValueIsDefault(yyn)) {
					label = YYDEFAULT;
					break;
				}

				/* Read a lookahead token. */
				if (yychar == YYEMPTY_) {
					LOGGER.debug("Reading a token: ");
					yychar = yylexer.yylex(thd);
					yylval = yylexer.getLVal(thd);
					yylloc = new Location(yylexer.getStartPos(thd), yylexer.getEndPos(thd));

				}

				/* Convert token to internal form. */
				yytoken = yytranslate_(yychar);
				yySymbolPrint("Next token is", yytoken.yycode_, yylval);

				if (yytoken == SymbolKind.S_YYerror) {
					// The scanner already issued an error message, process directly
					// to error recovery. But do not keep the error token as
					// lookahead, it is too special and may lead us to an endless
					// loop in error recovery. */
					yychar = Lexer.YYUNDEF;
					yytoken = SymbolKind.S_YYUNDEF;
					yyerrloc = yylloc;
					label = YYERRLAB1;
				} else {
					/*
					 * If the proper action on seeing token YYTOKEN is to reduce or to detect an error, take that action.
					 */
					yyn += yytoken.getCode();
					if (yyn < 0 || YYLAST_ < yyn || yycheck_[yyn] != yytoken.getCode()) {
						label = YYDEFAULT;
					}

					/* <= 0 means reduce or error. */
					else if ((yyn = yytable_[yyn]) <= 0) {
						if (yyTableValueIsError(yyn)) {
							label = YYERRLAB;
						} else {
							yyn = -yyn;
							label = YYREDUCE;
						}
					}

					else {
						/* Shift the lookahead token. */
						yySymbolPrint("Shifting", yytoken.yycode_, yylval);

						/* Discard the token being shifted. */
						yychar = YYEMPTY_;

						/*
						 * Count tokens shifted since error; after three, turn off error status.
						 */
						if (yyerrstatus_ > 0)
							--yyerrstatus_;

						yystate = yyn;
						yystack.push(yystate, yylval, yylloc);
						label = YYNEWSTATE;
					}
				}
				break;

			/*-----------------------------------------------------------.
			| yydefault -- do the default action for the current state.  |
			`-----------------------------------------------------------*/
			case YYDEFAULT:
				yyn = yydefact_[yystate];
				if (yyn == 0)
					label = YYERRLAB;
				else
					label = YYREDUCE;
				break;

			/*-----------------------------.
			| yyreduce -- Do a reduction.  |
			`-----------------------------*/
			case YYREDUCE:
				yylen = yyr2_[yyn];
				label = yyaction(yyn, yystack, yylen, thd);
				yystate = yystack.stateAt(0);
				break;

			/*------------------------------------.
			| yyerrlab -- here on detecting error |
			`------------------------------------*/
			case YYERRLAB:
				/* If not already recovering from an error, report this error. */
				if (yyerrstatus_ == 0) {
					++yynerrs;
					if (yychar == YYEMPTY_)
						yytoken = null;
					yyreportSyntaxError(thd, new Context(this, yystack, yytoken, yylloc));
				}

				yyerrloc = yylloc;
				if (yyerrstatus_ == 3) {
					/*
					 * If just tried and failed to reuse lookahead token after an error, discard it.
					 */

					if (yychar <= Lexer.YYEOF) {
						/* Return failure if at end of input. */
						if (yychar == Lexer.YYEOF)
							return false;
					} else
						yychar = YYEMPTY_;
				}

				/*
				 * Else will try to reuse lookahead token after shifting the error token.
				 */
				label = YYERRLAB1;
				break;

			/*-------------------------------------------------.
			| errorlab -- error raised explicitly by YYERROR.  |
			`-------------------------------------------------*/
			case YYERROR:
				yyerrloc = yystack.locationAt(yylen - 1);
				/*
				 * Do not reclaim the symbols of the rule which action triggered this YYERROR.
				 */
				yystack.pop(yylen);
				yylen = 0;
				yystate = yystack.stateAt(0);
				label = YYERRLAB1;
				break;

			/*-------------------------------------------------------------.
			| yyerrlab1 -- common code for both syntax error and YYERROR.  |
			`-------------------------------------------------------------*/
			case YYERRLAB1:
				yyerrstatus_ = 3; /* Each real token shifted decrements this. */

				// Pop stack until we find a state that shifts the error token.
				for (;;) {
					yyn = yypact_[yystate];
					if (!yyPactValueIsDefault(yyn)) {
						yyn += SymbolKind.S_YYerror.getCode();
						if (0 <= yyn && yyn <= YYLAST_ && yycheck_[yyn] == SymbolKind.S_YYerror.getCode()) {
							yyn = yytable_[yyn];
							if (0 < yyn)
								break;
						}
					}

					/*
					 * Pop the current state because it cannot handle the error token.
					 */
					if (yystack.height == 0)
						return false;

					yyerrloc = yystack.locationAt(0);
					yystack.pop();
					yystate = yystack.stateAt(0);
					yystack.printStateStack();
				}

				if (label == YYABORT)
					/* Leave the switch. */
					break;

				/* Muck with the stack to setup for yylloc. */
				yystack.push(0, null, yylloc);
				yystack.push(0, null, yyerrloc);
				yyloc = yylloc(yystack, 2);
				yystack.pop(2);

				/* Shift the error token. */
				yySymbolPrint("Shifting", yystos_[yyn], yylval);

				yystate = yyn;
				yystack.push(yyn, yylval, yyloc);
				label = YYNEWSTATE;
				break;

			/* Accept. */
			case YYACCEPT:
				return true;

			/* Abort. */
			case YYABORT:
				return false;
			}
	}

	/**
	 * Information needed to get the list of expected tokens and to forge a syntax error diagnostic.
	 */
	public static final class Context {
		Context(MyParser parser, YYStack stack, SymbolKind token, Location loc) {
			yyparser = parser;
			yystack = stack;
			yytoken = token;
			yylocation = loc;
		}

		private MyParser yyparser;
		private YYStack yystack;

		/**
		 * The symbol kind of the lookahead token.
		 */
		public final SymbolKind getToken() {
			return yytoken;
		}

		private SymbolKind yytoken;

		/**
		 * The location of the lookahead.
		 */
		public final Location getLocation() {
			return yylocation;
		}

		private Location yylocation;
		static final int NTOKENS = MyParser.YYNTOKENS_;

		/**
		 * Put in YYARG at most YYARGN of the expected tokens given the current YYCTX, and return the number of tokens stored in YYARG. If YYARG is null, return the
		 * number of expected tokens (guaranteed to be less than YYNTOKENS).
		 */
		int getExpectedTokens(SymbolKind yyarg[], int yyargn) {
			return getExpectedTokens(yyarg, 0, yyargn);
		}

		int getExpectedTokens(SymbolKind yyarg[], int yyoffset, int yyargn) {
			int yycount = yyoffset;
			int yyn = yypact_[this.yystack.stateAt(0)];
			if (!yyPactValueIsDefault(yyn)) {
				/*
				 * Start YYX at -YYN if negative to avoid negative indexes in YYCHECK. In other words, skip the first -YYN actions for this state because they are default
				 * actions.
				 */
				int yyxbegin = yyn < 0 ? -yyn : 0;
				/* Stay within bounds of both yycheck and yytname. */
				int yychecklim = YYLAST_ - yyn + 1;
				int yyxend = yychecklim < NTOKENS ? yychecklim : NTOKENS;
				for (int yyx = yyxbegin; yyx < yyxend; ++yyx)
					if (yycheck_[yyx + yyn] == yyx && yyx != SymbolKind.S_YYerror.getCode() && !yyTableValueIsError(yytable_[yyx + yyn])) {
						if (yyarg == null)
							yycount += 1;
						else if (yycount == yyargn)
							return 0; // FIXME: this is incorrect.
						else
							yyarg[yycount++] = SymbolKind.get(yyx);
					}
			}
			if (yyarg != null && yycount == yyoffset && yyoffset < yyargn)
				yyarg[yycount] = null;
			return yycount - yyoffset;
		}
	}

	/**
	 * Build and emit a "syntax error" message in a user-defined way.
	 *
	 * @param ctx The context of the error.
	 */
	private void yyreportSyntaxError(MySQLThread thd, Context yyctx) {
		yylexer.yyerror(thd, yyctx.yylocation, "syntax error");
	}

	/**
	 * Whether the given <code>yypact_</code> value indicates a defaulted state.
	 *
	 * @param yyvalue the value to check
	 */
	private static boolean yyPactValueIsDefault(int yyvalue) {
		return yyvalue == yypact_ninf_;
	}

	/**
	 * Whether the given <code>yytable_</code> value indicates a syntax error.
	 *
	 * @param yyvalue the value to check
	 */
	private static boolean yyTableValueIsError(int yyvalue) {
		return yyvalue == yytable_ninf_;
	}

	private static final int yypact_ninf_ = -4518;
	private static final short yytable_ninf_ = -2958;

	/*
	 * YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing STATE-NUM.
	 */
	private static Integer[] yypact_;

	/*
	 * YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM. Performed when YYTABLE does not specify something else to do. Zero means the default is
	 * an error.
	 */
	private static Short[] yydefact_;

	/* YYPGOTO[NTERM-NUM]. */
	private static Short[] yypgoto_;

	/* YYDEFGOTO[NTERM-NUM]. */
	private static Short[] yydefgoto_;

	/*
	 * YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM. If positive, shift that token. If negative, reduce the rule whose number is the opposite. If
	 * YYTABLE_NINF, syntax error.
	 */
	private static Short[] yytable_;

	private static Short[] yycheck_;

	/*
	 * YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of state STATE-NUM.
	 */
	private static Short[] yystos_;

	/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM. */
	private static Short[] yyr1_;

	/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM. */
	private static Byte[] yyr2_;

	/*
	 * YYTRANSLATE_(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM as returned by yylex, with out-of-bounds checking.
	 */
	private static final SymbolKind yytranslate_(int t) {
		// Last valid token kind.
		int code_max = 1219;
		if (t <= 0)
			return SymbolKind.S_YYEOF;
		else if (t <= code_max)
			return SymbolKind.get(yytranslate_table_[t]);
		else
			return SymbolKind.S_YYUNDEF;
	}

	private static Short[] yytranslate_table_;

	private static final int YYLAST_ = 94890;
	private static final int YYEMPTY_ = -2;
	private static final int YYFINAL_ = 1118;
	private static final int YYNTOKENS_ = 832;

	private void yySymbolPrint(String s, int yytype, Object yyvalue) {
		if (LOGGER.isDebugEnabled()) {
			LOGGER.debug(s + " {} {} ({})", yytype < YYNTOKENS_ ? "token" : "nterm", SymbolKind.yytname_[yytype], yyvalue == null ? "(null)" : yyvalue.toString());
		}
	}

	public ParseResult parse(String sql) {
		MyParseResult ret = new MyParseResult();
		try {
			SQLThread thd = new SQLThread(sql);
			LexInputStream lip = thd.mParserState.mLip;
			ret.success = true;
			while (ret.success && !lip.eof()) {
				lip.nextState = MyLexStates.MY_LEX_START;
				lip.yylval = null;
				ret.success = myParse(thd);
			}
			ret.parsedSQLInfo = thd.parsedSqls;
		} catch (IOException e) {
			ret.success = false;
		}
		return ret;
	}
}
